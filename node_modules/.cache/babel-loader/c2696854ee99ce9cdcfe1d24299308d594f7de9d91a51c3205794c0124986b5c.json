{"ast":null,"code":"export default {\n  name: 'StreamCheck',\n  data() {\n    return {\n      // No changes to data section\n    };\n  },\n  computed: {\n    // No changes to computed section\n  },\n  created() {\n    // 初始化时加载持久化的数据\n    if (localStorage.getItem('persistentData') === 'true') {\n      const savedList = localStorage.getItem('streamList');\n      if (savedList) {\n        this.streamList = JSON.parse(savedList);\n      }\n    }\n\n    // 监听保存事件\n    this.$root.$on('save-stream-list', this.saveStreamList);\n\n    // 从本地存储恢复状态\n    this.restoreState();\n    // 如果定时检测是开启状态，重新启动定时器\n    if (this.isScheduled) {\n      this.setupSchedule();\n    }\n    // 如果采集是开启状态，重新启动采集\n    if (this.isCollecting) {\n      this.startCollecting(true); // true表示是恢复状态\n    }\n    // 如果GitHub自动同步是开启状态，重新启动同步定时器\n    if (this.syncForm.autoSync) {\n      this.setupSyncSchedule();\n    }\n    this.filteredList = [];\n    this.getRealIp(); // 获取真实IP地址\n  },\n  beforeDestroy() {\n    // No changes to beforeDestroy section\n  },\n  methods: {\n    // No changes to methods section\n  },\n  watch: {\n    // No changes to watch section\n  },\n  activated() {\n    // No changes to activated section\n  },\n  deactivated() {\n    // No changes to deactivated section\n  }\n};","map":{"version":3,"names":["name","data","computed","created","localStorage","getItem","savedList","streamList","JSON","parse","$root","$on","saveStreamList","restoreState","isScheduled","setupSchedule","isCollecting","startCollecting","syncForm","autoSync","setupSyncSchedule","filteredList","getRealIp","beforeDestroy","methods","watch","activated","deactivated"],"sources":["src/components/StreamCheck.vue"],"sourcesContent":["<template>\n  <!-- No changes to template section -->\n</template>\n\n<script>\nexport default {\n  name: 'StreamCheck',\n  data() {\n    return {\n      // No changes to data section\n    }\n  },\n  computed: {\n    // No changes to computed section\n  },\n  created() {\n    // 初始化时加载持久化的数据\n    if (localStorage.getItem('persistentData') === 'true') {\n      const savedList = localStorage.getItem('streamList')\n      if (savedList) {\n        this.streamList = JSON.parse(savedList)\n      }\n    }\n\n    // 监听保存事件\n    this.$root.$on('save-stream-list', this.saveStreamList)\n\n    // 从本地存储恢复状态\n    this.restoreState()\n    // 如果定时检测是开启状态，重新启动定时器\n    if (this.isScheduled) {\n      this.setupSchedule()\n    }\n    // 如果采集是开启状态，重新启动采集\n    if (this.isCollecting) {\n      this.startCollecting(true) // true表示是恢复状态\n    }\n    // 如果GitHub自动同步是开启状态，重新启动同步定时器\n    if (this.syncForm.autoSync) {\n      this.setupSyncSchedule()\n    }\n\n    this.filteredList = []\n    this.getRealIp()  // 获取真实IP地址\n  },\n  beforeDestroy() {\n    // No changes to beforeDestroy section\n  },\n  methods: {\n    // No changes to methods section\n  },\n  watch: {\n    // No changes to watch section\n  },\n  activated() {\n    // No changes to activated section\n  },\n  deactivated() {\n    // No changes to deactivated section\n  }\n}\n</script>\n\n<style scoped>\n/* No changes to style section */\n</style> "],"mappings":"AAKA;EACAA,IAAA;EACAC,KAAA;IACA;MACA;IAAA,CACA;EACA;EACAC,QAAA;IACA;EAAA,CACA;EACAC,QAAA;IACA;IACA,IAAAC,YAAA,CAAAC,OAAA;MACA,MAAAC,SAAA,GAAAF,YAAA,CAAAC,OAAA;MACA,IAAAC,SAAA;QACA,KAAAC,UAAA,GAAAC,IAAA,CAAAC,KAAA,CAAAH,SAAA;MACA;IACA;;IAEA;IACA,KAAAI,KAAA,CAAAC,GAAA,0BAAAC,cAAA;;IAEA;IACA,KAAAC,YAAA;IACA;IACA,SAAAC,WAAA;MACA,KAAAC,aAAA;IACA;IACA;IACA,SAAAC,YAAA;MACA,KAAAC,eAAA;IACA;IACA;IACA,SAAAC,QAAA,CAAAC,QAAA;MACA,KAAAC,iBAAA;IACA;IAEA,KAAAC,YAAA;IACA,KAAAC,SAAA;EACA;EACAC,cAAA;IACA;EAAA,CACA;EACAC,OAAA;IACA;EAAA,CACA;EACAC,KAAA;IACA;EAAA,CACA;EACAC,UAAA;IACA;EAAA,CACA;EACAC,YAAA;IACA;EAAA;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}