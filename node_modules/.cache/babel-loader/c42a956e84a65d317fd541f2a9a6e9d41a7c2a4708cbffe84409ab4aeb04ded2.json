{"ast":null,"code":"export default {\n  name: 'StreamCheck',\n  data() {\n    return {\n      loading: false,\n      streamList: [],\n      importUrlDialogVisible: false,\n      importForm: {\n        url: '',\n        group: ''\n      },\n      importRules: {\n        url: [{\n          required: true,\n          message: '请输入URL地址',\n          trigger: 'blur'\n        }, {\n          type: 'url',\n          message: '请输入正确的URL地址',\n          trigger: 'blur'\n        }],\n        group: [{\n          required: true,\n          message: '请选择分组',\n          trigger: 'change'\n        }]\n      },\n      currentPage: 1,\n      pageSize: 5,\n      isChecking: false,\n      isPaused: false,\n      checkedCount: 0,\n      totalCount: 0,\n      pausedIndex: -1,\n      shouldStop: false,\n      isCollecting: false,\n      collectDialogVisible: false,\n      collectForm: {\n        url: '',\n        autoCollect: false,\n        interval: 30\n      },\n      collectRules: {\n        url: [{\n          required: true,\n          message: '请输入采集地址',\n          trigger: 'blur'\n        }, {\n          type: 'url',\n          message: '请输入正确的URL地址',\n          trigger: 'blur'\n        }],\n        interval: [{\n          required: true,\n          message: '请输入采集间隔',\n          trigger: 'blur'\n        }]\n      },\n      collectTimer: null,\n      generateLinkDialogVisible: false,\n      generatedLink: '',\n      previewContent: '',\n      // 新增预览内容\n      currentLinkId: ''\n    };\n  },\n  computed: {\n    paginatedData() {\n      const start = (this.currentPage - 1) * this.pageSize;\n      const end = start + this.pageSize;\n      return this.streamList.slice(start, end);\n    },\n    checkButtonText() {\n      if (!this.isChecking && !this.isPaused) {\n        return '批量检测';\n      }\n      return `检测中 ${this.checkedCount}/${this.totalCount}`;\n    },\n    mergedStreams() {\n      // 创建一个Map来存储合并后的直播源\n      const streamMap = new Map();\n\n      // 按照当前列表顺序处理每个直播源\n      this.streamList.forEach(stream => {\n        const key = stream.name; // 使用名称作为键\n\n        if (streamMap.has(key)) {\n          // 如果已存在相同名称的直播源，添加到URLs数组\n          const existing = streamMap.get(key);\n          if (!existing.urls.includes(stream.url)) {\n            existing.urls.push(stream.url);\n          }\n        } else {\n          // 如果是新的名称，创建新条目\n          streamMap.set(key, {\n            name: stream.name,\n            urls: [stream.url],\n            group: stream.group\n          });\n        }\n      });\n\n      // 转换回数组格式\n      return Array.from(streamMap.values());\n    }\n  },\n  created() {\n    // 初始化时加载持久化的数据\n    if (localStorage.getItem('persistentData') === 'true') {\n      const savedList = localStorage.getItem('streamList');\n      if (savedList) {\n        this.streamList = JSON.parse(savedList);\n      }\n    }\n\n    // 监听保存事件\n    this.$root.$on('save-stream-list', this.saveStreamList);\n  },\n  beforeDestroy() {\n    // 移除事件监听\n    this.$root.$off('save-stream-list', this.saveStreamList);\n    // 组件销毁前清除定时器\n    if (this.collectTimer) {\n      clearInterval(this.collectTimer);\n    }\n  },\n  methods: {\n    async checkStream(stream) {\n      const ffprobePath = localStorage.getItem('ffprobePath');\n      if (!ffprobePath) {\n        this.$message.error('请先在系统设置中配置FFprobe路径');\n        return false;\n      }\n      try {\n        const response = await fetch('http://localhost:8080/api/check-stream', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            url: stream.url,\n            ffprobePath: ffprobePath\n          })\n        });\n        if (!response.ok) throw new Error('请求失败');\n        const result = await response.json();\n        console.log('检测结果:', result);\n\n        // 更新流信息\n        stream.status = result.available ? '正常' : '异常';\n        stream.resolution = result.resolution || '';\n        stream.responseTime = result.responseTime || 0;\n\n        // 检查是否需要自动清除\n        if (this.shouldRemoveStream(stream)) {\n          // 找到当前页的所有项\n          const currentPageItems = this.paginatedData;\n          // 找到要删除项在当前页的索引\n          const pageIndex = currentPageItems.indexOf(stream);\n          // 找到要删除项在整个列表中的索引\n          const listIndex = this.streamList.indexOf(stream);\n          if (listIndex > -1) {\n            this.streamList.splice(listIndex, 1);\n            // 如果删除的是当前页的最后一项，且不是第一页，则跳转到上一页\n            if (pageIndex === currentPageItems.length - 1 && this.currentPage > 1) {\n              this.currentPage--;\n            }\n          }\n        }\n\n        // 如果开启了持久化，保存更新后的列表\n        this.saveStreamList();\n        return result.available;\n      } catch (error) {\n        console.error('检测错误:', error);\n        stream.status = '异常';\n        return false;\n      }\n    },\n    async handleBatchCheck() {\n      if (this.isPaused) {\n        this.resumeCheck();\n        return;\n      }\n      if (this.streamList.length === 0) {\n        this.$message.warning('列表为空');\n        return;\n      }\n      this.isChecking = true;\n      this.isPaused = false;\n      this.shouldStop = false;\n      this.checkedCount = 0;\n      this.totalCount = this.streamList.length;\n      await this.batchCheck(0);\n    },\n    async batchCheck(startIndex) {\n      let successCount = 0;\n      let failCount = 0;\n      const validStreams = [];\n      for (let i = startIndex; i < this.streamList.length; i++) {\n        if (this.shouldStop) {\n          this.pausedIndex = i;\n          this.isPaused = true;\n          this.isChecking = false;\n          return;\n        }\n        const stream = this.streamList[i];\n        try {\n          const response = await fetch('http://localhost:8080/api/check-stream', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              url: stream.url,\n              ffprobePath: localStorage.getItem('ffprobePath')\n            })\n          });\n          if (!response.ok) throw new Error('请求失败');\n          const result = await response.json();\n\n          // 更新流信息\n          stream.status = result.available ? '正常' : '异常';\n          stream.resolution = result.resolution || '';\n          stream.responseTime = result.responseTime || 0;\n          if (result.available) {\n            successCount++;\n          } else {\n            failCount++;\n          }\n\n          // 根据设置决定是否保留该项\n          if (!this.shouldRemoveStream(stream)) {\n            validStreams.push(stream);\n          }\n        } catch (error) {\n          console.error('检测错误:', error);\n          stream.status = '异常';\n          failCount++;\n\n          // 如果不自动清除异常源，则保留该项\n          if (!localStorage.getItem('autoRemoveInvalid') === 'true') {\n            validStreams.push(stream);\n          }\n        }\n        this.checkedCount++;\n      }\n\n      // 如果检测完成（不是暂停状态）\n      if (!this.shouldStop) {\n        // 批量更新列表\n        this.streamList = validStreams;\n\n        // 更新分页\n        const maxPage = Math.ceil(this.streamList.length / this.pageSize);\n        if (this.currentPage > maxPage) {\n          this.currentPage = Math.max(maxPage, 1);\n        }\n\n        // 保存更新后的列表\n        this.saveStreamList();\n        this.isChecking = false;\n        this.isPaused = false;\n        this.pausedIndex = -1;\n        this.$message.success(`检测完成: ${successCount}个正常, ${failCount}个异常`);\n      }\n    },\n    pauseCheck() {\n      this.shouldStop = true;\n    },\n    async resumeCheck() {\n      if (this.pausedIndex >= 0) {\n        this.isChecking = true;\n        this.isPaused = false;\n        this.shouldStop = false;\n        await this.batchCheck(this.pausedIndex);\n      }\n    },\n    async handleCheck(row) {\n      row.status = '检测中';\n      const success = await this.checkStream(row);\n      this.$message[success ? 'success' : 'error'](`检测${success ? '成功' : '失败'}: ${row.name}`);\n    },\n    handleDelete(row) {\n      this.$confirm('确认删除该直播源?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        const index = this.streamList.indexOf(row);\n        this.streamList.splice(index, 1);\n        const maxPage = Math.ceil(this.streamList.length / this.pageSize);\n        if (this.currentPage > maxPage) {\n          this.currentPage = Math.max(maxPage, 1);\n        }\n        this.saveStreamList(); // 保存更新后的列表\n        this.$message.success('删除成功');\n      }).catch(() => {});\n    },\n    async handleUrlImport() {\n      if (!this.importForm.url) {\n        this.$message.warning('请输入URL地址');\n        return;\n      }\n      this.loading = true;\n      try {\n        const response = await fetch(this.importForm.url);\n        if (!response.ok) throw new Error('网络请求失败');\n        const content = await response.text();\n        const streams = this.parseContent(content);\n        this.addStreamsToList(streams);\n        this.importUrlDialogVisible = false;\n        this.$message.success('网络文件导入成功');\n      } catch (error) {\n        this.$message.error('导入失败：' + error.message);\n      } finally {\n        this.loading = false;\n      }\n    },\n    readFile(file) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = e => resolve(e.target.result);\n        reader.onerror = () => reject(new Error('文件读取失败'));\n        reader.readAsText(file);\n      });\n    },\n    parseContent(content) {\n      // 将内容按行分割\n      const lines = content.split(/\\r?\\n/).filter(line => line.trim());\n      const streams = [];\n\n      // 解析m3u格式\n      if (content.includes('#EXTM3U')) {\n        let currentName = '';\n        lines.forEach(line => {\n          if (line.startsWith('#EXTINF:')) {\n            // 提取频道名称\n            currentName = line.split(',')[1]?.trim() || '';\n          } else if (!line.startsWith('#') && line.trim()) {\n            // 这是一个媒体URL\n            streams.push({\n              name: currentName || `未命名频道${streams.length + 1}`,\n              url: line.trim(),\n              resolution: '',\n              responseTime: 0,\n              status: '未检测',\n              group: '未分组'\n            });\n            currentName = '';\n          }\n        });\n      } else {\n        // 解析txt格式\n        let currentGroup = '未分组';\n        lines.forEach(line => {\n          const trimmedLine = line.trim();\n\n          // 检查是否是分组标签\n          if (trimmedLine.includes('#genre#')) {\n            currentGroup = trimmedLine.split(',')[0].trim();\n            return;\n          }\n\n          // 跳过其他#开头的行和空行\n          if (trimmedLine.startsWith('#') || !trimmedLine) {\n            return;\n          }\n\n          // 处理实际的直播源行\n          if (trimmedLine.includes(',')) {\n            // 如果行包含逗号，假设格式为：名称,URL\n            const parts = trimmedLine.split(',');\n            // 取最后一个部分作为URL，其余部分作为名称\n            const url = parts.pop().trim();\n            const name = parts.join(',').trim();\n            if (url && !url.startsWith('#')) {\n              // 确保URL存在且不是注释\n              streams.push({\n                name: name || `未命名频道${streams.length + 1}`,\n                url: url,\n                resolution: '',\n                responseTime: 0,\n                status: '未检测',\n                group: currentGroup\n              });\n            }\n          } else {\n            // 如果行不包含逗号且不是注释，则整行作为URL\n            streams.push({\n              name: `未命名频道${streams.length + 1}`,\n              url: trimmedLine,\n              resolution: '',\n              responseTime: 0,\n              status: '未检测',\n              group: currentGroup\n            });\n          }\n        });\n      }\n      return streams;\n    },\n    addStreamsToList(streams) {\n      streams.forEach(stream => {\n        this.streamList.push(stream);\n      });\n      this.currentPage = 1;\n      this.saveStreamList(); // 保存更新后的列表\n    },\n    handleSizeChange(val) {\n      this.pageSize = val;\n      // 当每页条数改变时，重置当前页为第一页\n      this.currentPage = 1;\n    },\n    handleCurrentChange(val) {\n      this.currentPage = val;\n    },\n    async handleFileUpload(event) {\n      const file = event.target.files[0];\n      if (!file) return;\n      try {\n        this.loading = true;\n        const content = await this.readFile(file);\n        const streams = this.parseContent(content);\n        this.addStreamsToList(streams);\n        this.$message.success('文件导入成功');\n      } catch (error) {\n        this.$message.error('文件导入失败：' + error.message);\n      } finally {\n        this.loading = false;\n        // 清除文件输入，允许重复选择同一文件\n        event.target.value = '';\n      }\n    },\n    getGroupFromFileName(filename) {\n      // 从文件名中提取可能的分组名\n      const name = filename.toLowerCase();\n      if (name.includes('cctv')) return 'CCTV';\n      if (name.includes('卫视')) return '卫视';\n      if (name.includes('地方')) return '地方台';\n      return '未分组';\n    },\n    handleClearList() {\n      if (this.streamList.length === 0) {\n        this.$message.warning('列表已经为空');\n        return;\n      }\n      this.$confirm('确认清空所有直播源?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        this.streamList = [];\n        this.currentPage = 1;\n        this.saveStreamList(); // 保存更新后的列表\n        this.$message.success('列表已清空');\n      }).catch(() => {});\n    },\n    handleCopy(row) {\n      // 创建一个临时输入框来实现复制功能\n      const textarea = document.createElement('textarea');\n      textarea.value = row.url;\n      document.body.appendChild(textarea);\n      textarea.select();\n      try {\n        document.execCommand('copy');\n        this.$message.success('链接已复制到剪贴板');\n      } catch (err) {\n        this.$message.error('复制失败');\n      } finally {\n        document.body.removeChild(textarea);\n      }\n    },\n    shouldRemoveStream(stream) {\n      // 检查是否需要清除异常源\n      if (localStorage.getItem('autoRemoveInvalid') === 'true' && stream.status === '异常') {\n        return true;\n      }\n\n      // 检查是否需要清除低分辨率源\n      if (localStorage.getItem('autoRemoveLowRes') === 'true' && stream.resolution !== '未知') {\n        const [width, height] = stream.resolution.split('x').map(Number);\n        if (width < 1280 || height < 720) {\n          return true;\n        }\n      }\n      return false;\n    },\n    saveStreamList() {\n      if (localStorage.getItem('persistentData') === 'true') {\n        localStorage.setItem('streamList', JSON.stringify(this.streamList));\n      }\n    },\n    handleCollectMode() {\n      if (this.isCollecting) {\n        this.stopCollecting();\n      } else {\n        this.collectDialogVisible = true;\n      }\n    },\n    async startCollecting() {\n      this.$refs.collectForm.validate(async valid => {\n        if (valid) {\n          this.collectDialogVisible = false;\n          this.isCollecting = true;\n\n          // 立即执行一次采集\n          await this.collect();\n\n          // 如果开启了自动采集，设置定时器\n          if (this.collectForm.autoCollect) {\n            this.collectTimer = setInterval(async () => {\n              await this.collect();\n            }, this.collectForm.interval * 60 * 1000); // 转换为毫秒\n          }\n        }\n      });\n    },\n    stopCollecting() {\n      this.isCollecting = false;\n      if (this.collectTimer) {\n        clearInterval(this.collectTimer);\n        this.collectTimer = null;\n      }\n      this.$message.success('已停止采集');\n    },\n    async collect() {\n      try {\n        this.$message.info('开始采集直播源...');\n        const response = await fetch(this.collectForm.url);\n        if (!response.ok) throw new Error('网络请求失败');\n        const content = await response.text();\n        const newStreams = this.parseContent(content);\n\n        // 过滤出新的直播源\n        const existingUrls = new Set(this.streamList.map(s => s.url));\n        const uniqueStreams = newStreams.filter(s => !existingUrls.has(s.url));\n        if (uniqueStreams.length > 0) {\n          this.addStreamsToList(uniqueStreams);\n          this.$message.success(`采集成功: 新增${uniqueStreams.length}个直播源`);\n        } else {\n          this.$message.info('未发现新的直播源');\n        }\n      } catch (error) {\n        this.$message.error('采集失败：' + error.message);\n        // 如果是单次采集模式，出错时停止采集\n        if (!this.collectForm.autoCollect) {\n          this.stopCollecting();\n        }\n      }\n    },\n    async handleGenerateLink() {\n      try {\n        this.generateLinkDialogVisible = true;\n\n        // 生成内容\n        const content = this.generateContent();\n\n        // 创建或更新链接内容\n        const response = await fetch('http://localhost:8080/api/generate-link', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain'\n          },\n          body: content\n        });\n        if (!response.ok) {\n          throw new Error('生成链接失败');\n        }\n\n        // 使用返回的固定链接\n        this.generatedLink = await response.text();\n      } catch (error) {\n        this.$message.error('生成链接失败：' + error.message);\n      }\n    },\n    generateContent() {\n      let content = '';\n      let currentGroup = '';\n\n      // 按组生成内容\n      this.mergedStreams.forEach(stream => {\n        // 如果组发生变化，添加组标记\n        if (stream.group !== currentGroup) {\n          currentGroup = stream.group;\n          content += `${currentGroup},#genre#\\n`;\n        }\n\n        // 合并相同名称的链接，用#连接\n        content += `${stream.name},${stream.urls.join('#')}\\n`;\n      });\n      return content.trim();\n    },\n    copyGeneratedLink() {\n      const textarea = document.createElement('textarea');\n      textarea.value = this.generatedLink;\n      document.body.appendChild(textarea);\n      textarea.select();\n      try {\n        document.execCommand('copy');\n        this.$message.success('链接已复制到剪贴板');\n      } catch (err) {\n        this.$message.error('复制失败');\n      } finally {\n        document.body.removeChild(textarea);\n      }\n    },\n    downloadTxtFile() {\n      const blob = new Blob([this.generatedLink], {\n        type: 'text/plain;charset=utf-8'\n      });\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `直播源列表_${new Date().toLocaleDateString()}.txt`;\n      document.body.appendChild(link);\n      link.click();\n\n      // 清理\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(link);\n      this.$message.success('文件下载成功');\n    },\n    // 修改更新链接内容的方法\n    async updateLinkContent() {\n      try {\n        const content = this.generateContent();\n        await fetch('http://localhost:8080/api/update-content', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain'\n          },\n          body: content\n        });\n      } catch (error) {\n        console.error('更新链接内容失败：', error);\n      }\n    }\n  },\n  watch: {\n    // 监听列表变化，自动更新链接内容\n    streamList: {\n      handler() {\n        this.updateLinkContent();\n      },\n      deep: true\n    }\n  }\n};","map":{"version":3,"names":["name","data","loading","streamList","importUrlDialogVisible","importForm","url","group","importRules","required","message","trigger","type","currentPage","pageSize","isChecking","isPaused","checkedCount","totalCount","pausedIndex","shouldStop","isCollecting","collectDialogVisible","collectForm","autoCollect","interval","collectRules","collectTimer","generateLinkDialogVisible","generatedLink","previewContent","currentLinkId","computed","paginatedData","start","end","slice","checkButtonText","mergedStreams","streamMap","Map","forEach","stream","key","has","existing","get","urls","includes","push","set","Array","from","values","created","localStorage","getItem","savedList","JSON","parse","$root","$on","saveStreamList","beforeDestroy","$off","clearInterval","methods","checkStream","ffprobePath","$message","error","response","fetch","method","headers","body","stringify","ok","Error","result","json","console","log","status","available","resolution","responseTime","shouldRemoveStream","currentPageItems","pageIndex","indexOf","listIndex","splice","length","handleBatchCheck","resumeCheck","warning","batchCheck","startIndex","successCount","failCount","validStreams","i","maxPage","Math","ceil","max","success","pauseCheck","handleCheck","row","handleDelete","$confirm","confirmButtonText","cancelButtonText","then","index","catch","handleUrlImport","content","text","streams","parseContent","addStreamsToList","readFile","file","Promise","resolve","reject","reader","FileReader","onload","e","target","onerror","readAsText","lines","split","filter","line","trim","currentName","startsWith","currentGroup","trimmedLine","parts","pop","join","handleSizeChange","val","handleCurrentChange","handleFileUpload","event","files","value","getGroupFromFileName","filename","toLowerCase","handleClearList","handleCopy","textarea","document","createElement","appendChild","select","execCommand","err","removeChild","width","height","map","Number","setItem","handleCollectMode","stopCollecting","startCollecting","$refs","validate","valid","collect","setInterval","info","newStreams","existingUrls","Set","s","uniqueStreams","handleGenerateLink","generateContent","copyGeneratedLink","downloadTxtFile","blob","Blob","window","URL","createObjectURL","link","href","download","Date","toLocaleDateString","click","revokeObjectURL","updateLinkContent","watch","handler","deep"],"sources":["src/components/StreamCheck.vue"],"sourcesContent":["<template>\r\n  <div class=\"stream-check\">\r\n    <div class=\"table-operations\">\r\n      <el-button-group>\r\n        <el-button \r\n          type=\"primary\" \r\n          icon=\"el-icon-upload2\"\r\n          @click=\"$refs.fileInput.click()\"\r\n          :disabled=\"isCollecting\">\r\n          导入本地文件\r\n        </el-button>\r\n        <el-button \r\n          type=\"primary\" \r\n          icon=\"el-icon-download\"\r\n          @click=\"importUrlDialogVisible = true\"\r\n          :disabled=\"isCollecting\">\r\n          导入网络文件\r\n        </el-button>\r\n      </el-button-group>\r\n      \r\n      <el-button-group>\r\n        <el-button \r\n          type=\"success\" \r\n          icon=\"el-icon-refresh\"\r\n          @click=\"handleBatchCheck\"\r\n          :loading=\"isChecking\">\r\n          {{ checkButtonText }}\r\n        </el-button>\r\n        <el-button \r\n          v-if=\"isChecking\"\r\n          type=\"warning\" \r\n          icon=\"el-icon-video-pause\"\r\n          @click=\"pauseCheck\">\r\n          暂停检测\r\n        </el-button>\r\n        <el-button \r\n          v-if=\"isPaused\"\r\n          type=\"primary\" \r\n          icon=\"el-icon-video-play\"\r\n          @click=\"resumeCheck\">\r\n          继续检测\r\n        </el-button>\r\n        <el-button \r\n          type=\"danger\" \r\n          icon=\"el-icon-delete\"\r\n          @click=\"handleClearList\">\r\n          清空列表\r\n        </el-button>\r\n      </el-button-group>\r\n      \r\n      <el-button-group>\r\n        <el-button \r\n          :type=\"isCollecting ? 'danger' : 'primary'\"\r\n          icon=\"el-icon-connection\"\r\n          @click=\"handleCollectMode\">\r\n          {{ isCollecting ? '停止采集' : '采集模式' }}\r\n        </el-button>\r\n      </el-button-group>\r\n      \r\n      <el-button-group>\r\n        <el-button \r\n          type=\"primary\"\r\n          icon=\"el-icon-link\"\r\n          @click=\"handleGenerateLink\">\r\n          生成链接\r\n        </el-button>\r\n      </el-button-group>\r\n      \r\n      <!-- 隐藏的文件输入框 -->\r\n      <input\r\n        type=\"file\"\r\n        ref=\"fileInput\"\r\n        style=\"display: none\"\r\n        accept=\".txt,.m3u,.m3u8\"\r\n        @change=\"handleFileUpload\"\r\n      >\r\n    </div>\r\n\r\n    <el-table\r\n      :data=\"paginatedData\"\r\n      border\r\n      style=\"width: 100%\">\r\n      <el-table-column\r\n        prop=\"name\"\r\n        label=\"名称\"\r\n        min-width=\"120\"\r\n        align=\"center\">\r\n      </el-table-column>\r\n      \r\n      <el-table-column\r\n        prop=\"url\"\r\n        label=\"链接\"\r\n        min-width=\"200\"\r\n        align=\"center\"\r\n        show-overflow-tooltip>\r\n      </el-table-column>\r\n      \r\n      <el-table-column\r\n        prop=\"resolution\"\r\n        label=\"分辨率\"\r\n        width=\"120\"\r\n        align=\"center\">\r\n      </el-table-column>\r\n      \r\n      <el-table-column\r\n        prop=\"responseTime\"\r\n        label=\"响应速度\"\r\n        width=\"120\"\r\n        align=\"center\">\r\n        <template slot-scope=\"scope\">\r\n          {{ scope.row.responseTime }}ms\r\n        </template>\r\n      </el-table-column>\r\n      \r\n      <el-table-column\r\n        prop=\"group\"\r\n        label=\"分组\"\r\n        width=\"120\"\r\n        align=\"center\">\r\n      </el-table-column>\r\n      \r\n      <el-table-column\r\n        prop=\"status\"\r\n        label=\"状态\"\r\n        width=\"100\"\r\n        align=\"center\">\r\n        <template slot-scope=\"scope\">\r\n          <el-tag :type=\"scope.row.status === '正常' ? 'success' : 'danger'\">\r\n            {{ scope.row.status }}\r\n          </el-tag>\r\n        </template>\r\n      </el-table-column>\r\n      \r\n      <el-table-column\r\n        label=\"操作\"\r\n        width=\"120\"\r\n        align=\"center\"\r\n        fixed=\"right\">\r\n        <template slot-scope=\"scope\">\r\n          <el-tooltip content=\"复制链接\" placement=\"top\">\r\n            <el-button\r\n              type=\"text\"\r\n              icon=\"el-icon-document-copy\"\r\n              @click=\"handleCopy(scope.row)\">\r\n            </el-button>\r\n          </el-tooltip>\r\n          <el-tooltip content=\"删除\" placement=\"top\">\r\n            <el-button\r\n              type=\"text\"\r\n              class=\"delete-btn\"\r\n              icon=\"el-icon-delete\"\r\n              @click=\"handleDelete(scope.row)\">\r\n            </el-button>\r\n          </el-tooltip>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n\r\n    <!-- 添加分页组件 -->\r\n    <div class=\"pagination-container\">\r\n      <el-pagination\r\n        @size-change=\"handleSizeChange\"\r\n        @current-change=\"handleCurrentChange\"\r\n        :current-page=\"currentPage\"\r\n        :page-sizes=\"[5, 10, 20, 50]\"\r\n        :page-size=\"pageSize\"\r\n        layout=\"total, sizes, prev, pager, next, jumper\"\r\n        :total=\"streamList.length\">\r\n      </el-pagination>\r\n    </div>\r\n\r\n    <!-- 添加/编辑对话框 -->\r\n    <el-dialog\r\n      title=\"导入网络文件\"\r\n      :visible.sync=\"importUrlDialogVisible\"\r\n      width=\"500px\">\r\n      <el-form :model=\"importForm\" label-width=\"80px\" ref=\"importForm\" :rules=\"importRules\">\r\n        <el-form-item label=\"URL地址\" prop=\"url\">\r\n          <el-input \r\n            v-model=\"importForm.url\" \r\n            placeholder=\"请输入txt或m3u文件的网络地址\"\r\n          ></el-input>\r\n        </el-form-item>\r\n      </el-form>\r\n      <div slot=\"footer\">\r\n        <el-button @click=\"importUrlDialogVisible = false\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"handleUrlImport\">导 入</el-button>\r\n      </div>\r\n    </el-dialog>\r\n\r\n    <!-- 采集模式设置对话框 -->\r\n    <el-dialog\r\n      title=\"采集模式设置\"\r\n      :visible.sync=\"collectDialogVisible\"\r\n      width=\"500px\">\r\n      <el-form :model=\"collectForm\" label-width=\"100px\" ref=\"collectForm\" :rules=\"collectRules\">\r\n        <el-form-item label=\"采集地址\" prop=\"url\">\r\n          <el-input \r\n            v-model=\"collectForm.url\" \r\n            placeholder=\"请输入需要采集的网络地址\">\r\n          </el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"自动采集\">\r\n          <el-switch v-model=\"collectForm.autoCollect\"></el-switch>\r\n        </el-form-item>\r\n        <el-form-item \r\n          label=\"采集间隔\" \r\n          prop=\"interval\"\r\n          v-if=\"collectForm.autoCollect\">\r\n          <el-input-number \r\n            v-model=\"collectForm.interval\" \r\n            :min=\"1\"\r\n            :max=\"1440\"\r\n            :step=\"1\">\r\n          </el-input-number>\r\n          <span class=\"setting-tip\">分钟</span>\r\n        </el-form-item>\r\n      </el-form>\r\n      <div slot=\"footer\">\r\n        <el-button @click=\"collectDialogVisible = false\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"startCollecting\">开始采集</el-button>\r\n      </div>\r\n    </el-dialog>\r\n\r\n    <!-- 生成链接对话框 -->\r\n    <el-dialog\r\n      title=\"生成链接\"\r\n      :visible.sync=\"generateLinkDialogVisible\"\r\n      width=\"500px\"\r\n      custom-class=\"generate-link-dialog\">\r\n      <div class=\"link-container\">\r\n        <!-- 链接展示卡片 -->\r\n        <el-card class=\"link-card\">\r\n          <div class=\"link-content\">\r\n            <el-input\r\n              v-model=\"generatedLink\"\r\n              placeholder=\"正在生成链接...\"\r\n              readonly>\r\n              <template slot=\"prepend\">链接地址</template>\r\n              <el-button \r\n                slot=\"append\" \r\n                icon=\"el-icon-document-copy\"\r\n                @click=\"copyGeneratedLink\">\r\n                复制\r\n              </el-button>\r\n            </el-input>\r\n          </div>\r\n        </el-card>\r\n\r\n        <!-- 使用说明 -->\r\n        <el-card class=\"tips-card\">\r\n          <div class=\"tips-content\">\r\n            <ul>\r\n              <li>生成的链接可以直接在支持网络导入的播放器中使用</li>\r\n              <li>链接内容会随列表更新而自动更新</li>\r\n            </ul>\r\n          </div>\r\n        </el-card>\r\n      </div>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'StreamCheck',\r\n  data() {\r\n    return {\r\n      loading: false,\r\n      streamList: [],\r\n      importUrlDialogVisible: false,\r\n      importForm: {\r\n        url: '',\r\n        group: ''\r\n      },\r\n      importRules: {\r\n        url: [\r\n          { required: true, message: '请输入URL地址', trigger: 'blur' },\r\n          { type: 'url', message: '请输入正确的URL地址', trigger: 'blur' }\r\n        ],\r\n        group: [\r\n          { required: true, message: '请选择分组', trigger: 'change' }\r\n        ]\r\n      },\r\n      currentPage: 1,\r\n      pageSize: 5,\r\n      isChecking: false,\r\n      isPaused: false,\r\n      checkedCount: 0,\r\n      totalCount: 0,\r\n      pausedIndex: -1,\r\n      shouldStop: false,\r\n      isCollecting: false,\r\n      collectDialogVisible: false,\r\n      collectForm: {\r\n        url: '',\r\n        autoCollect: false,\r\n        interval: 30\r\n      },\r\n      collectRules: {\r\n        url: [\r\n          { required: true, message: '请输入采集地址', trigger: 'blur' },\r\n          { type: 'url', message: '请输入正确的URL地址', trigger: 'blur' }\r\n        ],\r\n        interval: [\r\n          { required: true, message: '请输入采集间隔', trigger: 'blur' }\r\n        ]\r\n      },\r\n      collectTimer: null,\r\n      generateLinkDialogVisible: false,\r\n      generatedLink: '',\r\n      previewContent: '',  // 新增预览内容\r\n      currentLinkId: ''\r\n    }\r\n  },\r\n  computed: {\r\n    paginatedData() {\r\n      const start = (this.currentPage - 1) * this.pageSize\r\n      const end = start + this.pageSize\r\n      return this.streamList.slice(start, end)\r\n    },\r\n    checkButtonText() {\r\n      if (!this.isChecking && !this.isPaused) {\r\n        return '批量检测'\r\n      }\r\n      return `检测中 ${this.checkedCount}/${this.totalCount}`\r\n    },\r\n    mergedStreams() {\r\n      // 创建一个Map来存储合并后的直播源\r\n      const streamMap = new Map()\r\n      \r\n      // 按照当前列表顺序处理每个直播源\r\n      this.streamList.forEach(stream => {\r\n        const key = stream.name // 使用名称作为键\r\n        \r\n        if (streamMap.has(key)) {\r\n          // 如果已存在相同名称的直播源，添加到URLs数组\r\n          const existing = streamMap.get(key)\r\n          if (!existing.urls.includes(stream.url)) {\r\n            existing.urls.push(stream.url)\r\n          }\r\n        } else {\r\n          // 如果是新的名称，创建新条目\r\n          streamMap.set(key, {\r\n            name: stream.name,\r\n            urls: [stream.url],\r\n            group: stream.group\r\n          })\r\n        }\r\n      })\r\n      \r\n      // 转换回数组格式\r\n      return Array.from(streamMap.values())\r\n    }\r\n  },\r\n  created() {\r\n    // 初始化时加载持久化的数据\r\n    if (localStorage.getItem('persistentData') === 'true') {\r\n      const savedList = localStorage.getItem('streamList')\r\n      if (savedList) {\r\n        this.streamList = JSON.parse(savedList)\r\n      }\r\n    }\r\n\r\n    // 监听保存事件\r\n    this.$root.$on('save-stream-list', this.saveStreamList)\r\n  },\r\n  beforeDestroy() {\r\n    // 移除事件监听\r\n    this.$root.$off('save-stream-list', this.saveStreamList)\r\n    // 组件销毁前清除定时器\r\n    if (this.collectTimer) {\r\n      clearInterval(this.collectTimer)\r\n    }\r\n  },\r\n  methods: {\r\n    async checkStream(stream) {\r\n      const ffprobePath = localStorage.getItem('ffprobePath')\r\n      if (!ffprobePath) {\r\n        this.$message.error('请先在系统设置中配置FFprobe路径')\r\n        return false\r\n      }\r\n\r\n      try {\r\n        const response = await fetch('http://localhost:8080/api/check-stream', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({\r\n            url: stream.url,\r\n            ffprobePath: ffprobePath\r\n          })\r\n        })\r\n\r\n        if (!response.ok) throw new Error('请求失败')\r\n        \r\n        const result = await response.json()\r\n        console.log('检测结果:', result)\r\n        \r\n        // 更新流信息\r\n        stream.status = result.available ? '正常' : '异常'\r\n        stream.resolution = result.resolution || ''\r\n        stream.responseTime = result.responseTime || 0\r\n\r\n        // 检查是否需要自动清除\r\n        if (this.shouldRemoveStream(stream)) {\r\n          // 找到当前页的所有项\r\n          const currentPageItems = this.paginatedData\r\n          // 找到要删除项在当前页的索引\r\n          const pageIndex = currentPageItems.indexOf(stream)\r\n          // 找到要删除项在整个列表中的索引\r\n          const listIndex = this.streamList.indexOf(stream)\r\n          \r\n          if (listIndex > -1) {\r\n            this.streamList.splice(listIndex, 1)\r\n            // 如果删除的是当前页的最后一项，且不是第一页，则跳转到上一页\r\n            if (pageIndex === currentPageItems.length - 1 && this.currentPage > 1) {\r\n              this.currentPage--\r\n            }\r\n          }\r\n        }\r\n        \r\n        // 如果开启了持久化，保存更新后的列表\r\n        this.saveStreamList()\r\n        \r\n        return result.available\r\n      } catch (error) {\r\n        console.error('检测错误:', error)\r\n        stream.status = '异常'\r\n        return false\r\n      }\r\n    },\r\n\r\n    async handleBatchCheck() {\r\n      if (this.isPaused) {\r\n        this.resumeCheck()\r\n        return\r\n      }\r\n      \r\n      if (this.streamList.length === 0) {\r\n        this.$message.warning('列表为空')\r\n        return\r\n      }\r\n\r\n      this.isChecking = true\r\n      this.isPaused = false\r\n      this.shouldStop = false\r\n      this.checkedCount = 0\r\n      this.totalCount = this.streamList.length\r\n      \r\n      await this.batchCheck(0)\r\n    },\r\n\r\n    async batchCheck(startIndex) {\r\n      let successCount = 0\r\n      let failCount = 0\r\n      const validStreams = []\r\n      \r\n      for (let i = startIndex; i < this.streamList.length; i++) {\r\n        if (this.shouldStop) {\r\n          this.pausedIndex = i\r\n          this.isPaused = true\r\n          this.isChecking = false\r\n          return\r\n        }\r\n\r\n        const stream = this.streamList[i]\r\n        try {\r\n          const response = await fetch('http://localhost:8080/api/check-stream', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n              url: stream.url,\r\n              ffprobePath: localStorage.getItem('ffprobePath')\r\n            })\r\n          })\r\n\r\n          if (!response.ok) throw new Error('请求失败')\r\n          \r\n          const result = await response.json()\r\n          \r\n          // 更新流信息\r\n          stream.status = result.available ? '正常' : '异常'\r\n          stream.resolution = result.resolution || ''\r\n          stream.responseTime = result.responseTime || 0\r\n\r\n          if (result.available) {\r\n            successCount++\r\n          } else {\r\n            failCount++\r\n          }\r\n\r\n          // 根据设置决定是否保留该项\r\n          if (!this.shouldRemoveStream(stream)) {\r\n            validStreams.push(stream)\r\n          }\r\n        } catch (error) {\r\n          console.error('检测错误:', error)\r\n          stream.status = '异常'\r\n          failCount++\r\n          \r\n          // 如果不自动清除异常源，则保留该项\r\n          if (!localStorage.getItem('autoRemoveInvalid') === 'true') {\r\n            validStreams.push(stream)\r\n          }\r\n        }\r\n        \r\n        this.checkedCount++\r\n      }\r\n\r\n      // 如果检测完成（不是暂停状态）\r\n      if (!this.shouldStop) {\r\n        // 批量更新列表\r\n        this.streamList = validStreams\r\n        \r\n        // 更新分页\r\n        const maxPage = Math.ceil(this.streamList.length / this.pageSize)\r\n        if (this.currentPage > maxPage) {\r\n          this.currentPage = Math.max(maxPage, 1)\r\n        }\r\n        \r\n        // 保存更新后的列表\r\n        this.saveStreamList()\r\n        \r\n        this.isChecking = false\r\n        this.isPaused = false\r\n        this.pausedIndex = -1\r\n        this.$message.success(`检测完成: ${successCount}个正常, ${failCount}个异常`)\r\n      }\r\n    },\r\n\r\n    pauseCheck() {\r\n      this.shouldStop = true\r\n    },\r\n\r\n    async resumeCheck() {\r\n      if (this.pausedIndex >= 0) {\r\n        this.isChecking = true\r\n        this.isPaused = false\r\n        this.shouldStop = false\r\n        await this.batchCheck(this.pausedIndex)\r\n      }\r\n    },\r\n\r\n    async handleCheck(row) {\r\n      row.status = '检测中'\r\n      \r\n      const success = await this.checkStream(row)\r\n      this.$message[success ? 'success' : 'error'](`检测${success ? '成功' : '失败'}: ${row.name}`)\r\n    },\r\n    handleDelete(row) {\r\n      this.$confirm('确认删除该直播源?', '提示', {\r\n        confirmButtonText: '确定',\r\n        cancelButtonText: '取消',\r\n        type: 'warning'\r\n      }).then(() => {\r\n        const index = this.streamList.indexOf(row)\r\n        this.streamList.splice(index, 1)\r\n        const maxPage = Math.ceil(this.streamList.length / this.pageSize)\r\n        if (this.currentPage > maxPage) {\r\n          this.currentPage = Math.max(maxPage, 1)\r\n        }\r\n        this.saveStreamList()  // 保存更新后的列表\r\n        this.$message.success('删除成功')\r\n      }).catch(() => {})\r\n    },\r\n    async handleUrlImport() {\r\n      if (!this.importForm.url) {\r\n        this.$message.warning('请输入URL地址')\r\n        return\r\n      }\r\n\r\n      this.loading = true\r\n      try {\r\n        const response = await fetch(this.importForm.url)\r\n        if (!response.ok) throw new Error('网络请求失败')\r\n        \r\n        const content = await response.text()\r\n        const streams = this.parseContent(content)\r\n        this.addStreamsToList(streams)\r\n        \r\n        this.importUrlDialogVisible = false\r\n        this.$message.success('网络文件导入成功')\r\n      } catch (error) {\r\n        this.$message.error('导入失败：' + error.message)\r\n      } finally {\r\n        this.loading = false\r\n      }\r\n    },\r\n    readFile(file) {\r\n      return new Promise((resolve, reject) => {\r\n        const reader = new FileReader()\r\n        reader.onload = (e) => resolve(e.target.result)\r\n        reader.onerror = () => reject(new Error('文件读取失败'))\r\n        reader.readAsText(file)\r\n      })\r\n    },\r\n    parseContent(content) {\r\n      // 将内容按行分割\r\n      const lines = content.split(/\\r?\\n/).filter(line => line.trim())\r\n      const streams = []\r\n      \r\n      // 解析m3u格式\r\n      if (content.includes('#EXTM3U')) {\r\n        let currentName = ''\r\n        \r\n        lines.forEach(line => {\r\n          if (line.startsWith('#EXTINF:')) {\r\n            // 提取频道名称\r\n            currentName = line.split(',')[1]?.trim() || ''\r\n          } else if (!line.startsWith('#') && line.trim()) {\r\n            // 这是一个媒体URL\r\n            streams.push({\r\n              name: currentName || `未命名频道${streams.length + 1}`,\r\n              url: line.trim(),\r\n              resolution: '',\r\n              responseTime: 0,\r\n              status: '未检测',\r\n              group: '未分组'\r\n            })\r\n            currentName = ''\r\n          }\r\n        })\r\n      } else {\r\n        // 解析txt格式\r\n        let currentGroup = '未分组'\r\n        \r\n        lines.forEach(line => {\r\n          const trimmedLine = line.trim()\r\n          \r\n          // 检查是否是分组标签\r\n          if (trimmedLine.includes('#genre#')) {\r\n            currentGroup = trimmedLine.split(',')[0].trim()\r\n            return\r\n          }\r\n          \r\n          // 跳过其他#开头的行和空行\r\n          if (trimmedLine.startsWith('#') || !trimmedLine) {\r\n            return\r\n          }\r\n          \r\n          // 处理实际的直播源行\r\n          if (trimmedLine.includes(',')) {\r\n            // 如果行包含逗号，假设格式为：名称,URL\r\n            const parts = trimmedLine.split(',')\r\n            // 取最后一个部分作为URL，其余部分作为名称\r\n            const url = parts.pop().trim()\r\n            const name = parts.join(',').trim()\r\n            \r\n            if (url && !url.startsWith('#')) { // 确保URL存在且不是注释\r\n              streams.push({\r\n                name: name || `未命名频道${streams.length + 1}`,\r\n                url: url,\r\n                resolution: '',\r\n                responseTime: 0,\r\n                status: '未检测',\r\n                group: currentGroup\r\n              })\r\n            }\r\n          } else {\r\n            // 如果行不包含逗号且不是注释，则整行作为URL\r\n            streams.push({\r\n              name: `未命名频道${streams.length + 1}`,\r\n              url: trimmedLine,\r\n              resolution: '',\r\n              responseTime: 0,\r\n              status: '未检测',\r\n              group: currentGroup\r\n            })\r\n          }\r\n        })\r\n      }\r\n      \r\n      return streams\r\n    },\r\n    addStreamsToList(streams) {\r\n      streams.forEach(stream => {\r\n        this.streamList.push(stream)\r\n      })\r\n      this.currentPage = 1\r\n      this.saveStreamList()  // 保存更新后的列表\r\n    },\r\n    handleSizeChange(val) {\r\n      this.pageSize = val\r\n      // 当每页条数改变时，重置当前页为第一页\r\n      this.currentPage = 1\r\n    },\r\n    handleCurrentChange(val) {\r\n      this.currentPage = val\r\n    },\r\n    async handleFileUpload(event) {\r\n      const file = event.target.files[0]\r\n      if (!file) return\r\n\r\n      try {\r\n        this.loading = true\r\n        const content = await this.readFile(file)\r\n        const streams = this.parseContent(content)\r\n        this.addStreamsToList(streams)\r\n        \r\n        this.$message.success('文件导入成功')\r\n      } catch (error) {\r\n        this.$message.error('文件导入失败：' + error.message)\r\n      } finally {\r\n        this.loading = false\r\n        // 清除文件输入，允许重复选择同一文件\r\n        event.target.value = ''\r\n      }\r\n    },\r\n    getGroupFromFileName(filename) {\r\n      // 从文件名中提取可能的分组名\r\n      const name = filename.toLowerCase()\r\n      if (name.includes('cctv')) return 'CCTV'\r\n      if (name.includes('卫视')) return '卫视'\r\n      if (name.includes('地方')) return '地方台'\r\n      return '未分组'\r\n    },\r\n    handleClearList() {\r\n      if (this.streamList.length === 0) {\r\n        this.$message.warning('列表已经为空')\r\n        return\r\n      }\r\n\r\n      this.$confirm('确认清空所有直播源?', '提示', {\r\n        confirmButtonText: '确定',\r\n        cancelButtonText: '取消',\r\n        type: 'warning'\r\n      }).then(() => {\r\n        this.streamList = []\r\n        this.currentPage = 1\r\n        this.saveStreamList()  // 保存更新后的列表\r\n        this.$message.success('列表已清空')\r\n      }).catch(() => {})\r\n    },\r\n    handleCopy(row) {\r\n      // 创建一个临时输入框来实现复制功能\r\n      const textarea = document.createElement('textarea')\r\n      textarea.value = row.url\r\n      document.body.appendChild(textarea)\r\n      textarea.select()\r\n      \r\n      try {\r\n        document.execCommand('copy')\r\n        this.$message.success('链接已复制到剪贴板')\r\n      } catch (err) {\r\n        this.$message.error('复制失败')\r\n      } finally {\r\n        document.body.removeChild(textarea)\r\n      }\r\n    },\r\n    shouldRemoveStream(stream) {\r\n      // 检查是否需要清除异常源\r\n      if (localStorage.getItem('autoRemoveInvalid') === 'true' && \r\n          stream.status === '异常') {\r\n        return true\r\n      }\r\n\r\n      // 检查是否需要清除低分辨率源\r\n      if (localStorage.getItem('autoRemoveLowRes') === 'true' && \r\n          stream.resolution !== '未知') {\r\n        const [width, height] = stream.resolution.split('x').map(Number)\r\n        if (width < 1280 || height < 720) {\r\n          return true\r\n        }\r\n      }\r\n\r\n      return false\r\n    },\r\n    saveStreamList() {\r\n      if (localStorage.getItem('persistentData') === 'true') {\r\n        localStorage.setItem('streamList', JSON.stringify(this.streamList))\r\n      }\r\n    },\r\n    handleCollectMode() {\r\n      if (this.isCollecting) {\r\n        this.stopCollecting()\r\n      } else {\r\n        this.collectDialogVisible = true\r\n      }\r\n    },\r\n    async startCollecting() {\r\n      this.$refs.collectForm.validate(async valid => {\r\n        if (valid) {\r\n          this.collectDialogVisible = false\r\n          this.isCollecting = true\r\n          \r\n          // 立即执行一次采集\r\n          await this.collect()\r\n          \r\n          // 如果开启了自动采集，设置定时器\r\n          if (this.collectForm.autoCollect) {\r\n            this.collectTimer = setInterval(async () => {\r\n              await this.collect()\r\n            }, this.collectForm.interval * 60 * 1000) // 转换为毫秒\r\n          }\r\n        }\r\n      })\r\n    },\r\n    stopCollecting() {\r\n      this.isCollecting = false\r\n      if (this.collectTimer) {\r\n        clearInterval(this.collectTimer)\r\n        this.collectTimer = null\r\n      }\r\n      this.$message.success('已停止采集')\r\n    },\r\n    async collect() {\r\n      try {\r\n        this.$message.info('开始采集直播源...')\r\n        const response = await fetch(this.collectForm.url)\r\n        if (!response.ok) throw new Error('网络请求失败')\r\n        \r\n        const content = await response.text()\r\n        const newStreams = this.parseContent(content)\r\n        \r\n        // 过滤出新的直播源\r\n        const existingUrls = new Set(this.streamList.map(s => s.url))\r\n        const uniqueStreams = newStreams.filter(s => !existingUrls.has(s.url))\r\n        \r\n        if (uniqueStreams.length > 0) {\r\n          this.addStreamsToList(uniqueStreams)\r\n          this.$message.success(`采集成功: 新增${uniqueStreams.length}个直播源`)\r\n        } else {\r\n          this.$message.info('未发现新的直播源')\r\n        }\r\n      } catch (error) {\r\n        this.$message.error('采集失败：' + error.message)\r\n        // 如果是单次采集模式，出错时停止采集\r\n        if (!this.collectForm.autoCollect) {\r\n          this.stopCollecting()\r\n        }\r\n      }\r\n    },\r\n    async handleGenerateLink() {\r\n      try {\r\n        this.generateLinkDialogVisible = true\r\n        \r\n        // 生成内容\r\n        const content = this.generateContent()\r\n        \r\n        // 创建或更新链接内容\r\n        const response = await fetch('http://localhost:8080/api/generate-link', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'text/plain'\r\n          },\r\n          body: content\r\n        })\r\n\r\n        if (!response.ok) {\r\n          throw new Error('生成链接失败')\r\n        }\r\n\r\n        // 使用返回的固定链接\r\n        this.generatedLink = await response.text()\r\n      } catch (error) {\r\n        this.$message.error('生成链接失败：' + error.message)\r\n      }\r\n    },\r\n    generateContent() {\r\n      let content = ''\r\n      let currentGroup = ''\r\n      \r\n      // 按组生成内容\r\n      this.mergedStreams.forEach(stream => {\r\n        // 如果组发生变化，添加组标记\r\n        if (stream.group !== currentGroup) {\r\n          currentGroup = stream.group\r\n          content += `${currentGroup},#genre#\\n`\r\n        }\r\n        \r\n        // 合并相同名称的链接，用#连接\r\n        content += `${stream.name},${stream.urls.join('#')}\\n`\r\n      })\r\n      \r\n      return content.trim()\r\n    },\r\n    copyGeneratedLink() {\r\n      const textarea = document.createElement('textarea')\r\n      textarea.value = this.generatedLink\r\n      document.body.appendChild(textarea)\r\n      textarea.select()\r\n      \r\n      try {\r\n        document.execCommand('copy')\r\n        this.$message.success('链接已复制到剪贴板')\r\n      } catch (err) {\r\n        this.$message.error('复制失败')\r\n      } finally {\r\n        document.body.removeChild(textarea)\r\n      }\r\n    },\r\n    downloadTxtFile() {\r\n      const blob = new Blob([this.generatedLink], { type: 'text/plain;charset=utf-8' })\r\n      const url = window.URL.createObjectURL(blob)\r\n      const link = document.createElement('a')\r\n      link.href = url\r\n      link.download = `直播源列表_${new Date().toLocaleDateString()}.txt`\r\n      \r\n      document.body.appendChild(link)\r\n      link.click()\r\n      \r\n      // 清理\r\n      window.URL.revokeObjectURL(url)\r\n      document.body.removeChild(link)\r\n      this.$message.success('文件下载成功')\r\n    },\r\n    // 修改更新链接内容的方法\r\n    async updateLinkContent() {\r\n      try {\r\n        const content = this.generateContent()\r\n        await fetch('http://localhost:8080/api/update-content', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'text/plain'\r\n          },\r\n          body: content\r\n        })\r\n      } catch (error) {\r\n        console.error('更新链接内容失败：', error)\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    // 监听列表变化，自动更新链接内容\r\n    streamList: {\r\n      handler() {\r\n        this.updateLinkContent()\r\n      },\r\n      deep: true\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.stream-check {\r\n  padding: 20px;\r\n  background-color: #fff;\r\n  border-radius: 4px;\r\n}\r\n\r\n.table-operations {\r\n  margin-bottom: 20px;\r\n  display: flex;\r\n  gap: 10px; /* 按钮组之间的间距 */\r\n}\r\n\r\n.pagination-container {\r\n  margin-top: 20px;\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\n.el-button [class*=\"el-icon-\"] {\r\n  font-size: 18px;\r\n}\r\n\r\n.delete-btn {\r\n  color: #F56C6C;\r\n}\r\n\r\n.delete-btn:hover {\r\n  color: #ff4d4d;\r\n}\r\n\r\n.setting-tip {\r\n  margin-left: 10px;\r\n  color: #909399;\r\n  font-size: 13px;\r\n}\r\n\r\n.link-info {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n}\r\n\r\n.link-info p {\r\n  margin: 0;\r\n  color: #606266;\r\n}\r\n\r\n.link-actions {\r\n  display: flex;\r\n  gap: 10px;\r\n  justify-content: flex-end;\r\n  margin-top: 10px;\r\n}\r\n\r\n/* 生成链接对话框样式 */\r\n.generate-link-dialog {\r\n  max-width: 600px;\r\n}\r\n\r\n.link-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 15px;\r\n}\r\n\r\n.link-card, .tips-card {\r\n  margin: 0;\r\n  border: 1px solid #EBEEF5;\r\n}\r\n\r\n.link-content {\r\n  padding: 10px;\r\n}\r\n\r\n.tips-content {\r\n  color: #606266;\r\n  font-size: 14px;\r\n  padding: 10px;\r\n}\r\n\r\n.tips-content ul {\r\n  margin: 0;\r\n  padding-left: 20px;\r\n  line-height: 1.8;\r\n}\r\n\r\n/* 覆盖 element-ui 的一些默认样式 */\r\n:deep(.el-dialog__body) {\r\n  padding: 20px;\r\n}\r\n\r\n:deep(.el-card__header) {\r\n  padding: 12px 20px;\r\n  font-weight: 500;\r\n}\r\n\r\n:deep(.el-card__body) {\r\n  padding: 15px;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}