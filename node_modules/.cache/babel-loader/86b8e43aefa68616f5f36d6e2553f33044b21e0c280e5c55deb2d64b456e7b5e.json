{"ast":null,"code":"export default {\n  name: 'StreamCheck',\n  data() {\n    return {\n      loading: false,\n      streamList: [],\n      importUrlDialogVisible: false,\n      importUrlForm: {\n        url: '',\n        isChecking: false,\n        isAccessible: null\n      },\n      importRules: {\n        url: [{\n          required: true,\n          message: '请输入URL地址',\n          trigger: 'blur'\n        }, {\n          type: 'url',\n          message: '请输入正确的URL地址',\n          trigger: ['blur', 'change']\n        }],\n        group: [{\n          required: true,\n          message: '请选择分组',\n          trigger: 'change'\n        }]\n      },\n      currentPage: 1,\n      pageSize: 5,\n      isChecking: false,\n      isPaused: false,\n      checkedCount: 0,\n      totalCount: 0,\n      pausedIndex: -1,\n      shouldStop: false,\n      isCollecting: false,\n      collectDialogVisible: false,\n      collectForm: {\n        urls: [''],\n        autoCollect: false,\n        collectType: 'daily',\n        executeTime: '09:00',\n        weekDay: '1',\n        mode: 'all' // 添加采集模式字段\n      },\n      collectRules: {\n        urls: [{\n          type: 'array',\n          validator: (rule, value, callback) => {\n            if (value.length === 0) {\n              callback(new Error('请至少添加一个采集地址'));\n            }\n            // 验证每个URL\n            const errors = value.map(url => {\n              if (!url) return '采集地址不能为空';\n              if (!/^https?:\\/\\/.+/.test(url)) return '请输入正确的URL地址';\n              return null;\n            }).filter(error => error !== null);\n            if (errors.length > 0) {\n              callback(new Error(errors[0]));\n            } else {\n              callback();\n            }\n          },\n          trigger: 'change'\n        }],\n        executeTime: [{\n          required: true,\n          message: '请选择执行时间',\n          trigger: 'change'\n        }],\n        weekDay: [{\n          required: true,\n          message: '请选择执行日期',\n          trigger: 'change'\n        }]\n      },\n      collectTimer: null,\n      generateLinkDialogVisible: false,\n      generatedLink: '',\n      previewContent: '',\n      // 新增预览内容\n      currentLinkId: '',\n      scheduleDialogVisible: false,\n      isScheduled: false,\n      scheduleForm: {\n        scheduleType: 'daily',\n        executeTime: '09:00',\n        weekDay: '1'\n      },\n      scheduleRules: {\n        executeTime: [{\n          required: true,\n          message: '请选择执行时间',\n          trigger: 'change'\n        }],\n        weekDay: [{\n          required: true,\n          message: '请选择执行日期',\n          trigger: 'change'\n        }]\n      },\n      scheduleTimer: null,\n      nextScheduleTime: null,\n      stateKey: 'streamCheckState',\n      // 用于本地存储的key\n      hasActiveOperations: false,\n      // 添加标记表示是否有动作在执行\n      linkForm: {\n        format: 'txt' // 默认txt格式\n      },\n      searchDialogVisible: false,\n      searchForm: {\n        name: '',\n        group: '',\n        status: ''\n      },\n      filteredList: [],\n      // 用于存储搜索过滤后的列表\n      realIp: '',\n      // 存储真实IP地址\n      syncDialogVisible: false,\n      syncForm: {\n        token: localStorage.getItem('githubToken') || '',\n        repo: localStorage.getItem('githubRepo') || '',\n        txtPath: localStorage.getItem('githubTxtPath') || '',\n        m3uPath: localStorage.getItem('githubM3uPath') || '',\n        autoSync: localStorage.getItem('githubAutoSync') === 'true',\n        syncType: localStorage.getItem('githubSyncType') || 'daily',\n        executeTime: localStorage.getItem('githubExecuteTime') || '00:00',\n        weekDay: localStorage.getItem('githubWeekDay') || '1',\n        message: '更新直播源列表'\n      },\n      syncRules: {\n        token: [{\n          required: true,\n          message: '请输入GitHub Token',\n          trigger: 'blur'\n        }],\n        repo: [{\n          required: true,\n          message: '请输入仓库名称',\n          trigger: 'blur'\n        }, {\n          pattern: /^[\\w-]+\\/[\\w-]+$/,\n          message: '格式：用户名/仓库名',\n          trigger: 'blur'\n        }],\n        txtPath: [{\n          required: true,\n          message: '请输入文件路径',\n          trigger: 'blur'\n        }],\n        m3uPath: [{\n          required: true,\n          message: '请输入文件路径',\n          trigger: 'blur'\n        }],\n        message: [{\n          required: true,\n          message: '请输入提交消息',\n          trigger: 'blur'\n        }]\n      },\n      syncTimer: null,\n      messages: [],\n      // 用于存储消息\n      messageId: 0,\n      // 用于生成唯一的消息ID\n      isPageSwitching: false,\n      // 添加页面切换标志\n      // 添加标准分组名称常量\n      STANDARD_GROUPS: {\n        CCTV: '央视频道',\n        SATELLITE: '卫视频道'\n      }\n    };\n  },\n  computed: {\n    paginatedData() {\n      // 使用过滤后的列表进行分页\n      const start = (this.currentPage - 1) * this.pageSize;\n      const end = start + this.pageSize;\n      return (this.filteredList.length > 0 ? this.filteredList : this.streamList).slice(start, end);\n    },\n    checkButtonText() {\n      if (!this.isChecking && !this.isPaused) {\n        return '批量检测';\n      }\n      return `检测中 ${this.checkedCount}/${this.totalCount}`;\n    },\n    mergedStreams() {\n      // 创建一个Map来存储合并后的直播源\n      const streamMap = new Map();\n\n      // 按照当前列表顺序处理每个直播源\n      this.streamList.forEach(stream => {\n        const key = stream.name; // 使用名称作为键\n\n        if (streamMap.has(key)) {\n          // 如果已存在相同名称的直播源，添加到URLs数组\n          const existing = streamMap.get(key);\n          if (!existing.urls.includes(stream.url)) {\n            existing.urls.push(stream.url);\n          }\n        } else {\n          // 如果是新的名称，创建新条目\n          streamMap.set(key, {\n            name: stream.name,\n            urls: [stream.url],\n            group: stream.group\n          });\n        }\n      });\n\n      // 转换回数组格式\n      return Array.from(streamMap.values());\n    },\n    groupOptions() {\n      return [...new Set(this.streamList.map(item => item.group))];\n    }\n  },\n  created() {\n    // 初始化时加载持久化的数据\n    if (localStorage.getItem('persistentData') === 'true') {\n      const savedList = localStorage.getItem('streamList');\n      if (savedList) {\n        this.streamList = JSON.parse(savedList);\n        // 初始化时检查多播源\n        this.$nextTick(() => {\n          this.checkMulticastStreams(); // 使用新方法\n        });\n      }\n    }\n\n    // 监听保存事件\n    this.$root.$on('save-stream-list', this.saveStreamList);\n\n    // 监听设置更新事件\n    this.$root.$on('settings-updated', this.handleSettingsUpdate);\n\n    // 从本地存储恢复状态\n    this.restoreState();\n\n    // 如果定时检测是开启状态，重新启动定时器\n    if (this.isScheduled) {\n      this.setupSchedule();\n    }\n    // 如果采集是开启状态，重新启动采集\n    if (this.isCollecting) {\n      this.startCollecting(true); // true表示是恢复状态\n    }\n    // 如果GitHub自动同步是开启状态，重新启动同步定时器\n    if (this.syncForm.autoSync) {\n      this.setupSyncSchedule();\n    }\n    this.filteredList = [];\n    this.getRealIp(); // 获取真实IP地址\n  },\n  beforeDestroy() {\n    // 移除事件监听\n    this.$root.$off('save-stream-list', this.saveStreamList);\n    this.$root.$off('settings-updated', this.handleSettingsUpdate);\n    // 组件销毁前清除定时器\n    if (this.collectTimer) {\n      clearInterval(this.collectTimer);\n    }\n    // 组件销毁时清理定时器\n    this.stopScheduleCheck();\n    // 在组件销毁前保存状态\n    this.saveState();\n    window.removeEventListener('beforeunload', this.handleBeforeUnload);\n  },\n  methods: {\n    // 添加处理设置更新的方法\n    handleSettingsUpdate(event) {\n      console.log('收到设置更新事件:', event);\n      if (event && event.type === 'settings-changed' && event.settings) {\n        console.log('设置已更新，当前设置:', event.settings);\n        // 重新检查所有多播源\n        this.$nextTick(() => {\n          this.checkMulticastStreams();\n        });\n      }\n    },\n    // 添加多播源检测的辅助方法\n    isMulticastStream(url) {\n      if (!url) return false;\n\n      // 更完整的多播源检测正则表达式\n      const patterns = [\n      // 标准格式\n      /[/](udp|rtp)[/]239\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /[/](udp|rtp)[/]225\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /[/](udp|rtp)[/]224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n      // 带@的格式\n      /^(udp|rtp):\\/\\/@239\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /^(udp|rtp):\\/\\/@225\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /^(udp|rtp):\\/\\/@224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n      // 不带@的格式\n      /^(udp|rtp):\\/\\/239\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /^(udp|rtp):\\/\\/225\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /^(udp|rtp):\\/\\/224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n      // IPv6格式\n      /^(udp|rtp):\\/\\/\\[239\\.\\d+\\.\\d+\\.\\d+\\]:\\d+/i, /^(udp|rtp):\\/\\/\\[225\\.\\d+\\.\\d+\\.\\d+\\]:\\d+/i, /^(udp|rtp):\\/\\/\\[224\\.\\d+\\.\\d+\\.\\d+\\]:\\d+/i,\n      // 其他常见格式\n      /^(udp|rtp):\\/\\/@?239\\.\\d+\\.\\d+\\.\\d+[/]\\d+/i, /^(udp|rtp):\\/\\/@?225\\.\\d+\\.\\d+\\.\\d+[/]\\d+/i, /^(udp|rtp):\\/\\/@?224\\.\\d+\\.\\d+\\.\\d+[/]\\d+/i,\n      // 简单格式\n      /^udp\\/@?239\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /^rtp\\/@?239\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /^udp\\/@?225\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /^rtp\\/@?225\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /^udp\\/@?224\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /^rtp\\/@?224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n      // 带端口的格式\n      /^(udp|rtp):\\/\\/@?239\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /^(udp|rtp):\\/\\/@?225\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /^(udp|rtp):\\/\\/@?224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n      // 特殊格式\n      /^(udp|rtp)[/](239|225|224)\\.\\d+\\.\\d+\\.\\d+[/]?(\\d+)?/i, /^(udp|rtp):\\/\\/(239|225|224)\\.\\d+\\.\\d+\\.\\d+[/]?(\\d+)?/i,\n      // HTTP代理的UDP/RTP多播源格式\n      /http:\\/\\/[^/]+[/](udp|rtp)[/]224\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /http:\\/\\/[^/]+[/](udp|rtp)[/]225\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /http:\\/\\/[^/]+[/](udp|rtp)[/]239\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n      // HTTPS代理的UDP/RTP多播源格式\n      /https:\\/\\/[^/]+[/](udp|rtp)[/]224\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /https:\\/\\/[^/]+[/](udp|rtp)[/]225\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /https:\\/\\/[^/]+[/](udp|rtp)[/]239\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n      // 任何包含 udp 或 rtp 的链接\n      /^(udp|rtp):\\/\\//i, /\\/(udp|rtp)\\//i, /^(udp|rtp)@/i];\n\n      // 先转换为小写进行检查\n      const lowerUrl = url.toLowerCase();\n      const isMulticast = patterns.some(pattern => pattern.test(lowerUrl));\n      if (isMulticast) {\n        console.log('检测到多播源:', url);\n      }\n      return isMulticast;\n    },\n    // 检查多播源的方法\n    checkMulticastStreams() {\n      try {\n        const appSettings = localStorage.getItem('appSettings');\n        if (!appSettings) {\n          console.log('未找到设置配置');\n          return;\n        }\n        let settings;\n        try {\n          settings = JSON.parse(appSettings);\n        } catch (e) {\n          console.error('解析设置失败:', e);\n          return;\n        }\n\n        // 如果启用了自动清除多播源\n        if (settings.autoRemoveMulticast === true) {\n          console.log('开始检查多播源...');\n          let removedCount = 0;\n          const toRemove = [];\n\n          // 检查所有流\n          this.streamList.forEach((stream, index) => {\n            if (this.isMulticastStream(stream.url)) {\n              toRemove.push(index);\n              removedCount++;\n              console.log('发现多播源:', stream.url);\n            }\n          });\n\n          // 从后向前删除\n          for (let i = toRemove.length - 1; i >= 0; i--) {\n            const index = toRemove[i];\n            const stream = this.streamList[index];\n            console.log('正在删除多播源:', stream.name, stream.url);\n            this.streamList.splice(index, 1);\n            this.handleStreamRemoval(stream, '多播源');\n          }\n          if (removedCount > 0) {\n            console.log(`成功清除 ${removedCount} 个多播源`);\n            this.$message.warning(`已自动清除 ${removedCount} 个多播源`);\n            this.saveStreamList();\n\n            // 如果当前页没有数据，跳转到上一页\n            if (this.paginatedData.length === 0 && this.currentPage > 1) {\n              this.currentPage--;\n            }\n          }\n        }\n      } catch (error) {\n        console.error('检查多播源失败:', error);\n      }\n    },\n    async checkStream(stream) {\n      // 优先从 appSettings 中读取 FFprobe 路径\n      let ffprobePath = '';\n      try {\n        const appSettings = localStorage.getItem('appSettings');\n        if (appSettings) {\n          const settings = JSON.parse(appSettings);\n          ffprobePath = settings.ffprobePath;\n        }\n      } catch (error) {\n        console.error('读取 appSettings 失败:', error);\n      }\n\n      // 如果 appSettings 中没有，则从独立设置中读取\n      if (!ffprobePath) {\n        ffprobePath = localStorage.getItem('ffprobePath');\n      }\n      if (!ffprobePath) {\n        console.error('未找到 FFprobe 路径配置');\n        this.$message.error('请先在系统设置中配置FFprobe路径');\n        return false;\n      }\n\n      // 检查是否是多播源\n      if (this.isMulticastStream(stream.url)) {\n        // 直接返回false，不再设置状态\n        return false;\n      }\n      try {\n        const response = await fetch(`${this.getBaseUrl()}/api/check-stream`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            url: stream.url,\n            ffprobePath: ffprobePath\n          })\n        });\n        if (!response.ok) throw new Error('请求失败');\n        const result = await response.json();\n\n        // 更新流信息\n        stream.status = result.available ? '正常' : '异常';\n        stream.resolution = result.resolution || '-';\n        stream.responseTime = result.responseTime || '-';\n\n        // 检查是否需要自动清除\n        if (!result.available || this.shouldRemoveStream(stream)) {\n          let reason = '';\n          if (!result.available || stream.status === '异常') {\n            reason = '异常源';\n          } else if (stream.responseTime > 3000) {\n            reason = '响应时间过慢';\n          } else {\n            reason = '分辨率过低';\n          }\n          const listIndex = this.streamList.indexOf(stream);\n          if (listIndex > -1) {\n            this.streamList.splice(listIndex, 1);\n            this.handleStreamRemoval(stream, reason);\n          }\n        }\n        this.saveStreamList();\n        return result.available;\n      } catch (error) {\n        console.error('检测错误:', error);\n        stream.status = '异常';\n\n        // 如果设置了自动清除异常源，在这里也进行清除\n        if (this.shouldRemoveStream(stream)) {\n          const currentPageItems = this.paginatedData;\n          const pageIndex = currentPageItems.indexOf(stream);\n          const listIndex = this.streamList.indexOf(stream);\n          if (listIndex > -1) {\n            this.streamList.splice(listIndex, 1);\n            if (pageIndex === currentPageItems.length - 1 && this.currentPage > 1) {\n              this.currentPage--;\n            }\n            console.log(`清除异常直播源: ${stream.name}, 原因: 检测失败`);\n            this.$message.warning('已自动清除直播源：检测失败');\n          }\n        }\n        this.saveStreamList();\n        return false;\n      }\n    },\n    shouldRemoveStream(stream) {\n      try {\n        // 获取设置\n        const appSettings = localStorage.getItem('appSettings');\n        let settings = {};\n        if (appSettings) {\n          settings = JSON.parse(appSettings);\n        }\n\n        // 检查是否需要清除异常源\n        if (settings.autoRemoveInvalid === true && (stream.status === '异常' || stream.status === '未知')) {\n          console.log(`应清除异常源: ${stream.name}, 状态: ${stream.status}`);\n          return true;\n        }\n\n        // 获取模式设置\n        const extremeMode = settings.extremeMode === true;\n        const strictMode = settings.strictMode === true;\n\n        // 检查是否需要清除低分辨率源\n        if (settings.autoRemoveLowRes === true && stream.resolution !== '未知' && stream.resolution !== '多播源' && stream.resolution !== '-') {\n          const [width, height] = stream.resolution.split('x').map(Number);\n          if (extremeMode ? width < 1920 || height < 1080 : strictMode ? width < 1920 || height < 1080 : width < 1280 || height < 720) {\n            console.log(`应清除低分辨率源: ${stream.name}, 分辨率: ${stream.resolution}`);\n            return true;\n          }\n        }\n\n        // 检查响应时间\n        if (settings.autoRemoveSlowResponse === true && stream.responseTime !== '-' && Number(stream.responseTime) > (extremeMode ? 1500 : strictMode ? 2000 : 3000)) {\n          console.log(`应清除慢速源: ${stream.name}, 响应时间: ${stream.responseTime}ms`);\n          return true;\n        }\n        return false;\n      } catch (error) {\n        console.error('检查是否应该移除流时出错:', error);\n        return false;\n      }\n    },\n    async handleBatchCheck() {\n      if (this.isChecking) return;\n      const uncheckedStreams = this.streamList.filter(s => !this.isPaused || this.streamList.indexOf(s) > this.pausedIndex);\n      if (uncheckedStreams.length === 0) {\n        this.$message.info('没有需要检测的直播源');\n        return;\n      }\n      this.isChecking = true;\n      this.shouldStop = false;\n      this.totalCount = uncheckedStreams.length;\n      this.checkedCount = this.isPaused ? this.checkedCount : 0;\n      try {\n        // 获取并发检测数量设置\n        const concurrentChecks = parseInt(localStorage.getItem('concurrentChecks')) || 3;\n\n        // 从暂停的位置或开始位置继续检测\n        const startIndex = this.isPaused ? this.pausedIndex + 1 : 0;\n\n        // 分批处理，每批次处理固定数量的流\n        const batchSize = Math.min(concurrentChecks, 10); // 限制最大并发数\n\n        for (let i = startIndex; i < uncheckedStreams.length; i += batchSize) {\n          if (this.shouldStop) break;\n\n          // 获取当前批次要检测的流\n          const batch = uncheckedStreams.slice(i, i + batchSize);\n\n          // 并发检测当前批次的所有流\n          await Promise.all(batch.map(async stream => {\n            if (this.shouldStop) return;\n            try {\n              stream.status = '检测中';\n              const success = await this.checkStream(stream);\n              this.checkedCount++;\n              if (success) {\n                this.saveState();\n              }\n            } catch (error) {\n              console.error('检测流失败:', error);\n              stream.status = '异常';\n              this.checkedCount++;\n            }\n          }));\n\n          // 更新暂停位置\n          this.pausedIndex = i + batchSize - 1;\n\n          // 每批次完成后保存状态\n          this.saveState();\n        }\n        if (!this.shouldStop) {\n          this.isChecking = false;\n          this.isPaused = false;\n          this.pausedIndex = -1;\n          this.$message.success('批量检测完成');\n\n          // 检查是否需要在批量检测完成后同步\n          if (this.syncForm.autoSync && this.syncForm.syncType === 'afterCheck') {\n            await this.syncToGithub(this.generateContent('txt'), this.syncForm.txtPath);\n            await this.syncToGithub(this.generateContent('m3u'), this.syncForm.m3uPath);\n            this.$message.success('已同步到GitHub');\n          }\n        }\n      } catch (error) {\n        console.error('批量检测错误:', error);\n        this.$message.error('批量检测失败');\n      } finally {\n        if (this.shouldStop && this.streamList.length > 0) {\n          this.isChecking = false;\n          this.isPaused = true;\n          this.$message.info('检测已暂停');\n        } else {\n          this.isChecking = false;\n          this.isPaused = false;\n          this.pausedIndex = -1;\n        }\n      }\n    },\n    pauseCheck() {\n      this.shouldStop = true;\n    },\n    async resumeCheck() {\n      if (this.pausedIndex >= 0) {\n        this.isChecking = true;\n        this.isPaused = false;\n        this.shouldStop = false;\n        await this.batchCheck(this.pausedIndex);\n      }\n    },\n    async handleCheck(row) {\n      row.status = '检测中';\n      const success = await this.checkStream(row);\n      this.$message[success ? 'success' : 'error'](`检测${success ? '成功' : '失败'}: ${row.name}`);\n    },\n    handleDelete(row) {\n      this.$confirm('确认删除该直播源?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        const index = this.streamList.indexOf(row);\n        this.streamList.splice(index, 1);\n        const maxPage = Math.ceil(this.streamList.length / this.pageSize);\n        if (this.currentPage > maxPage) {\n          this.currentPage = Math.max(maxPage, 1);\n        }\n        this.saveStreamList(); // 保存更新后的列表\n        this.$message.success('删除成功');\n      }).catch(() => {});\n    },\n    async handleUrlImport() {\n      const valid = await this.$refs.importForm.validate();\n      if (!valid) return;\n      try {\n        const response = await fetch(`${this.getBaseUrl()}/api/import-url`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            url: this.importForm.url\n          })\n        });\n        if (!response.ok) throw new Error('导入失败');\n        const content = await response.text();\n        const newStreams = this.parseContent(content);\n        if (newStreams.length > 0) {\n          // 过滤重复的直播源\n          const existingUrls = new Set(this.streamList.map(s => s.url));\n          const uniqueStreams = newStreams.filter(s => !existingUrls.has(s.url));\n          if (uniqueStreams.length > 0) {\n            this.streamList.push(...uniqueStreams);\n            this.$message.success(`成功导入 ${uniqueStreams.length} 个直播源`);\n            this.importUrlDialogVisible = false;\n\n            // 导入后立即检查多播源\n            this.$nextTick(() => {\n              this.checkMulticastStreams();\n            });\n          } else {\n            this.$message.info('没有新的直播源可以导入');\n          }\n        } else {\n          this.$message.warning('未找到有效的直播源');\n        }\n      } catch (error) {\n        this.$message.error('导入失败：' + error.message);\n      }\n    },\n    readFile(file) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = e => resolve(e.target.result);\n        reader.onerror = () => reject(new Error('文件读取失败'));\n        reader.readAsText(file);\n      });\n    },\n    parseContent(content) {\n      const lines = content.split('\\n');\n      const streams = [];\n      let currentGroup = '未分组';\n\n      // 检测是否是 m3u 格式\n      if (content.includes('#EXTM3U')) {\n        let currentName = '';\n        let currentGroupTitle = '';\n        lines.forEach(line => {\n          line = line.trim();\n          if (!line) return;\n          if (line.startsWith('#EXTINF:')) {\n            // 尝试不同的名称提取方式\n            let name = '';\n\n            // 1. 尝试提取 tvg-name 属性\n            const tvgNameMatch = line.match(/tvg-name=\"([^\"]+)\"/i);\n            if (tvgNameMatch) {\n              name = tvgNameMatch[1].trim();\n            }\n\n            // 2. 如果没有 tvg-name，尝试提取最后的逗号后的名称\n            if (!name) {\n              const lastCommaIndex = line.lastIndexOf(',');\n              if (lastCommaIndex !== -1) {\n                name = line.substring(lastCommaIndex + 1).trim();\n              }\n            }\n\n            // 3. 如果还是没有名称，尝试提取 tvg-id\n            if (!name) {\n              const tvgIdMatch = line.match(/tvg-id=\"([^\"]+)\"/i);\n              if (tvgIdMatch) {\n                name = tvgIdMatch[1].trim();\n              } else {\n                // 3.1 尝试提取不带引号的 tvg-id\n                const tvgIdNoQuoteMatch = line.match(/tvg-id=([^,\\s]+)/i);\n                if (tvgIdNoQuoteMatch) {\n                  name = tvgIdNoQuoteMatch[1].trim();\n                }\n              }\n            }\n            currentName = name || '未命名';\n\n            // 提取分组信息\n            // 1. 先尝试带引号的 group-title\n            const groupMatch = line.match(/group-title=\"([^\"]+)\"/i);\n            if (groupMatch) {\n              currentGroupTitle = groupMatch[1].trim();\n            } else {\n              // 2. 尝试不带引号的 group-title\n              const groupNoQuoteMatch = line.match(/group-title=([^,\\s]+)/i);\n              if (groupNoQuoteMatch) {\n                currentGroupTitle = groupNoQuoteMatch[1].trim();\n              }\n            }\n          } else if (!line.startsWith('#') && line.trim()) {\n            // 这是一个媒体URL行\n            const url = line.trim();\n            // 在添加流之前先检查是否是多播源\n            if (currentName && !this.isMulticastStream(url)) {\n              streams.push({\n                name: currentName,\n                url: url,\n                group: currentGroupTitle || currentGroup,\n                status: '未检测',\n                resolution: '-',\n                responseTime: '-'\n              });\n            } else {\n              console.log('跳过多播源:', url);\n            }\n            currentName = ''; // 重置当前名称\n          }\n        });\n      } else {\n        // txt 格式处理\n        lines.forEach(line => {\n          line = line.trim();\n          if (!line) return;\n\n          // 检查是否是分组标记\n          if (line.endsWith(',#genre#')) {\n            currentGroup = line.replace(',#genre#', '');\n            return;\n          }\n\n          // 解析直播源行\n          const [name, urls] = line.split(',');\n          if (!name || !urls) return;\n\n          // 检查是否包含多个URL（用#分隔）\n          const urlList = urls.split('#');\n\n          // 为每个URL创建一个新的直播源条目，但排除多播源\n          urlList.forEach(url => {\n            url = url.trim();\n            if (url && !this.isMulticastStream(url)) {\n              streams.push({\n                name: name,\n                url: url,\n                group: currentGroup,\n                status: '未检测',\n                resolution: '-',\n                responseTime: '-'\n              });\n            } else if (url) {\n              console.log('跳过多播源:', url);\n            }\n          });\n        });\n      }\n      console.log(`解析完成: 共发现 ${streams.length} 个有效直播源`);\n      return streams;\n    },\n    addStreamsToList(streams) {\n      // 标准化所有流的分组名称\n      streams.forEach(stream => {\n        if (stream.group === '央视' || stream.group === 'CCTV' || stream.group.includes('央视') || stream.group.includes('CCTV')) {\n          stream.group = this.STANDARD_GROUPS.CCTV;\n        } else if (stream.group.includes('卫视')) {\n          stream.group = this.STANDARD_GROUPS.SATELLITE;\n        }\n      });\n\n      // 检查重复并添加到列表\n      const existingStreams = new Set(this.streamList.map(s => `${s.url}|${s.group}`));\n      const uniqueStreams = streams.filter(stream => {\n        const key = `${stream.url}|${stream.group}`;\n        if (existingStreams.has(key)) {\n          return false;\n        }\n        existingStreams.add(key);\n        return true;\n      });\n      this.streamList.push(...uniqueStreams);\n      this.currentPage = 1;\n      this.saveStreamList();\n    },\n    handleSizeChange(val) {\n      this.pageSize = val;\n      // 当每页条数改变时，重置当前页为第一页\n      this.currentPage = 1;\n    },\n    handleCurrentChange(val) {\n      this.currentPage = val;\n    },\n    async handleFileUpload(event) {\n      const file = event.target.files[0];\n      if (!file) return;\n      try {\n        const content = await this.readFile(file);\n        const newStreams = this.parseContent(content);\n        if (newStreams.length > 0) {\n          // 过滤重复的直播源\n          const existingUrls = new Set(this.streamList.map(s => s.url));\n          const uniqueStreams = newStreams.filter(s => !existingUrls.has(s.url));\n          if (uniqueStreams.length > 0) {\n            this.streamList.push(...uniqueStreams);\n            this.$message.success(`成功导入 ${uniqueStreams.length} 个直播源`);\n\n            // 导入后立即检查多播源\n            this.$nextTick(() => {\n              this.checkMulticastStreams();\n            });\n          } else {\n            this.$message.info('没有新的直播源可以导入');\n          }\n        } else {\n          this.$message.warning('未找到有效的直播源');\n        }\n      } catch (error) {\n        this.$message.error('文件读取失败：' + error.message);\n      } finally {\n        // 清除文件输入，允许重复选择同一文件\n        event.target.value = '';\n      }\n    },\n    getGroupFromFileName(filename) {\n      // 从文件名中提取可能的分组名\n      const name = filename.toLowerCase();\n      if (name.includes('cctv')) return 'CCTV';\n      if (name.includes('卫视')) return '卫视';\n      if (name.includes('地方')) return '地方台';\n      return '未分组';\n    },\n    handleClearList() {\n      this.$confirm('确认清空列表吗？', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        // 先停止所有检测和采集任务\n        this.shouldStop = true;\n        this.isChecking = false;\n        this.isPaused = false;\n        this.pausedIndex = -1;\n\n        // 清除所有定时器\n        if (this.collectTimer) {\n          clearInterval(this.collectTimer);\n          this.collectTimer = null;\n        }\n        if (this.scheduleTimer) {\n          clearInterval(this.scheduleTimer);\n          this.scheduleTimer = null;\n        }\n        if (this.syncTimer) {\n          clearInterval(this.syncTimer);\n          this.syncTimer = null;\n        }\n\n        // 重置所有状态\n        this.isCollecting = false;\n        this.isScheduled = false;\n        this.checkedCount = 0;\n        this.totalCount = 0;\n\n        // 清空列表和重置页码\n        this.streamList = [];\n        this.currentPage = 1;\n\n        // 更新链接内容和保存状态\n        this.updateLinkContent();\n        this.saveState();\n        this.$message({\n          type: 'success',\n          message: '列表已清空'\n        });\n      }).catch(() => {\n        this.$message({\n          type: 'info',\n          message: '已取消清空'\n        });\n      });\n    },\n    handleCopy(row) {\n      // 创建一个临时输入框来实现复制功能\n      const textarea = document.createElement('textarea');\n      textarea.value = row.url;\n      document.body.appendChild(textarea);\n      textarea.select();\n      try {\n        document.execCommand('copy');\n        this.$message.success('链接已复制到剪贴板');\n      } catch (err) {\n        this.$message.error('复制失败');\n      } finally {\n        document.body.removeChild(textarea);\n      }\n    },\n    saveStreamList() {\n      if (localStorage.getItem('persistentData') === 'true') {\n        localStorage.setItem('streamList', JSON.stringify(this.streamList));\n      }\n    },\n    handleCollectMode() {\n      if (this.isCollecting) {\n        this.stopCollecting();\n      } else {\n        this.collectDialogVisible = true;\n      }\n    },\n    async startCollecting(isRestore = false) {\n      if (!isRestore) {\n        // 确保 urls 是数组\n        if (!Array.isArray(this.collectForm.urls)) {\n          this.$set(this.collectForm, 'urls', ['']);\n          return;\n        }\n        const valid = await this.$refs.collectForm.validate();\n        if (!valid) return;\n      }\n      this.collectDialogVisible = false;\n      this.isCollecting = true;\n      this.saveState(); // 保存状态\n\n      // 立即执行一次采集\n      await this.collect();\n\n      // 如果开启了自动采集，设置定时器\n      if (this.collectForm.autoCollect) {\n        this.setupCollectSchedule();\n      } else {\n        // 单次采集完成后停止\n        this.isCollecting = false;\n        this.saveState();\n      }\n    },\n    stopCollecting() {\n      this.isCollecting = false;\n      if (this.collectTimer) {\n        clearInterval(this.collectTimer);\n        this.collectTimer = null;\n      }\n      this.saveState(); // 保存状态\n      // 只有在自动采集模式下才显示停止提示\n      if (this.collectForm.autoCollect) {\n        this.$message.success('已停止采集');\n      }\n    },\n    async collect() {\n      try {\n        if (this.isChecking) {\n          this.$message.warning('检测正在进行中，暂时跳过本次采集');\n          return;\n        }\n        this.$message.info('开始采集直播源...');\n        const results = await Promise.allSettled(this.collectForm.urls.map(async url => {\n          try {\n            const response = await fetch(`${this.getBaseUrl()}/api/collect-url?url=${encodeURIComponent(url)}`, {\n              method: 'GET',\n              headers: {\n                'Accept': 'text/plain'\n              }\n            });\n            if (!response.ok) throw new Error(`采集失败: ${url}`);\n            const content = await response.text();\n            const newStreams = this.parseContent(content);\n\n            // 根据采集模式过滤直播源\n            let filteredStreams = newStreams;\n            if (this.collectForm.mode === 'tv') {\n              filteredStreams = newStreams.filter(s => {\n                // 处理央视频道\n                const isCCTV = /CCTV|央视|中央电视台/.test(s.name);\n                if (isCCTV) {\n                  s.group = this.STANDARD_GROUPS.CCTV; // 使用标准分组名称\n                  // 标准化央视频道名称\n                  const cctvNumber = this.extractCCTVNumber(s.name);\n                  if (cctvNumber) {\n                    s.name = cctvNumber;\n                  }\n                  return true;\n                }\n                // 处理卫视频道\n                const isSatellite = /卫视/.test(s.name);\n                if (isSatellite) {\n                  s.group = this.STANDARD_GROUPS.SATELLITE; // 使用标准分组名称\n                  return true;\n                }\n                return false;\n              });\n            }\n\n            // 过滤重复的直播源（同时考虑URL和分组）\n            const existingStreams = new Set(this.streamList.map(s => `${s.url}|${s.group}`));\n            return filteredStreams.filter(s => {\n              const key = `${s.url}|${s.group}`;\n              if (existingStreams.has(key)) {\n                return false;\n              }\n              existingStreams.add(key);\n              return true;\n            });\n          } catch (error) {\n            console.error(`采集地址 ${url} 失败:`, error);\n            return [];\n          }\n        }));\n\n        // 合并所有采集结果\n        const allNewStreams = results.filter(result => result.status === 'fulfilled').flatMap(result => result.value).filter((stream, index, self) => index === self.findIndex(s => s.url === stream.url));\n\n        // 添加新的直播源到列表\n        if (allNewStreams.length > 0) {\n          this.addStreamsToList(allNewStreams);\n          const modeText = this.collectForm.mode === 'tv' ? '央视卫视' : '';\n          this.$message.success(`采集成功: 新增${allNewStreams.length}个${modeText}直播源`);\n        } else {\n          const modeText = this.collectForm.mode === 'tv' ? '央视卫视' : '';\n          this.$message.info(`未发现新的${modeText}直播源`);\n        }\n\n        // 统计失败的地址\n        const failedUrls = results.filter(result => result.status === 'rejected').length;\n        if (failedUrls > 0) {\n          this.$message.warning(`${failedUrls}个地址采集失败`);\n        }\n      } catch (error) {\n        this.$message.error('采集失败：' + error.message);\n        if (!this.collectForm.autoCollect) {\n          this.stopCollecting();\n        }\n      }\n    },\n    // 添加提取CCTV频道号的方法\n    extractCCTVNumber(name) {\n      // 标准化名称映射\n      const nameMap = {\n        // 标准频道\n        '综合': 'CCTV1',\n        '财经': 'CCTV2',\n        '综艺': 'CCTV3',\n        '中文国际': 'CCTV4',\n        '体育': 'CCTV5',\n        '体育赛事': 'CCTV5+',\n        '电影': 'CCTV6',\n        '国防军事': 'CCTV7',\n        '电视剧': 'CCTV8',\n        '记录': 'CCTV9',\n        '科教': 'CCTV10',\n        '戏曲': 'CCTV11',\n        '社会与法': 'CCTV12',\n        '新闻': 'CCTV13',\n        '少儿': 'CCTV14',\n        '音乐': 'CCTV15',\n        '奥林匹克': 'CCTV16',\n        '农业农村': 'CCTV17',\n        // 特殊频道\n        '中学生': 'CCTV中学生',\n        '文化精品': 'CCTV文化精品',\n        '怀旧剧场': 'CCTV怀旧剧场',\n        '风云剧场': 'CCTV风云剧场',\n        '第一剧场': 'CCTV第一剧场',\n        '风云音乐': 'CCTV风云音乐',\n        '风云足球': 'CCTV风云足球',\n        '世界地理': 'CCTV世界地理',\n        '女性时尚': 'CCTV女性时尚',\n        '央视台球': 'CCTV央视台球',\n        '高尔夫网球': 'CCTV高尔夫网球',\n        '央视文化精品': 'CCTV文化精品',\n        '兵器科技': 'CCTV兵器科技',\n        '电视指南': 'CCTV电视指南',\n        '卫生健康': 'CCTV卫生健康',\n        '发现之旅': 'CCTV发现之旅',\n        '老故事': 'CCTV老故事',\n        '中视购物': 'CCTV中视购物',\n        '女性时尚': 'CCTV女性时尚',\n        '新科动漫': 'CCTV新科动漫',\n        // 外语频道\n        '俄语': 'CCTV俄语',\n        '法语': 'CCTV法语',\n        '西班牙语': 'CCTV西班牙语',\n        '阿拉伯语': 'CCTV阿拉伯语',\n        '英语': 'CCTV英语'\n      };\n\n      // 1. 首先尝试直接匹配CCTV+数字的形式\n      const cctvMatch = name.match(/CCTV-?(\\d+)(\\+)?/i);\n      if (cctvMatch) {\n        const number = cctvMatch[1];\n        const plus = cctvMatch[2] || '';\n        return `CCTV${number}${plus}`;\n      }\n\n      // 2. 处理特殊频道名称（如CCTV5+）\n      if (/CCTV5\\+|CCTV5Plus|体育赛事/.test(name)) {\n        return 'CCTV5+';\n      }\n\n      // 3. 处理特殊频道（完全匹配）\n      const normalizedName = name.replace(/[-_ ]/g, '').toLowerCase();\n      for (const [key, value] of Object.entries(nameMap)) {\n        if (normalizedName.includes(key.toLowerCase())) {\n          return value;\n        }\n      }\n\n      // 4. 处理已经是标准格式的特殊频道名称\n      if (/CCTV[^0-9]/.test(name)) {\n        // 如果已经是CCTV开头的特殊频道，保持原样但标准化格式\n        return name.replace(/CCTV[-_ ]?/i, 'CCTV');\n      }\n\n      // 5. 处理其他包含CCTV、央视、中央电视台的情况\n      if (name.includes('CCTV') || name.includes('央视') || name.includes('中央电视台')) {\n        // 如果无法确定具体频道，但包含数字，则格式化为CCTVx\n        const cleanName = name.replace(/[^0-9]+/g, '');\n        if (cleanName) {\n          return `CCTV${cleanName}`;\n        }\n        // 如果没有数字，保持原始名称但添加CCTV前缀\n        return `CCTV${name.replace(/^(CCTV|央视|中央电视台)/, '')}`;\n      }\n      return null;\n    },\n    async handleGenerateLink() {\n      this.generateLinkDialogVisible = true;\n      try {\n        // 先生成 TXT 格式链接\n        const txtResponse = await fetch(`${this.getBaseUrl()}/api/generate-link`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain',\n            'X-File-Format': 'txt'\n          },\n          body: this.generateContent('txt')\n        });\n\n        // 再生成 M3U 格式链接\n        const m3uResponse = await fetch(`${this.getBaseUrl()}/api/generate-link`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain',\n            'X-File-Format': 'm3u'\n          },\n          body: this.generateContent('m3u')\n        });\n        if (txtResponse.ok && m3uResponse.ok) {\n          const txtLink = await txtResponse.text();\n          const m3uLink = await m3uResponse.text();\n\n          // 根据当前选择的格式显示对应的链接\n          this.generatedLinks = {\n            txt: txtLink,\n            m3u: m3uLink\n          };\n          this.generatedLink = this.generatedLinks[this.linkForm.format];\n        }\n      } catch (error) {\n        console.error('生成链接失败：', error);\n        this.$message.error('生成链接失败');\n      }\n    },\n    generateContent(format) {\n      return format === 'txt' ? this.generateTxtContent() : this.generateM3uContent();\n    },\n    generateTxtContent() {\n      let content = '';\n      let currentGroup = '';\n\n      // 对每个分组内的直播源按响应速度排序\n      const sortedStreams = [...this.mergedStreams].sort((a, b) => {\n        if (a.group !== b.group) return 0; // 不同分组不改变顺序\n        const aTime = Number(a.responseTime) || Infinity;\n        const bTime = Number(b.responseTime) || Infinity;\n        return aTime - bTime;\n      });\n      sortedStreams.forEach(stream => {\n        if (stream.group !== currentGroup) {\n          currentGroup = stream.group;\n          content += `${currentGroup},#genre#\\n`;\n        }\n        content += `${stream.name},${stream.urls.join('#')}\\n`;\n      });\n      return content.trim();\n    },\n    generateM3uContent() {\n      let content = '#EXTM3U\\n';\n      let currentGroup = '';\n\n      // 对每个分组内的直播源按响应速度排序\n      const sortedStreams = [...this.mergedStreams].sort((a, b) => {\n        if (a.group !== b.group) return 0; // 不同分组不改变顺序\n        const aTime = Number(a.responseTime) || Infinity;\n        const bTime = Number(b.responseTime) || Infinity;\n        return aTime - bTime;\n      });\n      sortedStreams.forEach(stream => {\n        if (stream.group !== currentGroup) {\n          currentGroup = stream.group;\n          content += `\\n#EXTINF:-1 group-title=\"${currentGroup}\"\\n`;\n        }\n        stream.urls.forEach(url => {\n          content += `#EXTINF:-1,${stream.name}\\n${url}\\n`;\n        });\n      });\n      return content.trim();\n    },\n    copyGeneratedLink() {\n      const textarea = document.createElement('textarea');\n      textarea.value = this.generatedLink;\n      document.body.appendChild(textarea);\n      textarea.select();\n      try {\n        document.execCommand('copy');\n        this.$message.success('链接已复制到剪贴板');\n      } catch (err) {\n        this.$message.error('复制失败');\n      } finally {\n        document.body.removeChild(textarea);\n      }\n    },\n    downloadTxtFile() {\n      const blob = new Blob([this.generatedLink], {\n        type: 'text/plain;charset=utf-8'\n      });\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `直播源列表_${new Date().toLocaleDateString()}.txt`;\n      document.body.appendChild(link);\n      link.click();\n\n      // 清理\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(link);\n      this.$message.success('文件下载成功');\n    },\n    // 修改更新链接内容的方法\n    async updateLinkContent() {\n      try {\n        // 更新 TXT 格式内容\n        await fetch(`${this.getBaseUrl()}/api/update-content`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain',\n            'X-File-Format': 'txt'\n          },\n          body: this.generateContent('txt')\n        });\n\n        // 更新 M3U 格式内容\n        await fetch(`${this.getBaseUrl()}/api/update-content`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain',\n            'X-File-Format': 'm3u'\n          },\n          body: this.generateContent('m3u')\n        });\n      } catch (error) {\n        console.error('更新链接内容失败：', error);\n      }\n    },\n    handleScheduleCheck() {\n      if (this.isScheduled) {\n        this.stopScheduleCheck();\n      } else {\n        this.scheduleDialogVisible = true;\n      }\n    },\n    startScheduleCheck() {\n      this.$refs.scheduleForm.validate(valid => {\n        if (valid) {\n          this.scheduleDialogVisible = false;\n          this.isScheduled = true;\n          this.setupSchedule();\n          this.saveState(); // 保存状态\n          this.$message.success('定时检测已开启');\n        }\n      });\n    },\n    stopScheduleCheck() {\n      if (this.scheduleTimer) {\n        clearInterval(this.scheduleTimer);\n        this.scheduleTimer = null;\n      }\n      this.isScheduled = false;\n      this.nextScheduleTime = null;\n      this.saveState(); // 保存状态\n      this.$message.success('定时检测已停止');\n    },\n    setupSchedule() {\n      // 清除现有定时器\n      if (this.scheduleTimer) {\n        clearInterval(this.scheduleTimer);\n      }\n      const calculateNextExecutionTime = () => {\n        const now = new Date();\n        const [hours, minutes] = this.scheduleForm.executeTime.split(':').map(Number);\n        let nextTime = new Date(now);\n        nextTime.setHours(hours, minutes, 0, 0);\n\n        // 如果当前时间已经过了今天的执行时间，设置为明天\n        if (nextTime <= now) {\n          nextTime.setDate(nextTime.getDate() + 1);\n        }\n\n        // 如果是每周模式，调整到下一个符合条件的星期\n        if (this.scheduleForm.scheduleType === 'weekly') {\n          const targetDay = parseInt(this.scheduleForm.weekDay);\n          while (nextTime.getDay() !== targetDay) {\n            nextTime.setDate(nextTime.getDate() + 1);\n          }\n        }\n        return nextTime;\n      };\n      const scheduleNextExecution = () => {\n        const nextTime = calculateNextExecutionTime();\n        const delay = nextTime.getTime() - new Date().getTime();\n\n        // 更新下次执行时间显示\n        this.nextScheduleTime = nextTime;\n\n        // 设置下次执行的定时器\n        this.scheduleTimer = setTimeout(() => {\n          // 如果当前正在检测中，等待检测完成后再执行\n          if (!this.isChecking) {\n            this.handleBatchCheck();\n          }\n          // 设置下一次执行\n          scheduleNextExecution();\n        }, delay);\n      };\n\n      // 开始第一次调度\n      scheduleNextExecution();\n    },\n    // 保存当前状态到本地存储\n    saveState() {\n      try {\n        // 清除旧的分块数据\n        this.clearStorageData();\n\n        // 只保存必要的数据字段，减少数据量\n        const minimalStreamList = this.streamList.map(stream => ({\n          name: stream.name,\n          url: stream.url,\n          group: stream.group,\n          status: stream.status,\n          resolution: stream.resolution || '',\n          responseTime: stream.responseTime || 0\n        }));\n\n        // 将streamList分块存储，减小分块大小\n        const streamListStr = JSON.stringify(minimalStreamList);\n        const chunkSize = 100000; // 减小到100KB\n        const chunks = Math.ceil(streamListStr.length / chunkSize);\n\n        // 如果数据量太大，只保存基本信息\n        if (chunks > 10) {\n          console.warn('数据量过大，只保存基本状态信息');\n          const basicState = {\n            currentPage: this.currentPage,\n            pageSize: this.pageSize,\n            scheduleForm: this.scheduleForm,\n            collectForm: this.collectForm\n          };\n          localStorage.setItem(this.stateKey, JSON.stringify(basicState));\n          return;\n        }\n\n        // 分块存储\n        for (let i = 0; i < chunks; i++) {\n          const chunk = streamListStr.slice(i * chunkSize, (i + 1) * chunkSize);\n          try {\n            localStorage.setItem(`${this.stateKey}_streamList_${i}`, chunk);\n          } catch (e) {\n            console.error('存储分块失败:', e);\n            this.clearStorageData();\n            // 尝试只保存基本信息\n            const basicState = {\n              currentPage: this.currentPage,\n              pageSize: this.pageSize,\n              scheduleForm: this.scheduleForm,\n              collectForm: this.collectForm\n            };\n            localStorage.setItem(this.stateKey, JSON.stringify(basicState));\n            return;\n          }\n        }\n\n        // 存储其他状态数据\n        const state = {\n          currentPage: this.currentPage,\n          pageSize: this.pageSize,\n          scheduleForm: this.scheduleForm,\n          collectForm: this.collectForm,\n          streamListChunks: chunks\n        };\n        localStorage.setItem(this.stateKey, JSON.stringify(state));\n      } catch (error) {\n        console.error('保存状态失败:', error);\n        this.clearStorageData();\n        // 尝试只保存基本信息\n        try {\n          const basicState = {\n            currentPage: this.currentPage,\n            pageSize: this.pageSize\n          };\n          localStorage.setItem(this.stateKey, JSON.stringify(basicState));\n        } catch (e) {\n          console.error('保存基本状态也失败:', e);\n        }\n      }\n    },\n    // 从本地存储恢复状态\n    restoreState() {\n      try {\n        const savedState = localStorage.getItem(this.stateKey);\n        if (savedState) {\n          const state = JSON.parse(savedState);\n\n          // 恢复streamList\n          if (state.streamListChunks) {\n            try {\n              let streamListStr = '';\n              for (let i = 0; i < state.streamListChunks; i++) {\n                const chunk = localStorage.getItem(`${this.stateKey}_streamList_${i}`);\n                if (chunk) {\n                  streamListStr += chunk;\n                }\n              }\n              if (streamListStr) {\n                this.streamList = JSON.parse(streamListStr);\n              }\n            } catch (e) {\n              console.error('恢复streamList失败:', e);\n              this.streamList = [];\n            }\n          }\n\n          // 恢复其他状态\n          this.currentPage = state.currentPage || 1;\n          this.pageSize = state.pageSize || 5;\n          if (state.scheduleForm) this.scheduleForm = state.scheduleForm;\n          if (state.collectForm) this.collectForm = state.collectForm;\n        }\n\n        // 重置所有运行状态\n        this.isChecking = false;\n        this.isPaused = false;\n        this.isScheduled = false;\n        this.isCollecting = false;\n        this.checkedCount = 0;\n        this.totalCount = 0;\n        this.pausedIndex = -1;\n        this.nextScheduleTime = null;\n      } catch (error) {\n        console.error('恢复状态失败:', error);\n        this.clearStorageData();\n        this.streamList = [];\n      }\n    },\n    // 清理存储数据\n    clearStorageData() {\n      try {\n        localStorage.removeItem(this.stateKey);\n        for (let i = 0;; i++) {\n          const key = `${this.stateKey}_streamList_${i}`;\n          if (localStorage.getItem(key) === null) {\n            break;\n          }\n          localStorage.removeItem(key);\n        }\n      } catch (error) {\n        console.error('清理存储数据失败:', error);\n      }\n    },\n    // 添加重置所有运行状态的方法\n    resetAllStates() {\n      // 停止定时检测\n      if (this.isScheduled) {\n        this.stopScheduleCheck();\n      }\n\n      // 停止采集\n      if (this.isCollecting) {\n        this.stopCollecting();\n      }\n\n      // 停止批量检测\n      if (this.isChecking) {\n        this.shouldStop = true;\n        this.isChecking = false;\n        this.isPaused = false;\n      }\n\n      // 重置所有状态\n      this.isChecking = false;\n      this.isPaused = false;\n      this.isScheduled = false;\n      this.isCollecting = false;\n      this.checkedCount = 0;\n      this.totalCount = 0;\n      this.pausedIndex = -1;\n      this.nextScheduleTime = null;\n\n      // 清除所有定时器\n      if (this.scheduleTimer) {\n        clearInterval(this.scheduleTimer);\n        this.scheduleTimer = null;\n      }\n      if (this.collectTimer) {\n        clearInterval(this.collectTimer);\n        this.collectTimer = null;\n      }\n\n      // 保存重置后的状态\n      this.saveState();\n      this.$message.success('所有运行状态已重置');\n    },\n    // 更新活动状态\n    updateActiveStatus() {\n      const hasActive = this.isChecking || this.isCollecting || this.isScheduled;\n      if (this.hasActiveOperations !== hasActive) {\n        this.hasActiveOperations = hasActive;\n        if (hasActive) {\n          // 添加刷新拦截\n          window.addEventListener('beforeunload', this.handleBeforeUnload);\n        } else {\n          // 移除刷新拦截\n          window.removeEventListener('beforeunload', this.handleBeforeUnload);\n        }\n      }\n    },\n    // 处理页面刷新\n    handleBeforeUnload(e) {\n      if (this.hasActiveOperations) {\n        const message = '有正在执行的操作，确定要离开吗？';\n        e.preventDefault();\n        e.returnValue = message;\n        return message;\n      }\n    },\n    addCollectUrl() {\n      if (!Array.isArray(this.collectForm.urls)) {\n        // 如果 urls 不是数组，先初始化它\n        this.$set(this.collectForm, 'urls', ['']);\n      } else {\n        this.collectForm.urls.push('');\n      }\n    },\n    removeCollectUrl(index) {\n      if (Array.isArray(this.collectForm.urls) && this.collectForm.urls.length > 1) {\n        this.collectForm.urls.splice(index, 1);\n      }\n    },\n    // 添加判断分辨率标签类型的方法\n    getResolutionTagType(resolution) {\n      if (!resolution || resolution === '-') return 'info';\n      if (resolution === '多播源') return 'warning'; // 为多播源添加特殊样式\n      const [width] = resolution.split('x').map(Number);\n      if (width >= 1920) return 'success';\n      if (width >= 1280) return ''; // 默认类型\n      return 'warning';\n    },\n    // 添加判断响应时间标签类型的方法\n    getResponseTimeTagType(responseTime) {\n      if (!responseTime || responseTime === '-') return 'info';\n      const time = Number(responseTime);\n      if (time <= 1000) return 'success';\n      if (time <= 2000) return ''; // 默认类型\n      if (time <= 3000) return 'warning';\n      return 'danger';\n    },\n    setupCollectSchedule() {\n      // 清除现有定时器\n      if (this.collectTimer) {\n        clearInterval(this.collectTimer);\n      }\n      const calculateNextCollectTime = () => {\n        const now = new Date();\n        const [hours, minutes] = this.collectForm.executeTime.split(':').map(Number);\n        let nextTime = new Date(now);\n        nextTime.setHours(hours, minutes, 0, 0);\n\n        // 如果当前时间已经过了今天的执行时间，设置为明天\n        if (nextTime <= now) {\n          nextTime.setDate(nextTime.getDate() + 1);\n        }\n\n        // 如果是每周模式，调整到下一个符合条件的星期\n        if (this.collectForm.collectType === 'weekly') {\n          const targetDay = parseInt(this.collectForm.weekDay);\n          while (nextTime.getDay() !== targetDay) {\n            nextTime.setDate(nextTime.getDate() + 1);\n          }\n        }\n        return nextTime;\n      };\n      const scheduleNextCollection = () => {\n        const nextTime = calculateNextCollectTime();\n        const delay = nextTime.getTime() - new Date().getTime();\n\n        // 设置下次执行的定时器\n        this.collectTimer = setTimeout(() => {\n          // 执行采集\n          this.collect();\n          // 设置下一次执行\n          scheduleNextCollection();\n        }, delay);\n      };\n\n      // 开始第一次调度\n      scheduleNextCollection();\n    },\n    handleSearch() {\n      this.filteredList = this.streamList.filter(item => {\n        const nameMatch = !this.searchForm.name || item.name.toLowerCase().includes(this.searchForm.name.toLowerCase());\n        const groupMatch = !this.searchForm.group || item.group === this.searchForm.group;\n        const statusMatch = !this.searchForm.status || item.status === this.searchForm.status;\n        return nameMatch && groupMatch && statusMatch;\n      });\n\n      // 重置到第一页\n      this.currentPage = 1;\n      this.searchDialogVisible = false;\n    },\n    resetSearch() {\n      this.searchForm = {\n        name: '',\n        group: '',\n        status: ''\n      };\n      this.filteredList = [];\n      this.currentPage = 1;\n    },\n    // 获取真实IP地址\n    async getRealIp() {\n      try {\n        const response = await fetch(`${this.getBaseUrl()}/api/local-ip`);\n        if (response.ok) {\n          const data = await response.json();\n          this.realIp = data.ip;\n          localStorage.setItem('realIp', data.ip); // 保存真实IP到localStorage\n        }\n      } catch (error) {\n        console.error('获取IP失败:', error);\n      }\n    },\n    // 获取基础URL\n    getBaseUrl() {\n      const useRealIp = localStorage.getItem('useRealIp') === 'true';\n      return useRealIp && this.realIp ? `http://${this.realIp}:8080` : 'http://localhost:8080';\n    },\n    async saveGithubSettings() {\n      try {\n        await this.$refs.syncForm.validate();\n\n        // 保存设置到localStorage\n        localStorage.setItem('githubToken', this.syncForm.token);\n        localStorage.setItem('githubRepo', this.syncForm.repo);\n        localStorage.setItem('githubTxtPath', this.syncForm.txtPath);\n        localStorage.setItem('githubM3uPath', this.syncForm.m3uPath);\n        localStorage.setItem('githubAutoSync', this.syncForm.autoSync);\n        localStorage.setItem('githubSyncType', this.syncForm.syncType);\n        localStorage.setItem('githubExecuteTime', this.syncForm.executeTime);\n        localStorage.setItem('githubWeekDay', this.syncForm.weekDay);\n\n        // 如果开启了自动同步，重新设置定时器\n        if (this.syncForm.autoSync) {\n          this.setupSyncSchedule();\n        } else {\n          this.clearSyncSchedule();\n        }\n        this.$message.success('设置已保存');\n        this.syncDialogVisible = false;\n      } catch (error) {\n        this.$message.error(error.message || '保存失败');\n      }\n    },\n    async syncToGithub(content, path) {\n      const response = await fetch(`${this.getBaseUrl()}/api/sync-github`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          token: this.syncForm.token,\n          repo: this.syncForm.repo,\n          path: path,\n          content: content,\n          message: this.syncForm.message\n        })\n      });\n      if (!response.ok) {\n        throw new Error('同步失败');\n      }\n    },\n    handleAutoSyncChange(value) {\n      if (value) {\n        this.setupSyncSchedule();\n      } else {\n        this.clearSyncSchedule();\n      }\n    },\n    setupSyncSchedule() {\n      this.clearSyncSchedule();\n      const calculateNextSyncTime = () => {\n        const now = new Date();\n        const [hours, minutes] = this.syncForm.executeTime.split(':').map(Number);\n        let nextTime = new Date(now);\n        nextTime.setHours(hours, minutes, 0, 0);\n\n        // 如果当前时间已经过了今天的执行时间，设置为明天\n        if (nextTime <= now) {\n          nextTime.setDate(nextTime.getDate() + 1);\n        }\n\n        // 如果是每周模式，调整到下一个符合条件的星期\n        if (this.syncForm.syncType === 'weekly') {\n          const targetDay = parseInt(this.syncForm.weekDay);\n          while (nextTime.getDay() !== targetDay) {\n            nextTime.setDate(nextTime.getDate() + 1);\n          }\n        }\n        return nextTime;\n      };\n      const scheduleNextSync = () => {\n        const nextTime = calculateNextSyncTime();\n        const delay = nextTime.getTime() - new Date().getTime();\n\n        // 设置下次执行的定时器\n        this.syncTimer = setTimeout(async () => {\n          try {\n            // 执行同步\n            await this.syncToGithub(this.generateContent('txt'), this.syncForm.txtPath);\n            await this.syncToGithub(this.generateContent('m3u'), this.syncForm.m3uPath);\n            this.$message.success('已同步到GitHub');\n          } catch (error) {\n            this.$message.error('同步失败：' + error.message);\n          }\n          // 设置下一次执行\n          scheduleNextSync();\n        }, delay);\n      };\n\n      // 开始第一次调度\n      scheduleNextSync();\n    },\n    clearSyncSchedule() {\n      if (this.syncTimer) {\n        clearInterval(this.syncTimer);\n        this.syncTimer = null;\n      }\n    },\n    getStatusTagType(status) {\n      switch (status) {\n        case '正常':\n          return 'success';\n        case '异常':\n          return 'danger';\n        case '未知':\n          return 'warning';\n        case '未检测':\n          return 'info';\n        default:\n          return 'info';\n      }\n    },\n    // 修改显示消息的方法\n    showMessage(content) {\n      // 如果是清除直播源的消息，使用新的消息系统\n      if (content.includes('已自动清除直播源') || content.includes('(')) {\n        const id = this.messageId++;\n        const message = {\n          id,\n          content: content.includes('(') ? content : content.replace('已自动清除直播源：', '')\n        };\n        this.messages.push(message);\n\n        // 3秒后自动移除消息\n        setTimeout(() => {\n          this.removeMessage(id);\n        }, 3000);\n\n        // 最多显示3条消息\n        if (this.messages.length > 3) {\n          this.messages.shift();\n        }\n      } else {\n        // 其他消息使用 Element UI 的消息提示\n        this.$message.info(content);\n      }\n    },\n    // 移除消息\n    removeMessage(id) {\n      const index = this.messages.findIndex(msg => msg.id === id);\n      if (index !== -1) {\n        this.messages.splice(index, 1);\n      }\n    },\n    // 修改清除直播源的提示\n    handleStreamRemoval(stream, reason) {\n      this.showMessage(`${stream.name} (${reason})`);\n    },\n    async checkUrlAccessibility() {\n      if (!this.importUrlForm.url) return;\n      this.importUrlForm.isChecking = true;\n      this.importUrlForm.isAccessible = null;\n      try {\n        // 添加延迟，避免频繁请求\n        await new Promise(resolve => setTimeout(resolve, 500));\n        const baseUrl = process.env.VUE_APP_API_URL || ''; // 从环境变量获取API基础URL\n        const response = await fetch(`${baseUrl}/api/check-url`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            url: this.importUrlForm.url\n          })\n        });\n        if (!response.ok) throw new Error('请求失败');\n        const result = await response.json();\n        this.importUrlForm.isAccessible = result.accessible;\n      } catch (error) {\n        console.error('检查链接可达性失败:', error);\n        this.importUrlForm.isAccessible = false;\n      } finally {\n        this.importUrlForm.isChecking = false;\n      }\n    },\n    async handleImportUrl() {\n      if (!this.importUrlForm.url) {\n        this.$message.warning('请输入文件链接');\n        return;\n      }\n      try {\n        // 显示加载状态\n        this.importUrlForm.isChecking = true;\n\n        // 获取文件内容\n        const response = await fetch(this.importUrlForm.url);\n        if (!response.ok) throw new Error('获取文件失败');\n        const content = await response.text();\n        const newStreams = this.parseContent(content);\n        if (newStreams.length > 0) {\n          // 过滤重复的直播源\n          const existingUrls = new Set(this.streamList.map(s => s.url));\n          const uniqueStreams = newStreams.filter(s => !existingUrls.has(s.url));\n          if (uniqueStreams.length > 0) {\n            this.streamList.push(...uniqueStreams);\n            this.$message.success(`成功导入 ${uniqueStreams.length} 个直播源`);\n\n            // 导入后立即检查多播源\n            this.$nextTick(() => {\n              this.checkMulticastStreams();\n            });\n\n            // 关闭对话框\n            this.importUrlDialogVisible = false;\n          } else {\n            this.$message.info('没有新的直播源可以导入');\n          }\n        } else {\n          this.$message.warning('未找到有效的直播源');\n        }\n      } catch (error) {\n        console.error('导入网络文件失败:', error);\n        this.$message.error('导入失败：' + error.message);\n      } finally {\n        this.importUrlForm.isChecking = false;\n      }\n    },\n    getPlaceholderText() {\n      switch (this.collectForm.mode) {\n        case 'tv':\n          return '请输入包含央视或卫视频道的网络地址';\n        default:\n          return '请输入需要采集的网络地址';\n      }\n    },\n    async handleCollectUrlsFileUpload(event) {\n      const file = event.target.files[0];\n      if (!file) return;\n      try {\n        const content = await this.readFile(file);\n        // 按行分割并过滤空行\n        const urls = content.split('\\n').map(line => line.trim()).filter(line => line && line.length > 0);\n        if (urls.length === 0) {\n          this.$message.warning('文件中未找到有效的URL地址');\n          return;\n        }\n\n        // 验证URL格式\n        const invalidUrls = urls.filter(url => !/^https?:\\/\\/.+/.test(url));\n        if (invalidUrls.length > 0) {\n          this.$message.warning(`发现 ${invalidUrls.length} 个无效的URL地址`);\n          return;\n        }\n\n        // 更新采集地址列表\n        this.collectForm.urls = urls;\n        this.$message.success(`成功导入 ${urls.length} 个采集地址`);\n      } catch (error) {\n        this.$message.error('读取文件失败：' + error.message);\n      } finally {\n        // 清除文件输入，允许重复选择同一文件\n        event.target.value = '';\n      }\n    }\n  },\n  watch: {\n    // 只监听数据变化\n    streamList: {\n      handler() {\n        this.updateLinkContent();\n        this.saveState();\n      },\n      deep: true\n    },\n    currentPage() {\n      this.saveState();\n    },\n    pageSize() {\n      this.saveState();\n    },\n    // 监听所有可能的运行状态\n    isChecking() {\n      this.updateActiveStatus();\n    },\n    isCollecting() {\n      this.updateActiveStatus();\n    },\n    isScheduled() {\n      this.updateActiveStatus();\n    },\n    // 添加格式变化监听\n    'linkForm.format'() {\n      if (this.generateLinkDialogVisible) {\n        this.handleGenerateLink();\n      }\n    }\n  },\n  // 组件被激活时（重新显示）\n  activated() {\n    // 如果有定时任务，恢复定时器\n    if (this.isScheduled) {\n      this.setupSchedule();\n    }\n    // 如果有采集任务，且不是从其他页面切换回来，才恢复采集\n    if (this.isCollecting && !this.isPageSwitching) {\n      this.startCollecting(true);\n    }\n    // 如果有GitHub自动同步，恢复同步定时器\n    if (this.syncForm.autoSync) {\n      this.setupSyncSchedule();\n    }\n    // 重置页面切换标志\n    this.isPageSwitching = false;\n  },\n  // 组件被停用时（离开但不销毁）\n  deactivated() {\n    // 设置页面切换标志\n    this.isPageSwitching = true;\n    // 暂停定时器，但保持状态标志\n    if (this.scheduleTimer) {\n      clearInterval(this.scheduleTimer);\n      this.scheduleTimer = null;\n    }\n    // 暂停采集定时器，但保持状态标志\n    if (this.collectTimer) {\n      clearInterval(this.collectTimer);\n      this.collectTimer = null;\n    }\n    // 暂停同步定时器，但保持状态标志\n    if (this.syncTimer) {\n      clearInterval(this.syncTimer);\n      this.syncTimer = null;\n    }\n  }\n};","map":{"version":3,"names":["name","data","loading","streamList","importUrlDialogVisible","importUrlForm","url","isChecking","isAccessible","importRules","required","message","trigger","type","group","currentPage","pageSize","isPaused","checkedCount","totalCount","pausedIndex","shouldStop","isCollecting","collectDialogVisible","collectForm","urls","autoCollect","collectType","executeTime","weekDay","mode","collectRules","validator","rule","value","callback","length","Error","errors","map","test","filter","error","collectTimer","generateLinkDialogVisible","generatedLink","previewContent","currentLinkId","scheduleDialogVisible","isScheduled","scheduleForm","scheduleType","scheduleRules","scheduleTimer","nextScheduleTime","stateKey","hasActiveOperations","linkForm","format","searchDialogVisible","searchForm","status","filteredList","realIp","syncDialogVisible","syncForm","token","localStorage","getItem","repo","txtPath","m3uPath","autoSync","syncType","syncRules","pattern","syncTimer","messages","messageId","isPageSwitching","STANDARD_GROUPS","CCTV","SATELLITE","computed","paginatedData","start","end","slice","checkButtonText","mergedStreams","streamMap","Map","forEach","stream","key","has","existing","get","includes","push","set","Array","from","values","groupOptions","Set","item","created","savedList","JSON","parse","$nextTick","checkMulticastStreams","$root","$on","saveStreamList","handleSettingsUpdate","restoreState","setupSchedule","startCollecting","setupSyncSchedule","getRealIp","beforeDestroy","$off","clearInterval","stopScheduleCheck","saveState","window","removeEventListener","handleBeforeUnload","methods","event","console","log","settings","isMulticastStream","patterns","lowerUrl","toLowerCase","isMulticast","some","appSettings","e","autoRemoveMulticast","removedCount","toRemove","index","i","splice","handleStreamRemoval","$message","warning","checkStream","ffprobePath","response","fetch","getBaseUrl","method","headers","body","stringify","ok","result","json","available","resolution","responseTime","shouldRemoveStream","reason","listIndex","indexOf","currentPageItems","pageIndex","autoRemoveInvalid","extremeMode","strictMode","autoRemoveLowRes","width","height","split","Number","autoRemoveSlowResponse","handleBatchCheck","uncheckedStreams","s","info","concurrentChecks","parseInt","startIndex","batchSize","Math","min","batch","Promise","all","success","syncToGithub","generateContent","pauseCheck","resumeCheck","batchCheck","handleCheck","row","handleDelete","$confirm","confirmButtonText","cancelButtonText","then","maxPage","ceil","max","catch","handleUrlImport","valid","$refs","importForm","validate","content","text","newStreams","parseContent","existingUrls","uniqueStreams","readFile","file","resolve","reject","reader","FileReader","onload","target","onerror","readAsText","lines","streams","currentGroup","currentName","currentGroupTitle","line","trim","startsWith","tvgNameMatch","match","lastCommaIndex","lastIndexOf","substring","tvgIdMatch","tvgIdNoQuoteMatch","groupMatch","groupNoQuoteMatch","endsWith","replace","urlList","addStreamsToList","existingStreams","add","handleSizeChange","val","handleCurrentChange","handleFileUpload","files","getGroupFromFileName","filename","handleClearList","updateLinkContent","handleCopy","textarea","document","createElement","appendChild","select","execCommand","err","removeChild","setItem","handleCollectMode","stopCollecting","isRestore","isArray","$set","collect","setupCollectSchedule","results","allSettled","encodeURIComponent","filteredStreams","isCCTV","cctvNumber","extractCCTVNumber","isSatellite","allNewStreams","flatMap","self","findIndex","modeText","failedUrls","nameMap","cctvMatch","number","plus","normalizedName","Object","entries","cleanName","handleGenerateLink","txtResponse","m3uResponse","txtLink","m3uLink","generatedLinks","txt","m3u","generateTxtContent","generateM3uContent","sortedStreams","sort","a","b","aTime","Infinity","bTime","join","copyGeneratedLink","downloadTxtFile","blob","Blob","URL","createObjectURL","link","href","download","Date","toLocaleDateString","click","revokeObjectURL","handleScheduleCheck","startScheduleCheck","calculateNextExecutionTime","now","hours","minutes","nextTime","setHours","setDate","getDate","targetDay","getDay","scheduleNextExecution","delay","getTime","setTimeout","clearStorageData","minimalStreamList","streamListStr","chunkSize","chunks","warn","basicState","chunk","state","streamListChunks","savedState","removeItem","resetAllStates","updateActiveStatus","hasActive","addEventListener","preventDefault","returnValue","addCollectUrl","removeCollectUrl","getResolutionTagType","getResponseTimeTagType","time","calculateNextCollectTime","scheduleNextCollection","handleSearch","nameMatch","statusMatch","resetSearch","ip","useRealIp","saveGithubSettings","clearSyncSchedule","path","handleAutoSyncChange","calculateNextSyncTime","scheduleNextSync","getStatusTagType","showMessage","id","removeMessage","shift","msg","checkUrlAccessibility","baseUrl","process","env","VUE_APP_API_URL","accessible","handleImportUrl","getPlaceholderText","handleCollectUrlsFileUpload","invalidUrls","watch","handler","deep","linkForm.format","activated","deactivated"],"sources":["src/components/StreamCheck.vue"],"sourcesContent":["<template>\n  <div class=\"stream-check\">\n    <!-- 修改消息面板位置和样式 -->\n    <div class=\"message-panel\" :class=\"{ 'has-messages': messages.length > 0 }\">\n      <transition-group name=\"message-list\">\n        <div v-for=\"msg in messages\" :key=\"msg.id\" class=\"message-item\">\n          <i class=\"el-icon-delete\"></i>\n          <span class=\"message-content\">{{ msg.content }}</span>\n        </div>\n      </transition-group>\n    </div>\n\n    <div class=\"table-operations\">\n      <div class=\"button-groups\">\n        <div class=\"button-group\">\n          <el-button-group>\n            <el-button\n                type=\"primary\"\n                icon=\"el-icon-upload2\"\n                @click=\"$refs.fileInput.click()\"\n                :disabled=\"isCollecting\">\n              导入本地文件\n            </el-button>\n            <el-button\n                type=\"primary\"\n                icon=\"el-icon-download\"\n                @click=\"importUrlDialogVisible = true\"\n                :disabled=\"isCollecting\">\n              导入网络文件\n            </el-button>\n          </el-button-group>\n        </div>\n\n        <div class=\"button-group\">\n          <el-button-group>\n            <el-button\n                type=\"success\"\n                icon=\"el-icon-refresh\"\n                @click=\"handleBatchCheck\"\n                :loading=\"isChecking\">\n              {{ checkButtonText }}\n            </el-button>\n            <el-button\n                v-if=\"isChecking\"\n                type=\"warning\"\n                icon=\"el-icon-video-pause\"\n                @click=\"pauseCheck\">\n              暂停检测\n            </el-button>\n            <el-button\n                v-if=\"isPaused\"\n                type=\"primary\"\n                icon=\"el-icon-video-play\"\n                @click=\"resumeCheck\">\n              继续检测\n            </el-button>\n            <el-button\n                type=\"danger\"\n                icon=\"el-icon-delete\"\n                @click=\"handleClearList\">\n              清空列表\n            </el-button>\n          </el-button-group>\n        </div>\n\n        <div class=\"button-group\">\n          <el-button-group>\n            <el-button\n                :type=\"isCollecting ? 'danger' : 'primary'\"\n                icon=\"el-icon-connection\"\n                @click=\"handleCollectMode\">\n              {{ isCollecting ? '停止采集' : '采集模式' }}\n            </el-button>\n          </el-button-group>\n        </div>\n\n        <div class=\"button-group\">\n          <el-button-group>\n            <el-button\n                type=\"primary\"\n                icon=\"el-icon-link\"\n                @click=\"handleGenerateLink\">\n              生成链接\n            </el-button>\n            <el-button\n                type=\"success\"\n                icon=\"el-icon-upload\"\n                @click=\"syncDialogVisible = true\">\n              同步到GitHub\n            </el-button>\n          </el-button-group>\n        </div>\n\n        <div class=\"button-group\">\n          <el-button-group>\n            <el-button\n                :type=\"isScheduled ? 'danger' : 'primary'\"\n                icon=\"el-icon-timer\"\n                @click=\"handleScheduleCheck\">\n              {{ isScheduled ? '停止定时' : '定时检测' }}\n            </el-button>\n          </el-button-group>\n        </div>\n\n        <div class=\"button-group\">\n          <el-button-group>\n            <el-button\n                :type=\"filteredList.length > 0 ? 'danger' : 'primary'\"\n                icon=\"el-icon-search\"\n                @click=\"filteredList.length > 0 ? resetSearch() : searchDialogVisible = true\">\n              {{ filteredList.length > 0 ? '重置' : '搜索' }}\n            </el-button>\n          </el-button-group>\n        </div>\n      </div>\n\n      <!-- 隐藏的文件输入框 -->\n      <input\n          type=\"file\"\n          ref=\"fileInput\"\n          style=\"display: none\"\n          accept=\".txt,.m3u,.m3u8\"\n          @change=\"handleFileUpload\"\n      >\n    </div>\n\n    <div class=\"el-table-wrapper\">\n      <el-table\n          :data=\"paginatedData\"\n          border\n          style=\"width: 100%\">\n        <el-table-column\n            prop=\"name\"\n            label=\"名称\"\n            min-width=\"120\"\n            align=\"center\">\n        </el-table-column>\n\n        <el-table-column\n            prop=\"url\"\n            label=\"链接\"\n            min-width=\"200\"\n            align=\"center\"\n            show-overflow-tooltip>\n        </el-table-column>\n\n        <el-table-column\n            prop=\"resolution\"\n            label=\"分辨率\"\n            width=\"120\"\n            align=\"center\">\n          <template slot-scope=\"scope\">\n            <el-tag\n                :type=\"getResolutionTagType(scope.row.resolution)\">\n              {{ scope.row.resolution || '未知' }}\n            </el-tag>\n          </template>\n        </el-table-column>\n\n        <el-table-column\n            prop=\"responseTime\"\n            label=\"响应速度\"\n            width=\"120\"\n            align=\"center\">\n          <template slot-scope=\"scope\">\n            <el-tag\n                :type=\"getResponseTimeTagType(scope.row.responseTime)\">\n              {{ scope.row.responseTime === '-' ? '-' : scope.row.responseTime + 'ms' }}\n            </el-tag>\n          </template>\n        </el-table-column>\n\n        <el-table-column\n            prop=\"group\"\n            label=\"分组\"\n            width=\"120\"\n            align=\"center\">\n          <template slot-scope=\"scope\">\n            <el-tag\n                type=\"info\">\n              {{ scope.row.group }}\n            </el-tag>\n          </template>\n        </el-table-column>\n\n        <el-table-column\n            prop=\"status\"\n            label=\"状态\"\n            width=\"100\"\n            align=\"center\">\n          <template slot-scope=\"scope\">\n            <el-tag :type=\"getStatusTagType(scope.row.status)\">\n              {{ scope.row.status }}\n            </el-tag>\n          </template>\n        </el-table-column>\n\n        <el-table-column\n            label=\"操作\"\n            width=\"120\"\n            align=\"center\"\n            fixed=\"right\">\n          <template slot-scope=\"scope\">\n            <el-tooltip content=\"复制链接\" placement=\"top\">\n              <el-button\n                  type=\"text\"\n                  icon=\"el-icon-document-copy\"\n                  @click=\"handleCopy(scope.row)\">\n              </el-button>\n            </el-tooltip>\n            <el-tooltip content=\"删除\" placement=\"top\">\n              <el-button\n                  type=\"text\"\n                  class=\"delete-btn\"\n                  icon=\"el-icon-delete\"\n                  @click=\"handleDelete(scope.row)\">\n              </el-button>\n            </el-tooltip>\n          </template>\n        </el-table-column>\n      </el-table>\n    </div>\n\n    <!-- 添加分页组件 -->\n    <div class=\"pagination-container\">\n      <el-pagination\n          @size-change=\"handleSizeChange\"\n          @current-change=\"handleCurrentChange\"\n          :current-page=\"currentPage\"\n          :page-sizes=\"[5, 10, 20, 50]\"\n          :page-size=\"pageSize\"\n          layout=\"total, sizes, prev, pager, next, jumper\"\n          :total=\"filteredList.length || streamList.length\">\n      </el-pagination>\n    </div>\n\n    <!-- 添加/编辑对话框 -->\n    <el-dialog\n        title=\"导入网络文件\"\n        :visible.sync=\"importUrlDialogVisible\"\n        width=\"500px\"\n        :close-on-click-modal=\"false\"\n        @closed=\"importUrlForm = { url: '', isChecking: false, isAccessible: null }\">\n      <el-form ref=\"importUrlForm\" label-width=\"80px\">\n        <el-form-item label=\"文件链接\" required>\n          <el-input\n            v-model=\"importUrlForm.url\"\n            placeholder=\"请输入直播源文件链接\"\n            @input=\"checkUrlAccessibility\">\n            <template slot=\"append\">\n              <i v-if=\"importUrlForm.isChecking\" class=\"el-icon-loading\"></i>\n              <i v-else-if=\"importUrlForm.isAccessible === true\" class=\"el-icon-success\" style=\"color: #67C23A\"></i>\n              <i v-else-if=\"importUrlForm.isAccessible === false\" class=\"el-icon-error\" style=\"color: #F56C6C\"></i>\n            </template>\n          </el-input>\n        </el-form-item>\n        <div v-if=\"importUrlForm.isAccessible === false\" style=\"color: #F56C6C; font-size: 12px; margin-bottom: 10px;\">\n          该链接无法访问，请检查链接是否正确\n        </div>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"importUrlDialogVisible = false\">取 消</el-button>\n        <el-button\n          type=\"primary\"\n          @click=\"handleImportUrl\"\n          :loading=\"importUrlForm.isChecking\"\n          :disabled=\"!importUrlForm.url || importUrlForm.isAccessible === false\">\n          确 定\n        </el-button>\n      </div>\n    </el-dialog>\n\n    <!-- 采集模式设置对话框 -->\n    <el-dialog\n        title=\"采集模式设置\"\n        :visible.sync=\"collectDialogVisible\"\n        width=\"500px\">\n      <el-form :model=\"collectForm\" label-width=\"100px\" ref=\"collectForm\" :rules=\"collectRules\">\n        <!-- 采集模式选择 -->\n        <el-form-item label=\"采集模式\">\n          <el-radio-group v-model=\"collectForm.mode\">\n            <el-radio label=\"all\">全部采集</el-radio>\n            <el-radio label=\"tv\">央视卫视专采</el-radio>\n          </el-radio-group>\n        </el-form-item>\n\n        <!-- 采集地址列表 -->\n        <el-form-item\n            v-for=\"(url, index) in collectForm.urls\"\n            :key=\"index\"\n            :label=\"index === 0 ? '采集地址' : ''\"\n            :prop=\"'urls.' + index\">\n          <el-input\n              v-model=\"collectForm.urls[index]\"\n              :placeholder=\"getPlaceholderText()\">\n            <template slot=\"append\">\n              <el-button\n                  icon=\"el-icon-delete\"\n                  @click=\"removeCollectUrl(index)\"\n                  v-if=\"collectForm.urls.length > 1\">\n              </el-button>\n            </template>\n          </el-input>\n        </el-form-item>\n\n        <!-- 添加地址按钮和导入按钮 -->\n        <el-form-item>\n          <div style=\"display: flex; gap: 10px;\">\n            <el-button\n                type=\"text\"\n                icon=\"el-icon-plus\"\n                @click=\"addCollectUrl\">\n              添加采集地址\n            </el-button>\n            <el-button\n                type=\"text\"\n                icon=\"el-icon-upload2\"\n                @click=\"$refs.collectUrlsFileInput.click()\">\n              导入地址文件\n            </el-button>\n            <input\n                type=\"file\"\n                ref=\"collectUrlsFileInput\"\n                style=\"display: none\"\n                accept=\".txt\"\n                @change=\"handleCollectUrlsFileUpload\">\n          </div>\n        </el-form-item>\n\n        <el-form-item label=\"自动采集\">\n          <el-switch v-model=\"collectForm.autoCollect\"></el-switch>\n        </el-form-item>\n\n        <!-- 采集时间设置 -->\n        <template v-if=\"collectForm.autoCollect\">\n          <el-form-item label=\"采集周期\" prop=\"collectType\">\n            <el-radio-group v-model=\"collectForm.collectType\">\n              <el-radio label=\"daily\">每天</el-radio>\n              <el-radio label=\"weekly\">每周</el-radio>\n            </el-radio-group>\n          </el-form-item>\n\n          <el-form-item label=\"执行时间\" prop=\"executeTime\">\n            <el-time-picker\n                v-model=\"collectForm.executeTime\"\n                format=\"HH:mm\"\n                value-format=\"HH:mm\"\n                placeholder=\"选择时间\">\n            </el-time-picker>\n          </el-form-item>\n\n          <el-form-item\n              label=\"执行日期\"\n              prop=\"weekDay\"\n              v-if=\"collectForm.collectType === 'weekly'\">\n            <el-select v-model=\"collectForm.weekDay\">\n              <el-option label=\"星期一\" value=\"1\"></el-option>\n              <el-option label=\"星期二\" value=\"2\"></el-option>\n              <el-option label=\"星期三\" value=\"3\"></el-option>\n              <el-option label=\"星期四\" value=\"4\"></el-option>\n              <el-option label=\"星期五\" value=\"5\"></el-option>\n              <el-option label=\"星期六\" value=\"6\"></el-option>\n              <el-option label=\"星期日\" value=\"0\"></el-option>\n            </el-select>\n          </el-form-item>\n        </template>\n      </el-form>\n      <div slot=\"footer\">\n        <el-button @click=\"collectDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"startCollecting\">开始采集</el-button>\n      </div>\n    </el-dialog>\n\n    <!-- 生成链接对话框 -->\n    <el-dialog\n        title=\"生成链接\"\n        :visible.sync=\"generateLinkDialogVisible\"\n        width=\"500px\"\n        custom-class=\"generate-link-dialog\">\n      <div class=\"link-container\">\n        <!-- 添加格式选择 -->\n        <el-form :model=\"linkForm\" label-width=\"80px\">\n          <el-form-item label=\"文件格式\">\n            <el-radio-group v-model=\"linkForm.format\">\n              <el-radio label=\"txt\">TXT格式</el-radio>\n              <el-radio label=\"m3u\">M3U格式</el-radio>\n            </el-radio-group>\n          </el-form-item>\n        </el-form>\n\n        <!-- 链接展示卡片 -->\n        <el-card class=\"link-card\">\n          <div class=\"link-content\">\n            <el-input\n                v-model=\"generatedLink\"\n                placeholder=\"正在生成链接...\"\n                readonly>\n              <template slot=\"prepend\">链接地址</template>\n              <el-button\n                  slot=\"append\"\n                  icon=\"el-icon-document-copy\"\n                  @click=\"copyGeneratedLink\">\n                复制\n              </el-button>\n            </el-input>\n          </div>\n        </el-card>\n\n        <!-- 使用说明 -->\n        <el-card class=\"tips-card\">\n          <div class=\"tips-content\">\n            <ul>\n              <li>生成的链接可以直接在支持网络导入的播放器中使用</li>\n              <li>链接内容会随列表更新而自动更新</li>\n              <li>TXT格式适用于大多数播放器</li>\n              <li>M3U格式提供更好的播放器兼容性</li>\n            </ul>\n          </div>\n        </el-card>\n      </div>\n    </el-dialog>\n\n    <!-- 添加定时检测设置对话框 -->\n    <el-dialog\n        title=\"定时检测设置\"\n        :visible.sync=\"scheduleDialogVisible\"\n        width=\"500px\">\n      <el-form :model=\"scheduleForm\" label-width=\"100px\" ref=\"scheduleForm\" :rules=\"scheduleRules\">\n        <el-form-item label=\"检测周期\" prop=\"scheduleType\">\n          <el-radio-group v-model=\"scheduleForm.scheduleType\">\n            <el-radio label=\"daily\">每天</el-radio>\n            <el-radio label=\"weekly\">每周</el-radio>\n          </el-radio-group>\n        </el-form-item>\n\n        <el-form-item label=\"执行时间\" prop=\"executeTime\">\n          <el-time-picker\n              v-model=\"scheduleForm.executeTime\"\n              format=\"HH:mm\"\n              value-format=\"HH:mm\"\n              placeholder=\"选择时间\">\n          </el-time-picker>\n        </el-form-item>\n\n        <el-form-item\n            label=\"执行日期\"\n            prop=\"weekDay\"\n            v-if=\"scheduleForm.scheduleType === 'weekly'\">\n          <el-select v-model=\"scheduleForm.weekDay\">\n            <el-option label=\"星期一\" value=\"1\"></el-option>\n            <el-option label=\"星期二\" value=\"2\"></el-option>\n            <el-option label=\"星期三\" value=\"3\"></el-option>\n            <el-option label=\"星期四\" value=\"4\"></el-option>\n            <el-option label=\"星期五\" value=\"5\"></el-option>\n            <el-option label=\"星期六\" value=\"6\"></el-option>\n            <el-option label=\"星期日\" value=\"0\"></el-option>\n          </el-select>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\">\n        <el-button @click=\"scheduleDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"startScheduleCheck\">开始定时</el-button>\n      </div>\n    </el-dialog>\n\n    <!-- 添加搜索对话框 -->\n    <el-dialog\n        title=\"搜索直播源\"\n        :visible.sync=\"searchDialogVisible\"\n        width=\"500px\">\n      <el-form :model=\"searchForm\" label-width=\"80px\">\n        <el-form-item label=\"名称\">\n          <el-input\n              v-model=\"searchForm.name\"\n              placeholder=\"支持模糊搜索\"\n              clearable>\n          </el-input>\n        </el-form-item>\n        <el-form-item label=\"分组\">\n          <el-select\n              v-model=\"searchForm.group\"\n              placeholder=\"请选择\"\n              clearable>\n            <el-option\n                v-for=\"group in groupOptions\"\n                :key=\"group\"\n                :label=\"group\"\n                :value=\"group\">\n            </el-option>\n          </el-select>\n        </el-form-item>\n        <el-form-item label=\"状态\">\n          <el-select\n              v-model=\"searchForm.status\"\n              placeholder=\"请选择\"\n              clearable>\n            <el-option label=\"正常\" value=\"正常\"></el-option>\n            <el-option label=\"异常\" value=\"异常\"></el-option>\n            <el-option label=\"未检测\" value=\"未检测\"></el-option>\n          </el-select>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\">\n        <el-button @click=\"searchDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"handleSearch\">搜 索</el-button>\n      </div>\n    </el-dialog>\n\n    <!-- GitHub同步设置对话框 -->\n    <el-dialog\n        title=\"GitHub同步设置\"\n        :visible.sync=\"syncDialogVisible\"\n        width=\"500px\">\n      <el-form :model=\"syncForm\" ref=\"syncForm\" label-width=\"120px\" :rules=\"syncRules\">\n        <el-form-item label=\"GitHub Token\" prop=\"token\">\n          <el-input\n              v-model=\"syncForm.token\"\n              type=\"password\"\n              placeholder=\"请输入GitHub Personal Access Token\"\n              show-password>\n          </el-input>\n        </el-form-item>\n        \n        <el-form-item label=\"仓库名称\" prop=\"repo\">\n          <el-input\n              v-model=\"syncForm.repo\"\n              placeholder=\"格式：用户名/仓库名\">\n          </el-input>\n        </el-form-item>\n        \n        <el-form-item label=\"TXT文件名\" prop=\"txtPath\">\n          <el-input\n              v-model=\"syncForm.txtPath\"\n              placeholder=\"例如：playlist.txt\">\n          </el-input>\n        </el-form-item>\n        \n        <el-form-item label=\"M3U文件名\" prop=\"m3uPath\">\n          <el-input\n              v-model=\"syncForm.m3uPath\"\n              placeholder=\"例如：playlist.m3u\">\n          </el-input>\n        </el-form-item>\n        \n        <el-form-item label=\"定时同步\">\n          <el-switch\n              v-model=\"syncForm.autoSync\"\n              @change=\"handleAutoSyncChange\">\n          </el-switch>\n        </el-form-item>\n        \n        <template v-if=\"syncForm.autoSync\">\n          <el-form-item label=\"同步周期\" prop=\"syncType\">\n            <el-radio-group v-model=\"syncForm.syncType\">\n              <el-radio label=\"daily\">每天</el-radio>\n              <el-radio label=\"weekly\">每周</el-radio>\n              <el-radio label=\"afterCheck\">批量检测完毕后</el-radio>\n            </el-radio-group>\n          </el-form-item>\n\n          <el-form-item\n              label=\"执行时间\"\n              prop=\"executeTime\"\n              v-if=\"syncForm.syncType !== 'afterCheck'\">\n            <el-time-picker\n                v-model=\"syncForm.executeTime\"\n                format=\"HH:mm\"\n                value-format=\"HH:mm\"\n                placeholder=\"选择时间\">\n            </el-time-picker>\n          </el-form-item>\n\n          <el-form-item\n              label=\"执行日期\"\n              prop=\"weekDay\"\n              v-if=\"syncForm.syncType === 'weekly'\">\n            <el-select v-model=\"syncForm.weekDay\">\n              <el-option label=\"星期一\" value=\"1\"></el-option>\n              <el-option label=\"星期二\" value=\"2\"></el-option>\n              <el-option label=\"星期三\" value=\"3\"></el-option>\n              <el-option label=\"星期四\" value=\"4\"></el-option>\n              <el-option label=\"星期五\" value=\"5\"></el-option>\n              <el-option label=\"星期六\" value=\"6\"></el-option>\n              <el-option label=\"星期日\" value=\"0\"></el-option>\n            </el-select>\n          </el-form-item>\n        </template>\n        \n        <el-form-item label=\"提交信息\" prop=\"message\">\n          <el-input\n              v-model=\"syncForm.message\"\n              placeholder=\"更新说明\">\n          </el-input>\n        </el-form-item>\n      </el-form>\n      \n      <div slot=\"footer\">\n        <el-button @click=\"syncDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"saveGithubSettings\">保 存</el-button>\n      </div>\n    </el-dialog>\n  </div>\n\n</template>\n\n<script>\nexport default {\n  name: 'StreamCheck',\n  data() {\n    return {\n      loading: false,\n      streamList: [],\n      importUrlDialogVisible: false,\n      importUrlForm: {\n        url: '',\n        isChecking: false,\n        isAccessible: null\n      },\n      importRules: {\n        url: [\n          { required: true, message: '请输入URL地址', trigger: 'blur' },\n          { type: 'url', message: '请输入正确的URL地址', trigger: ['blur', 'change'] }\n        ],\n        group: [\n          { required: true, message: '请选择分组', trigger: 'change' }\n        ]\n      },\n      currentPage: 1,\n      pageSize: 5,\n      isChecking: false,\n      isPaused: false,\n      checkedCount: 0,\n      totalCount: 0,\n      pausedIndex: -1,\n      shouldStop: false,\n      isCollecting: false,\n      collectDialogVisible: false,\n      collectForm: {\n        urls: [''],\n        autoCollect: false,\n        collectType: 'daily',\n        executeTime: '09:00',\n        weekDay: '1',\n        mode: 'all'  // 添加采集模式字段\n      },\n      collectRules: {\n        urls: [\n          { \n            type: 'array',\n            validator: (rule, value, callback) => {\n              if (value.length === 0) {\n                callback(new Error('请至少添加一个采集地址'))\n              }\n              // 验证每个URL\n              const errors = value.map(url => {\n                if (!url) return '采集地址不能为空'\n                if (!/^https?:\\/\\/.+/.test(url)) return '请输入正确的URL地址'\n                return null\n              }).filter(error => error !== null)\n              \n              if (errors.length > 0) {\n                callback(new Error(errors[0]))\n              } else {\n                callback()\n              }\n            },\n            trigger: 'change'\n          }\n        ],\n        executeTime: [\n          { required: true, message: '请选择执行时间', trigger: 'change' }\n        ],\n        weekDay: [\n          { required: true, message: '请选择执行日期', trigger: 'change' }\n        ]\n      },\n      collectTimer: null,\n      generateLinkDialogVisible: false,\n      generatedLink: '',\n      previewContent: '',  // 新增预览内容\n      currentLinkId: '',\n      scheduleDialogVisible: false,\n      isScheduled: false,\n      scheduleForm: {\n        scheduleType: 'daily',\n        executeTime: '09:00',\n        weekDay: '1'\n      },\n      scheduleRules: {\n        executeTime: [\n          { required: true, message: '请选择执行时间', trigger: 'change' }\n        ],\n        weekDay: [\n          { required: true, message: '请选择执行日期', trigger: 'change' }\n        ]\n      },\n      scheduleTimer: null,\n      nextScheduleTime: null,\n      stateKey: 'streamCheckState', // 用于本地存储的key\n      hasActiveOperations: false,  // 添加标记表示是否有动作在执行\n      linkForm: {\n        format: 'txt' // 默认txt格式\n      },\n      searchDialogVisible: false,\n      searchForm: {\n        name: '',\n        group: '',\n        status: ''\n      },\n      filteredList: [], // 用于存储搜索过滤后的列表\n      realIp: '',  // 存储真实IP地址\n      syncDialogVisible: false,\n      syncForm: {\n        token: localStorage.getItem('githubToken') || '',\n        repo: localStorage.getItem('githubRepo') || '',\n        txtPath: localStorage.getItem('githubTxtPath') || '',\n        m3uPath: localStorage.getItem('githubM3uPath') || '',\n        autoSync: localStorage.getItem('githubAutoSync') === 'true',\n        syncType: localStorage.getItem('githubSyncType') || 'daily',\n        executeTime: localStorage.getItem('githubExecuteTime') || '00:00',\n        weekDay: localStorage.getItem('githubWeekDay') || '1',\n        message: '更新直播源列表'\n      },\n      syncRules: {\n        token: [\n          { required: true, message: '请输入GitHub Token', trigger: 'blur' }\n        ],\n        repo: [\n          { required: true, message: '请输入仓库名称', trigger: 'blur' },\n          { pattern: /^[\\w-]+\\/[\\w-]+$/, message: '格式：用户名/仓库名', trigger: 'blur' }\n        ],\n        txtPath: [\n          { required: true, message: '请输入文件路径', trigger: 'blur' }\n        ],\n        m3uPath: [\n          { required: true, message: '请输入文件路径', trigger: 'blur' }\n        ],\n        message: [\n          { required: true, message: '请输入提交消息', trigger: 'blur' }\n        ]\n      },\n      syncTimer: null,\n      messages: [], // 用于存储消息\n      messageId: 0, // 用于生成唯一的消息ID\n      isPageSwitching: false, // 添加页面切换标志\n      // 添加标准分组名称常量\n      STANDARD_GROUPS: {\n        CCTV: '央视频道',\n        SATELLITE: '卫视频道'\n      },\n    }\n  },\n  computed: {\n    paginatedData() {\n      // 使用过滤后的列表进行分页\n      const start = (this.currentPage - 1) * this.pageSize\n      const end = start + this.pageSize\n      return (this.filteredList.length > 0 ? this.filteredList : this.streamList).slice(start, end)\n    },\n    checkButtonText() {\n      if (!this.isChecking && !this.isPaused) {\n        return '批量检测'\n      }\n      return `检测中 ${this.checkedCount}/${this.totalCount}`\n    },\n    mergedStreams() {\n      // 创建一个Map来存储合并后的直播源\n      const streamMap = new Map()\n      \n      // 按照当前列表顺序处理每个直播源\n      this.streamList.forEach(stream => {\n        const key = stream.name // 使用名称作为键\n        \n        if (streamMap.has(key)) {\n          // 如果已存在相同名称的直播源，添加到URLs数组\n          const existing = streamMap.get(key)\n          if (!existing.urls.includes(stream.url)) {\n            existing.urls.push(stream.url)\n          }\n        } else {\n          // 如果是新的名称，创建新条目\n          streamMap.set(key, {\n            name: stream.name,\n            urls: [stream.url],\n            group: stream.group\n          })\n        }\n      })\n      \n      // 转换回数组格式\n      return Array.from(streamMap.values())\n    },\n    groupOptions() {\n      return [...new Set(this.streamList.map(item => item.group))]\n    }\n  },\n  created() {\n    // 初始化时加载持久化的数据\n    if (localStorage.getItem('persistentData') === 'true') {\n      const savedList = localStorage.getItem('streamList')\n      if (savedList) {\n        this.streamList = JSON.parse(savedList)\n        // 初始化时检查多播源\n        this.$nextTick(() => {\n          this.checkMulticastStreams() // 使用新方法\n        })\n      }\n    }\n    \n    // 监听保存事件\n    this.$root.$on('save-stream-list', this.saveStreamList)\n    \n    // 监听设置更新事件\n    this.$root.$on('settings-updated', this.handleSettingsUpdate)\n\n    // 从本地存储恢复状态\n    this.restoreState()\n    \n    // 如果定时检测是开启状态，重新启动定时器\n    if (this.isScheduled) {\n      this.setupSchedule()\n    }\n    // 如果采集是开启状态，重新启动采集\n    if (this.isCollecting) {\n      this.startCollecting(true) // true表示是恢复状态\n    }\n    // 如果GitHub自动同步是开启状态，重新启动同步定时器\n    if (this.syncForm.autoSync) {\n      this.setupSyncSchedule()\n    }\n\n    this.filteredList = []\n    this.getRealIp()  // 获取真实IP地址\n  },\n  beforeDestroy() {\n    // 移除事件监听\n    this.$root.$off('save-stream-list', this.saveStreamList)\n    this.$root.$off('settings-updated', this.handleSettingsUpdate)\n    // 组件销毁前清除定时器\n    if (this.collectTimer) {\n      clearInterval(this.collectTimer)\n    }\n    // 组件销毁时清理定时器\n    this.stopScheduleCheck()\n    // 在组件销毁前保存状态\n    this.saveState()\n    window.removeEventListener('beforeunload', this.handleBeforeUnload)\n  },\n  methods: {\n    // 添加处理设置更新的方法\n    handleSettingsUpdate(event) {\n      console.log('收到设置更新事件:', event)\n      if (event && event.type === 'settings-changed' && event.settings) {\n        console.log('设置已更新，当前设置:', event.settings)\n        // 重新检查所有多播源\n        this.$nextTick(() => {\n          this.checkMulticastStreams()\n        })\n      }\n    },\n\n    // 添加多播源检测的辅助方法\n    isMulticastStream(url) {\n      if (!url) return false\n      \n      // 更完整的多播源检测正则表达式\n      const patterns = [\n        // 标准格式\n        /[/](udp|rtp)[/]239\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /[/](udp|rtp)[/]225\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /[/](udp|rtp)[/]224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        // 带@的格式\n        /^(udp|rtp):\\/\\/@239\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /^(udp|rtp):\\/\\/@225\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /^(udp|rtp):\\/\\/@224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        // 不带@的格式\n        /^(udp|rtp):\\/\\/239\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /^(udp|rtp):\\/\\/225\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /^(udp|rtp):\\/\\/224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        // IPv6格式\n        /^(udp|rtp):\\/\\/\\[239\\.\\d+\\.\\d+\\.\\d+\\]:\\d+/i,\n        /^(udp|rtp):\\/\\/\\[225\\.\\d+\\.\\d+\\.\\d+\\]:\\d+/i,\n        /^(udp|rtp):\\/\\/\\[224\\.\\d+\\.\\d+\\.\\d+\\]:\\d+/i,\n        // 其他常见格式\n        /^(udp|rtp):\\/\\/@?239\\.\\d+\\.\\d+\\.\\d+[/]\\d+/i,\n        /^(udp|rtp):\\/\\/@?225\\.\\d+\\.\\d+\\.\\d+[/]\\d+/i,\n        /^(udp|rtp):\\/\\/@?224\\.\\d+\\.\\d+\\.\\d+[/]\\d+/i,\n        // 简单格式\n        /^udp\\/@?239\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /^rtp\\/@?239\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /^udp\\/@?225\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /^rtp\\/@?225\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /^udp\\/@?224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /^rtp\\/@?224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        // 带端口的格式\n        /^(udp|rtp):\\/\\/@?239\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /^(udp|rtp):\\/\\/@?225\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /^(udp|rtp):\\/\\/@?224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        // 特殊格式\n        /^(udp|rtp)[/](239|225|224)\\.\\d+\\.\\d+\\.\\d+[/]?(\\d+)?/i,\n        /^(udp|rtp):\\/\\/(239|225|224)\\.\\d+\\.\\d+\\.\\d+[/]?(\\d+)?/i,\n        // HTTP代理的UDP/RTP多播源格式\n        /http:\\/\\/[^/]+[/](udp|rtp)[/]224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /http:\\/\\/[^/]+[/](udp|rtp)[/]225\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /http:\\/\\/[^/]+[/](udp|rtp)[/]239\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        // HTTPS代理的UDP/RTP多播源格式\n        /https:\\/\\/[^/]+[/](udp|rtp)[/]224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /https:\\/\\/[^/]+[/](udp|rtp)[/]225\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /https:\\/\\/[^/]+[/](udp|rtp)[/]239\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        // 任何包含 udp 或 rtp 的链接\n        /^(udp|rtp):\\/\\//i,\n        /\\/(udp|rtp)\\//i,\n        /^(udp|rtp)@/i\n      ]\n      \n      // 先转换为小写进行检查\n      const lowerUrl = url.toLowerCase()\n      const isMulticast = patterns.some(pattern => pattern.test(lowerUrl))\n      if (isMulticast) {\n        console.log('检测到多播源:', url)\n      }\n      return isMulticast\n    },\n\n    // 检查多播源的方法\n    checkMulticastStreams() {\n      try {\n        const appSettings = localStorage.getItem('appSettings')\n        if (!appSettings) {\n          console.log('未找到设置配置')\n          return\n        }\n\n        let settings\n        try {\n          settings = JSON.parse(appSettings)\n        } catch (e) {\n          console.error('解析设置失败:', e)\n          return\n        }\n\n        // 如果启用了自动清除多播源\n        if (settings.autoRemoveMulticast === true) {\n          console.log('开始检查多播源...')\n          let removedCount = 0\n          const toRemove = []\n\n          // 检查所有流\n          this.streamList.forEach((stream, index) => {\n            if (this.isMulticastStream(stream.url)) {\n              toRemove.push(index)\n              removedCount++\n              console.log('发现多播源:', stream.url)\n            }\n          })\n\n          // 从后向前删除\n          for (let i = toRemove.length - 1; i >= 0; i--) {\n            const index = toRemove[i]\n            const stream = this.streamList[index]\n            console.log('正在删除多播源:', stream.name, stream.url)\n            this.streamList.splice(index, 1)\n            this.handleStreamRemoval(stream, '多播源')\n          }\n\n          if (removedCount > 0) {\n            console.log(`成功清除 ${removedCount} 个多播源`)\n            this.$message.warning(`已自动清除 ${removedCount} 个多播源`)\n            this.saveStreamList()\n\n            // 如果当前页没有数据，跳转到上一页\n            if (this.paginatedData.length === 0 && this.currentPage > 1) {\n              this.currentPage--\n            }\n          }\n        }\n      } catch (error) {\n        console.error('检查多播源失败:', error)\n      }\n    },\n\n    async checkStream(stream) {\n      // 优先从 appSettings 中读取 FFprobe 路径\n      let ffprobePath = ''\n      try {\n        const appSettings = localStorage.getItem('appSettings')\n        if (appSettings) {\n          const settings = JSON.parse(appSettings)\n          ffprobePath = settings.ffprobePath\n        }\n      } catch (error) {\n        console.error('读取 appSettings 失败:', error)\n      }\n\n      // 如果 appSettings 中没有，则从独立设置中读取\n      if (!ffprobePath) {\n        ffprobePath = localStorage.getItem('ffprobePath')\n      }\n\n      if (!ffprobePath) {\n        console.error('未找到 FFprobe 路径配置')\n        this.$message.error('请先在系统设置中配置FFprobe路径')\n        return false\n      }\n\n      // 检查是否是多播源\n      if (this.isMulticastStream(stream.url)) {\n        // 直接返回false，不再设置状态\n        return false\n      }\n\n      try {\n        const response = await fetch(`${this.getBaseUrl()}/api/check-stream`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            url: stream.url,\n            ffprobePath: ffprobePath\n          })\n        })\n\n        if (!response.ok) throw new Error('请求失败')\n        \n        const result = await response.json()\n        \n        // 更新流信息\n        stream.status = result.available ? '正常' : '异常'\n        stream.resolution = result.resolution || '-'\n        stream.responseTime = result.responseTime || '-'\n\n        // 检查是否需要自动清除\n        if (!result.available || this.shouldRemoveStream(stream)) {\n          let reason = ''\n          if (!result.available || stream.status === '异常') {\n            reason = '异常源'\n          } else if (stream.responseTime > 3000) {\n            reason = '响应时间过慢'\n          } else {\n            reason = '分辨率过低'\n          }\n\n          const listIndex = this.streamList.indexOf(stream)\n          if (listIndex > -1) {\n            this.streamList.splice(listIndex, 1)\n            this.handleStreamRemoval(stream, reason)\n          }\n        }\n        \n        this.saveStreamList()\n        return result.available\n      } catch (error) {\n        console.error('检测错误:', error)\n        stream.status = '异常'\n        \n        // 如果设置了自动清除异常源，在这里也进行清除\n        if (this.shouldRemoveStream(stream)) {\n          const currentPageItems = this.paginatedData\n          const pageIndex = currentPageItems.indexOf(stream)\n          const listIndex = this.streamList.indexOf(stream)\n          \n          if (listIndex > -1) {\n            this.streamList.splice(listIndex, 1)\n            if (pageIndex === currentPageItems.length - 1 && this.currentPage > 1) {\n              this.currentPage--\n            }\n            console.log(`清除异常直播源: ${stream.name}, 原因: 检测失败`)\n            this.$message.warning('已自动清除直播源：检测失败')\n          }\n        }\n        \n        this.saveStreamList()\n        return false\n      }\n    },\n\n    shouldRemoveStream(stream) {\n      try {\n        // 获取设置\n        const appSettings = localStorage.getItem('appSettings')\n        let settings = {}\n        if (appSettings) {\n          settings = JSON.parse(appSettings)\n        }\n\n        // 检查是否需要清除异常源\n        if (settings.autoRemoveInvalid === true && \n            (stream.status === '异常' || stream.status === '未知')) {\n          console.log(`应清除异常源: ${stream.name}, 状态: ${stream.status}`)\n          return true\n        }\n\n        // 获取模式设置\n        const extremeMode = settings.extremeMode === true\n        const strictMode = settings.strictMode === true\n\n        // 检查是否需要清除低分辨率源\n        if (settings.autoRemoveLowRes === true && \n            stream.resolution !== '未知' && \n            stream.resolution !== '多播源' && \n            stream.resolution !== '-') {\n          const [width, height] = stream.resolution.split('x').map(Number)\n          if (extremeMode ? (width < 1920 || height < 1080) : \n              (strictMode ? (width < 1920 || height < 1080) : (width < 1280 || height < 720))) {\n            console.log(`应清除低分辨率源: ${stream.name}, 分辨率: ${stream.resolution}`)\n            return true\n          }\n        }\n\n        // 检查响应时间\n        if (settings.autoRemoveSlowResponse === true && \n            stream.responseTime !== '-' &&\n            Number(stream.responseTime) > (extremeMode ? 1500 : (strictMode ? 2000 : 3000))) {\n          console.log(`应清除慢速源: ${stream.name}, 响应时间: ${stream.responseTime}ms`)\n          return true\n        }\n\n        return false\n      } catch (error) {\n        console.error('检查是否应该移除流时出错:', error)\n        return false\n      }\n    },\n\n    async handleBatchCheck() {\n      if (this.isChecking) return\n      \n      const uncheckedStreams = this.streamList.filter(s => !this.isPaused || this.streamList.indexOf(s) > this.pausedIndex)\n      if (uncheckedStreams.length === 0) {\n        this.$message.info('没有需要检测的直播源')\n        return\n      }\n\n      this.isChecking = true\n      this.shouldStop = false\n      this.totalCount = uncheckedStreams.length\n      this.checkedCount = this.isPaused ? this.checkedCount : 0\n\n      try {\n        // 获取并发检测数量设置\n        const concurrentChecks = parseInt(localStorage.getItem('concurrentChecks')) || 3\n        \n        // 从暂停的位置或开始位置继续检测\n        const startIndex = this.isPaused ? this.pausedIndex + 1 : 0\n        \n        // 分批处理，每批次处理固定数量的流\n        const batchSize = Math.min(concurrentChecks, 10) // 限制最大并发数\n        \n        for (let i = startIndex; i < uncheckedStreams.length; i += batchSize) {\n          if (this.shouldStop) break\n          \n          // 获取当前批次要检测的流\n          const batch = uncheckedStreams.slice(i, i + batchSize)\n          \n          // 并发检测当前批次的所有流\n          await Promise.all(\n            batch.map(async stream => {\n              if (this.shouldStop) return\n              \n              try {\n                stream.status = '检测中'\n                const success = await this.checkStream(stream)\n                this.checkedCount++\n                \n                if (success) {\n                  this.saveState()\n                }\n              } catch (error) {\n                console.error('检测流失败:', error)\n                stream.status = '异常'\n                this.checkedCount++\n              }\n            })\n          )\n          \n          // 更新暂停位置\n          this.pausedIndex = i + batchSize - 1\n          \n          // 每批次完成后保存状态\n          this.saveState()\n        }\n\n        if (!this.shouldStop) {\n          this.isChecking = false\n          this.isPaused = false\n          this.pausedIndex = -1\n          this.$message.success('批量检测完成')\n          \n          // 检查是否需要在批量检测完成后同步\n          if (this.syncForm.autoSync && this.syncForm.syncType === 'afterCheck') {\n            await this.syncToGithub(this.generateContent('txt'), this.syncForm.txtPath)\n            await this.syncToGithub(this.generateContent('m3u'), this.syncForm.m3uPath)\n            this.$message.success('已同步到GitHub')\n          }\n        }\n      } catch (error) {\n        console.error('批量检测错误:', error)\n        this.$message.error('批量检测失败')\n      } finally {\n        if (this.shouldStop && this.streamList.length > 0) {\n          this.isChecking = false\n          this.isPaused = true\n          this.$message.info('检测已暂停')\n        } else {\n          this.isChecking = false\n          this.isPaused = false\n          this.pausedIndex = -1\n        }\n      }\n    },\n\n    pauseCheck() {\n      this.shouldStop = true\n    },\n\n    async resumeCheck() {\n      if (this.pausedIndex >= 0) {\n        this.isChecking = true\n        this.isPaused = false\n        this.shouldStop = false\n        await this.batchCheck(this.pausedIndex)\n      }\n    },\n\n    async handleCheck(row) {\n      row.status = '检测中'\n      \n      const success = await this.checkStream(row)\n      this.$message[success ? 'success' : 'error'](`检测${success ? '成功' : '失败'}: ${row.name}`)\n    },\n    handleDelete(row) {\n      this.$confirm('确认删除该直播源?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        const index = this.streamList.indexOf(row)\n        this.streamList.splice(index, 1)\n        const maxPage = Math.ceil(this.streamList.length / this.pageSize)\n        if (this.currentPage > maxPage) {\n          this.currentPage = Math.max(maxPage, 1)\n        }\n        this.saveStreamList()  // 保存更新后的列表\n        this.$message.success('删除成功')\n      }).catch(() => {})\n    },\n    async handleUrlImport() {\n      const valid = await this.$refs.importForm.validate()\n      if (!valid) return\n\n      try {\n        const response = await fetch(`${this.getBaseUrl()}/api/import-url`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({ url: this.importForm.url })\n        })\n\n        if (!response.ok) throw new Error('导入失败')\n\n        const content = await response.text()\n        const newStreams = this.parseContent(content)\n\n        if (newStreams.length > 0) {\n          // 过滤重复的直播源\n          const existingUrls = new Set(this.streamList.map(s => s.url))\n          const uniqueStreams = newStreams.filter(s => !existingUrls.has(s.url))\n          \n          if (uniqueStreams.length > 0) {\n            this.streamList.push(...uniqueStreams)\n            this.$message.success(`成功导入 ${uniqueStreams.length} 个直播源`)\n            this.importUrlDialogVisible = false\n            \n            // 导入后立即检查多播源\n            this.$nextTick(() => {\n              this.checkMulticastStreams()\n            })\n          } else {\n            this.$message.info('没有新的直播源可以导入')\n          }\n        } else {\n          this.$message.warning('未找到有效的直播源')\n        }\n      } catch (error) {\n        this.$message.error('导入失败：' + error.message)\n      }\n    },\n    readFile(file) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader()\n        reader.onload = (e) => resolve(e.target.result)\n        reader.onerror = () => reject(new Error('文件读取失败'))\n        reader.readAsText(file)\n      })\n    },\n    parseContent(content) {\n      const lines = content.split('\\n')\n      const streams = []\n      let currentGroup = '未分组'\n\n      // 检测是否是 m3u 格式\n      if (content.includes('#EXTM3U')) {\n        let currentName = ''\n        let currentGroupTitle = ''\n\n        lines.forEach(line => {\n          line = line.trim()\n          if (!line) return\n\n          if (line.startsWith('#EXTINF:')) {\n            // 尝试不同的名称提取方式\n            let name = ''\n            \n            // 1. 尝试提取 tvg-name 属性\n            const tvgNameMatch = line.match(/tvg-name=\"([^\"]+)\"/i)\n            if (tvgNameMatch) {\n              name = tvgNameMatch[1].trim()\n            }\n            \n            // 2. 如果没有 tvg-name，尝试提取最后的逗号后的名称\n            if (!name) {\n              const lastCommaIndex = line.lastIndexOf(',')\n              if (lastCommaIndex !== -1) {\n                name = line.substring(lastCommaIndex + 1).trim()\n              }\n            }\n            \n            // 3. 如果还是没有名称，尝试提取 tvg-id\n            if (!name) {\n              const tvgIdMatch = line.match(/tvg-id=\"([^\"]+)\"/i)\n              if (tvgIdMatch) {\n                name = tvgIdMatch[1].trim()\n              } else {\n                // 3.1 尝试提取不带引号的 tvg-id\n                const tvgIdNoQuoteMatch = line.match(/tvg-id=([^,\\s]+)/i)\n                if (tvgIdNoQuoteMatch) {\n                  name = tvgIdNoQuoteMatch[1].trim()\n                }\n              }\n            }\n\n            currentName = name || '未命名'\n            \n            // 提取分组信息\n            // 1. 先尝试带引号的 group-title\n            const groupMatch = line.match(/group-title=\"([^\"]+)\"/i)\n            if (groupMatch) {\n              currentGroupTitle = groupMatch[1].trim()\n            } else {\n              // 2. 尝试不带引号的 group-title\n              const groupNoQuoteMatch = line.match(/group-title=([^,\\s]+)/i)\n              if (groupNoQuoteMatch) {\n                currentGroupTitle = groupNoQuoteMatch[1].trim()\n              }\n            }\n          } else if (!line.startsWith('#') && line.trim()) {\n            // 这是一个媒体URL行\n            const url = line.trim()\n            // 在添加流之前先检查是否是多播源\n            if (currentName && !this.isMulticastStream(url)) {\n              streams.push({\n                name: currentName,\n                url: url,\n                group: currentGroupTitle || currentGroup,\n                status: '未检测',\n                resolution: '-',\n                responseTime: '-'\n              })\n            } else {\n              console.log('跳过多播源:', url)\n            }\n            currentName = ''  // 重置当前名称\n          }\n        })\n      } else {\n        // txt 格式处理\n        lines.forEach(line => {\n          line = line.trim()\n          if (!line) return\n\n          // 检查是否是分组标记\n          if (line.endsWith(',#genre#')) {\n            currentGroup = line.replace(',#genre#', '')\n            return\n          }\n\n          // 解析直播源行\n          const [name, urls] = line.split(',')\n          if (!name || !urls) return\n\n          // 检查是否包含多个URL（用#分隔）\n          const urlList = urls.split('#')\n          \n          // 为每个URL创建一个新的直播源条目，但排除多播源\n          urlList.forEach(url => {\n            url = url.trim()\n            if (url && !this.isMulticastStream(url)) {\n              streams.push({\n                name: name,\n                url: url,\n                group: currentGroup,\n                status: '未检测',\n                resolution: '-',\n                responseTime: '-'\n              })\n            } else if (url) {\n              console.log('跳过多播源:', url)\n            }\n          })\n        })\n      }\n\n      console.log(`解析完成: 共发现 ${streams.length} 个有效直播源`)\n      return streams\n    },\n    addStreamsToList(streams) {\n      // 标准化所有流的分组名称\n      streams.forEach(stream => {\n        if (stream.group === '央视' || stream.group === 'CCTV' || \n            stream.group.includes('央视') || stream.group.includes('CCTV')) {\n          stream.group = this.STANDARD_GROUPS.CCTV\n        } else if (stream.group.includes('卫视')) {\n          stream.group = this.STANDARD_GROUPS.SATELLITE\n        }\n      })\n\n      // 检查重复并添加到列表\n      const existingStreams = new Set(\n        this.streamList.map(s => `${s.url}|${s.group}`)\n      )\n\n      const uniqueStreams = streams.filter(stream => {\n        const key = `${stream.url}|${stream.group}`\n        if (existingStreams.has(key)) {\n          return false\n        }\n        existingStreams.add(key)\n        return true\n      })\n\n      this.streamList.push(...uniqueStreams)\n      this.currentPage = 1\n      this.saveStreamList()\n    },\n    handleSizeChange(val) {\n      this.pageSize = val\n      // 当每页条数改变时，重置当前页为第一页\n      this.currentPage = 1\n    },\n    handleCurrentChange(val) {\n      this.currentPage = val\n    },\n    async handleFileUpload(event) {\n      const file = event.target.files[0]\n      if (!file) return\n\n      try {\n        const content = await this.readFile(file)\n        const newStreams = this.parseContent(content)\n        \n        if (newStreams.length > 0) {\n          // 过滤重复的直播源\n          const existingUrls = new Set(this.streamList.map(s => s.url))\n          const uniqueStreams = newStreams.filter(s => !existingUrls.has(s.url))\n          \n          if (uniqueStreams.length > 0) {\n            this.streamList.push(...uniqueStreams)\n            this.$message.success(`成功导入 ${uniqueStreams.length} 个直播源`)\n            \n            // 导入后立即检查多播源\n            this.$nextTick(() => {\n              this.checkMulticastStreams()\n            })\n          } else {\n            this.$message.info('没有新的直播源可以导入')\n          }\n        } else {\n          this.$message.warning('未找到有效的直播源')\n        }\n      } catch (error) {\n        this.$message.error('文件读取失败：' + error.message)\n      } finally {\n        // 清除文件输入，允许重复选择同一文件\n        event.target.value = ''\n      }\n    },\n    getGroupFromFileName(filename) {\n      // 从文件名中提取可能的分组名\n      const name = filename.toLowerCase()\n      if (name.includes('cctv')) return 'CCTV'\n      if (name.includes('卫视')) return '卫视'\n      if (name.includes('地方')) return '地方台'\n      return '未分组'\n    },\n    handleClearList() {\n      this.$confirm('确认清空列表吗？', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        // 先停止所有检测和采集任务\n        this.shouldStop = true\n        this.isChecking = false\n        this.isPaused = false\n        this.pausedIndex = -1\n        \n        // 清除所有定时器\n        if (this.collectTimer) {\n          clearInterval(this.collectTimer)\n          this.collectTimer = null\n        }\n        if (this.scheduleTimer) {\n          clearInterval(this.scheduleTimer)\n          this.scheduleTimer = null\n        }\n        if (this.syncTimer) {\n          clearInterval(this.syncTimer)\n          this.syncTimer = null\n        }\n        \n        // 重置所有状态\n        this.isCollecting = false\n        this.isScheduled = false\n        this.checkedCount = 0\n        this.totalCount = 0\n        \n        // 清空列表和重置页码\n        this.streamList = []\n        this.currentPage = 1\n        \n        // 更新链接内容和保存状态\n        this.updateLinkContent()\n        this.saveState()\n        \n        this.$message({\n          type: 'success',\n          message: '列表已清空'\n        })\n      }).catch(() => {\n        this.$message({\n          type: 'info',\n          message: '已取消清空'\n        })\n      })\n    },\n    handleCopy(row) {\n      // 创建一个临时输入框来实现复制功能\n      const textarea = document.createElement('textarea')\n      textarea.value = row.url\n      document.body.appendChild(textarea)\n      textarea.select()\n      \n      try {\n        document.execCommand('copy')\n        this.$message.success('链接已复制到剪贴板')\n      } catch (err) {\n        this.$message.error('复制失败')\n      } finally {\n        document.body.removeChild(textarea)\n      }\n    },\n    saveStreamList() {\n      if (localStorage.getItem('persistentData') === 'true') {\n        localStorage.setItem('streamList', JSON.stringify(this.streamList))\n      }\n    },\n    handleCollectMode() {\n      if (this.isCollecting) {\n        this.stopCollecting()\n      } else {\n        this.collectDialogVisible = true\n      }\n    },\n    async startCollecting(isRestore = false) {\n      if (!isRestore) {\n        // 确保 urls 是数组\n        if (!Array.isArray(this.collectForm.urls)) {\n          this.$set(this.collectForm, 'urls', [''])\n          return\n        }\n        \n        const valid = await this.$refs.collectForm.validate()\n        if (!valid) return\n      }\n\n      this.collectDialogVisible = false\n      this.isCollecting = true\n      this.saveState() // 保存状态\n      \n      // 立即执行一次采集\n      await this.collect()\n      \n      // 如果开启了自动采集，设置定时器\n      if (this.collectForm.autoCollect) {\n        this.setupCollectSchedule()\n      } else {\n        // 单次采集完成后停止\n        this.isCollecting = false\n        this.saveState()\n      }\n    },\n    stopCollecting() {\n      this.isCollecting = false\n      if (this.collectTimer) {\n        clearInterval(this.collectTimer)\n        this.collectTimer = null\n      }\n      this.saveState() // 保存状态\n      // 只有在自动采集模式下才显示停止提示\n      if (this.collectForm.autoCollect) {\n        this.$message.success('已停止采集')\n      }\n    },\n    async collect() {\n      try {\n        if (this.isChecking) {\n          this.$message.warning('检测正在进行中，暂时跳过本次采集')\n          return\n        }\n\n        this.$message.info('开始采集直播源...')\n\n        const results = await Promise.allSettled(\n          this.collectForm.urls.map(async url => {\n            try {\n              const response = await fetch(`${this.getBaseUrl()}/api/collect-url?url=${encodeURIComponent(url)}`, {\n                method: 'GET',\n                headers: {\n                  'Accept': 'text/plain'\n                },\n              })\n              if (!response.ok) throw new Error(`采集失败: ${url}`)\n              \n              const content = await response.text()\n              const newStreams = this.parseContent(content)\n              \n              // 根据采集模式过滤直播源\n              let filteredStreams = newStreams\n              if (this.collectForm.mode === 'tv') {\n                filteredStreams = newStreams.filter(s => {\n                  // 处理央视频道\n                  const isCCTV = /CCTV|央视|中央电视台/.test(s.name)\n                  if (isCCTV) {\n                    s.group = this.STANDARD_GROUPS.CCTV // 使用标准分组名称\n                    // 标准化央视频道名称\n                    const cctvNumber = this.extractCCTVNumber(s.name)\n                    if (cctvNumber) {\n                      s.name = cctvNumber\n                    }\n                    return true\n                  }\n                  // 处理卫视频道\n                  const isSatellite = /卫视/.test(s.name)\n                  if (isSatellite) {\n                    s.group = this.STANDARD_GROUPS.SATELLITE // 使用标准分组名称\n                    return true\n                  }\n                  return false\n                })\n              }\n              \n              // 过滤重复的直播源（同时考虑URL和分组）\n              const existingStreams = new Set(\n                this.streamList.map(s => `${s.url}|${s.group}`)\n              )\n              return filteredStreams.filter(s => {\n                const key = `${s.url}|${s.group}`\n                if (existingStreams.has(key)) {\n                  return false\n                }\n                existingStreams.add(key)\n                return true\n              })\n            } catch (error) {\n              console.error(`采集地址 ${url} 失败:`, error)\n              return []\n            }\n          })\n        )\n\n        // 合并所有采集结果\n        const allNewStreams = results\n          .filter(result => result.status === 'fulfilled')\n          .flatMap(result => result.value)\n          .filter((stream, index, self) => \n            index === self.findIndex(s => s.url === stream.url)\n          )\n\n        // 添加新的直播源到列表\n        if (allNewStreams.length > 0) {\n          this.addStreamsToList(allNewStreams)\n          const modeText = this.collectForm.mode === 'tv' ? '央视卫视' : ''\n          this.$message.success(`采集成功: 新增${allNewStreams.length}个${modeText}直播源`)\n        } else {\n          const modeText = this.collectForm.mode === 'tv' ? '央视卫视' : ''\n          this.$message.info(`未发现新的${modeText}直播源`)\n        }\n\n        // 统计失败的地址\n        const failedUrls = results\n          .filter(result => result.status === 'rejected')\n          .length\n\n        if (failedUrls > 0) {\n          this.$message.warning(`${failedUrls}个地址采集失败`)\n        }\n\n      } catch (error) {\n        this.$message.error('采集失败：' + error.message)\n        if (!this.collectForm.autoCollect) {\n          this.stopCollecting()\n        }\n      }\n    },\n\n    // 添加提取CCTV频道号的方法\n    extractCCTVNumber(name) {\n      // 标准化名称映射\n      const nameMap = {\n        // 标准频道\n        '综合': 'CCTV1',\n        '财经': 'CCTV2',\n        '综艺': 'CCTV3',\n        '中文国际': 'CCTV4',\n        '体育': 'CCTV5',\n        '体育赛事': 'CCTV5+',\n        '电影': 'CCTV6',\n        '国防军事': 'CCTV7',\n        '电视剧': 'CCTV8',\n        '记录': 'CCTV9',\n        '科教': 'CCTV10',\n        '戏曲': 'CCTV11',\n        '社会与法': 'CCTV12',\n        '新闻': 'CCTV13',\n        '少儿': 'CCTV14',\n        '音乐': 'CCTV15',\n        '奥林匹克': 'CCTV16',\n        '农业农村': 'CCTV17',\n        // 特殊频道\n        '中学生': 'CCTV中学生',\n        '文化精品': 'CCTV文化精品',\n        '怀旧剧场': 'CCTV怀旧剧场',\n        '风云剧场': 'CCTV风云剧场',\n        '第一剧场': 'CCTV第一剧场',\n        '风云音乐': 'CCTV风云音乐',\n        '风云足球': 'CCTV风云足球',\n        '世界地理': 'CCTV世界地理',\n        '女性时尚': 'CCTV女性时尚',\n        '央视台球': 'CCTV央视台球',\n        '高尔夫网球': 'CCTV高尔夫网球',\n        '央视文化精品': 'CCTV文化精品',\n        '兵器科技': 'CCTV兵器科技',\n        '电视指南': 'CCTV电视指南',\n        '卫生健康': 'CCTV卫生健康',\n        '发现之旅': 'CCTV发现之旅',\n        '老故事': 'CCTV老故事',\n        '中视购物': 'CCTV中视购物',\n        '女性时尚': 'CCTV女性时尚',\n        '新科动漫': 'CCTV新科动漫',\n        // 外语频道\n        '俄语': 'CCTV俄语',\n        '法语': 'CCTV法语',\n        '西班牙语': 'CCTV西班牙语',\n        '阿拉伯语': 'CCTV阿拉伯语',\n        '英语': 'CCTV英语'\n      }\n\n      // 1. 首先尝试直接匹配CCTV+数字的形式\n      const cctvMatch = name.match(/CCTV-?(\\d+)(\\+)?/i)\n      if (cctvMatch) {\n        const number = cctvMatch[1]\n        const plus = cctvMatch[2] || ''\n        return `CCTV${number}${plus}`\n      }\n\n      // 2. 处理特殊频道名称（如CCTV5+）\n      if (/CCTV5\\+|CCTV5Plus|体育赛事/.test(name)) {\n        return 'CCTV5+'\n      }\n\n      // 3. 处理特殊频道（完全匹配）\n      const normalizedName = name.replace(/[-_ ]/g, '').toLowerCase()\n      for (const [key, value] of Object.entries(nameMap)) {\n        if (normalizedName.includes(key.toLowerCase())) {\n          return value\n        }\n      }\n\n      // 4. 处理已经是标准格式的特殊频道名称\n      if (/CCTV[^0-9]/.test(name)) {\n        // 如果已经是CCTV开头的特殊频道，保持原样但标准化格式\n        return name.replace(/CCTV[-_ ]?/i, 'CCTV')\n      }\n\n      // 5. 处理其他包含CCTV、央视、中央电视台的情况\n      if (name.includes('CCTV') || name.includes('央视') || name.includes('中央电视台')) {\n        // 如果无法确定具体频道，但包含数字，则格式化为CCTVx\n        const cleanName = name.replace(/[^0-9]+/g, '')\n        if (cleanName) {\n          return `CCTV${cleanName}`\n        }\n        // 如果没有数字，保持原始名称但添加CCTV前缀\n        return `CCTV${name.replace(/^(CCTV|央视|中央电视台)/, '')}`\n      }\n\n      return null\n    },\n    async handleGenerateLink() {\n      this.generateLinkDialogVisible = true\n      try {\n        // 先生成 TXT 格式链接\n        const txtResponse = await fetch(`${this.getBaseUrl()}/api/generate-link`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain',\n            'X-File-Format': 'txt'\n          },\n          body: this.generateContent('txt')\n        })\n        \n        // 再生成 M3U 格式链接\n        const m3uResponse = await fetch(`${this.getBaseUrl()}/api/generate-link`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain',\n            'X-File-Format': 'm3u'\n          },\n          body: this.generateContent('m3u')\n        })\n        \n        if (txtResponse.ok && m3uResponse.ok) {\n          const txtLink = await txtResponse.text()\n          const m3uLink = await m3uResponse.text()\n          \n          // 根据当前选择的格式显示对应的链接\n          this.generatedLinks = {\n            txt: txtLink,\n            m3u: m3uLink\n          }\n          this.generatedLink = this.generatedLinks[this.linkForm.format]\n        }\n      } catch (error) {\n        console.error('生成链接失败：', error)\n        this.$message.error('生成链接失败')\n      }\n    },\n    generateContent(format) {\n      return format === 'txt' ? this.generateTxtContent() : this.generateM3uContent()\n    },\n    generateTxtContent() {\n      let content = ''\n      let currentGroup = ''\n      \n      // 对每个分组内的直播源按响应速度排序\n      const sortedStreams = [...this.mergedStreams].sort((a, b) => {\n        if (a.group !== b.group) return 0  // 不同分组不改变顺序\n        const aTime = Number(a.responseTime) || Infinity\n        const bTime = Number(b.responseTime) || Infinity\n        return aTime - bTime\n      })\n      \n      sortedStreams.forEach(stream => {\n        if (stream.group !== currentGroup) {\n          currentGroup = stream.group\n          content += `${currentGroup},#genre#\\n`\n        }\n        content += `${stream.name},${stream.urls.join('#')}\\n`\n      })\n      \n      return content.trim()\n    },\n    generateM3uContent() {\n      let content = '#EXTM3U\\n'\n      let currentGroup = ''\n      \n      // 对每个分组内的直播源按响应速度排序\n      const sortedStreams = [...this.mergedStreams].sort((a, b) => {\n        if (a.group !== b.group) return 0  // 不同分组不改变顺序\n        const aTime = Number(a.responseTime) || Infinity\n        const bTime = Number(b.responseTime) || Infinity\n        return aTime - bTime\n      })\n      \n      sortedStreams.forEach(stream => {\n        if (stream.group !== currentGroup) {\n          currentGroup = stream.group\n          content += `\\n#EXTINF:-1 group-title=\"${currentGroup}\"\\n`\n        }\n        stream.urls.forEach(url => {\n          content += `#EXTINF:-1,${stream.name}\\n${url}\\n`\n        })\n      })\n      \n      return content.trim()\n    },\n    copyGeneratedLink() {\n      const textarea = document.createElement('textarea')\n      textarea.value = this.generatedLink\n      document.body.appendChild(textarea)\n      textarea.select()\n      \n      try {\n        document.execCommand('copy')\n        this.$message.success('链接已复制到剪贴板')\n      } catch (err) {\n        this.$message.error('复制失败')\n      } finally {\n        document.body.removeChild(textarea)\n      }\n    },\n    downloadTxtFile() {\n      const blob = new Blob([this.generatedLink], { type: 'text/plain;charset=utf-8' })\n      const url = window.URL.createObjectURL(blob)\n      const link = document.createElement('a')\n      link.href = url\n      link.download = `直播源列表_${new Date().toLocaleDateString()}.txt`\n      \n      document.body.appendChild(link)\n      link.click()\n      \n      // 清理\n      window.URL.revokeObjectURL(url)\n      document.body.removeChild(link)\n      this.$message.success('文件下载成功')\n    },\n    // 修改更新链接内容的方法\n    async updateLinkContent() {\n      try {\n        // 更新 TXT 格式内容\n        await fetch(`${this.getBaseUrl()}/api/update-content`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain',\n            'X-File-Format': 'txt'\n          },\n          body: this.generateContent('txt')\n        })\n        \n        // 更新 M3U 格式内容\n        await fetch(`${this.getBaseUrl()}/api/update-content`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain',\n            'X-File-Format': 'm3u'\n          },\n          body: this.generateContent('m3u')\n        })\n      } catch (error) {\n        console.error('更新链接内容失败：', error)\n      }\n    },\n    handleScheduleCheck() {\n      if (this.isScheduled) {\n        this.stopScheduleCheck()\n      } else {\n        this.scheduleDialogVisible = true\n      }\n    },\n    startScheduleCheck() {\n      this.$refs.scheduleForm.validate(valid => {\n        if (valid) {\n          this.scheduleDialogVisible = false\n          this.isScheduled = true\n          this.setupSchedule()\n          this.saveState() // 保存状态\n          this.$message.success('定时检测已开启')\n        }\n      })\n    },\n    stopScheduleCheck() {\n      if (this.scheduleTimer) {\n        clearInterval(this.scheduleTimer)\n        this.scheduleTimer = null\n      }\n      this.isScheduled = false\n      this.nextScheduleTime = null\n      this.saveState() // 保存状态\n      this.$message.success('定时检测已停止')\n    },\n    setupSchedule() {\n      // 清除现有定时器\n      if (this.scheduleTimer) {\n        clearInterval(this.scheduleTimer)\n      }\n\n      const calculateNextExecutionTime = () => {\n        const now = new Date()\n        const [hours, minutes] = this.scheduleForm.executeTime.split(':').map(Number)\n        let nextTime = new Date(now)\n        nextTime.setHours(hours, minutes, 0, 0)\n\n        // 如果当前时间已经过了今天的执行时间，设置为明天\n        if (nextTime <= now) {\n          nextTime.setDate(nextTime.getDate() + 1)\n        }\n\n        // 如果是每周模式，调整到下一个符合条件的星期\n        if (this.scheduleForm.scheduleType === 'weekly') {\n          const targetDay = parseInt(this.scheduleForm.weekDay)\n          while (nextTime.getDay() !== targetDay) {\n            nextTime.setDate(nextTime.getDate() + 1)\n          }\n        }\n\n        return nextTime\n      }\n\n      const scheduleNextExecution = () => {\n        const nextTime = calculateNextExecutionTime()\n        const delay = nextTime.getTime() - new Date().getTime()\n\n        // 更新下次执行时间显示\n        this.nextScheduleTime = nextTime\n\n        // 设置下次执行的定时器\n        this.scheduleTimer = setTimeout(() => {\n          // 如果当前正在检测中，等待检测完成后再执行\n          if (!this.isChecking) {\n            this.handleBatchCheck()\n          }\n          // 设置下一次执行\n          scheduleNextExecution()\n        }, delay)\n      }\n\n      // 开始第一次调度\n      scheduleNextExecution()\n    },\n    // 保存当前状态到本地存储\n    saveState() {\n      try {\n        // 清除旧的分块数据\n        this.clearStorageData()\n\n        // 只保存必要的数据字段，减少数据量\n        const minimalStreamList = this.streamList.map(stream => ({\n          name: stream.name,\n          url: stream.url,\n          group: stream.group,\n          status: stream.status,\n          resolution: stream.resolution || '',\n          responseTime: stream.responseTime || 0\n        }))\n\n        // 将streamList分块存储，减小分块大小\n        const streamListStr = JSON.stringify(minimalStreamList)\n        const chunkSize = 100000 // 减小到100KB\n        const chunks = Math.ceil(streamListStr.length / chunkSize)\n        \n        // 如果数据量太大，只保存基本信息\n        if (chunks > 10) {\n          console.warn('数据量过大，只保存基本状态信息')\n          const basicState = {\n            currentPage: this.currentPage,\n            pageSize: this.pageSize,\n            scheduleForm: this.scheduleForm,\n            collectForm: this.collectForm\n          }\n          localStorage.setItem(this.stateKey, JSON.stringify(basicState))\n          return\n        }\n\n        // 分块存储\n        for (let i = 0; i < chunks; i++) {\n          const chunk = streamListStr.slice(i * chunkSize, (i + 1) * chunkSize)\n          try {\n            localStorage.setItem(`${this.stateKey}_streamList_${i}`, chunk)\n          } catch (e) {\n            console.error('存储分块失败:', e)\n            this.clearStorageData()\n            // 尝试只保存基本信息\n            const basicState = {\n              currentPage: this.currentPage,\n              pageSize: this.pageSize,\n              scheduleForm: this.scheduleForm,\n              collectForm: this.collectForm\n            }\n            localStorage.setItem(this.stateKey, JSON.stringify(basicState))\n            return\n          }\n        }\n\n        // 存储其他状态数据\n        const state = {\n          currentPage: this.currentPage,\n          pageSize: this.pageSize,\n          scheduleForm: this.scheduleForm,\n          collectForm: this.collectForm,\n          streamListChunks: chunks\n        }\n        localStorage.setItem(this.stateKey, JSON.stringify(state))\n      } catch (error) {\n        console.error('保存状态失败:', error)\n        this.clearStorageData()\n        // 尝试只保存基本信息\n        try {\n          const basicState = {\n            currentPage: this.currentPage,\n            pageSize: this.pageSize\n          }\n          localStorage.setItem(this.stateKey, JSON.stringify(basicState))\n        } catch (e) {\n          console.error('保存基本状态也失败:', e)\n        }\n      }\n    },\n\n    // 从本地存储恢复状态\n    restoreState() {\n      try {\n        const savedState = localStorage.getItem(this.stateKey)\n        if (savedState) {\n          const state = JSON.parse(savedState)\n          \n          // 恢复streamList\n          if (state.streamListChunks) {\n            try {\n              let streamListStr = ''\n              for (let i = 0; i < state.streamListChunks; i++) {\n                const chunk = localStorage.getItem(`${this.stateKey}_streamList_${i}`)\n                if (chunk) {\n                  streamListStr += chunk\n                }\n              }\n              if (streamListStr) {\n                this.streamList = JSON.parse(streamListStr)\n              }\n            } catch (e) {\n              console.error('恢复streamList失败:', e)\n              this.streamList = []\n            }\n          }\n          \n          // 恢复其他状态\n          this.currentPage = state.currentPage || 1\n          this.pageSize = state.pageSize || 5\n          if (state.scheduleForm) this.scheduleForm = state.scheduleForm\n          if (state.collectForm) this.collectForm = state.collectForm\n        }\n\n        // 重置所有运行状态\n        this.isChecking = false\n        this.isPaused = false\n        this.isScheduled = false\n        this.isCollecting = false\n        this.checkedCount = 0\n        this.totalCount = 0\n        this.pausedIndex = -1\n        this.nextScheduleTime = null\n      } catch (error) {\n        console.error('恢复状态失败:', error)\n        this.clearStorageData()\n        this.streamList = []\n      }\n    },\n\n    // 清理存储数据\n    clearStorageData() {\n      try {\n        localStorage.removeItem(this.stateKey)\n        for (let i = 0; ; i++) {\n          const key = `${this.stateKey}_streamList_${i}`\n          if (localStorage.getItem(key) === null) {\n            break\n          }\n          localStorage.removeItem(key)\n        }\n      } catch (error) {\n        console.error('清理存储数据失败:', error)\n      }\n    },\n    // 添加重置所有运行状态的方法\n    resetAllStates() {\n      // 停止定时检测\n      if (this.isScheduled) {\n        this.stopScheduleCheck()\n      }\n      \n      // 停止采集\n      if (this.isCollecting) {\n        this.stopCollecting()\n      }\n      \n      // 停止批量检测\n      if (this.isChecking) {\n        this.shouldStop = true\n        this.isChecking = false\n        this.isPaused = false\n      }\n      \n      // 重置所有状态\n      this.isChecking = false\n      this.isPaused = false\n      this.isScheduled = false\n      this.isCollecting = false\n      this.checkedCount = 0\n      this.totalCount = 0\n      this.pausedIndex = -1\n      this.nextScheduleTime = null\n      \n      // 清除所有定时器\n      if (this.scheduleTimer) {\n        clearInterval(this.scheduleTimer)\n        this.scheduleTimer = null\n      }\n      if (this.collectTimer) {\n        clearInterval(this.collectTimer)\n        this.collectTimer = null\n      }\n      \n      // 保存重置后的状态\n      this.saveState()\n      \n      this.$message.success('所有运行状态已重置')\n    },\n    // 更新活动状态\n    updateActiveStatus() {\n      const hasActive = this.isChecking || this.isCollecting || this.isScheduled\n      \n      if (this.hasActiveOperations !== hasActive) {\n        this.hasActiveOperations = hasActive\n        if (hasActive) {\n          // 添加刷新拦截\n          window.addEventListener('beforeunload', this.handleBeforeUnload)\n        } else {\n          // 移除刷新拦截\n          window.removeEventListener('beforeunload', this.handleBeforeUnload)\n        }\n      }\n    },\n    // 处理页面刷新\n    handleBeforeUnload(e) {\n      if (this.hasActiveOperations) {\n        const message = '有正在执行的操作，确定要离开吗？'\n        e.preventDefault()\n        e.returnValue = message\n        return message\n      }\n    },\n    addCollectUrl() {\n      if (!Array.isArray(this.collectForm.urls)) {\n        // 如果 urls 不是数组，先初始化它\n        this.$set(this.collectForm, 'urls', [''])\n      } else {\n        this.collectForm.urls.push('')\n      }\n    },\n    removeCollectUrl(index) {\n      if (Array.isArray(this.collectForm.urls) && this.collectForm.urls.length > 1) {\n        this.collectForm.urls.splice(index, 1)\n      }\n    },\n    // 添加判断分辨率标签类型的方法\n    getResolutionTagType(resolution) {\n      if (!resolution || resolution === '-') return 'info'\n      if (resolution === '多播源') return 'warning'  // 为多播源添加特殊样式\n      const [width] = resolution.split('x').map(Number)\n      if (width >= 1920) return 'success'\n      if (width >= 1280) return ''  // 默认类型\n      return 'warning'\n    },\n    // 添加判断响应时间标签类型的方法\n    getResponseTimeTagType(responseTime) {\n      if (!responseTime || responseTime === '-') return 'info'\n      const time = Number(responseTime)\n      if (time <= 1000) return 'success'\n      if (time <= 2000) return ''  // 默认类型\n      if (time <= 3000) return 'warning'\n      return 'danger'\n    },\n    setupCollectSchedule() {\n      // 清除现有定时器\n      if (this.collectTimer) {\n        clearInterval(this.collectTimer)\n      }\n\n      const calculateNextCollectTime = () => {\n        const now = new Date()\n        const [hours, minutes] = this.collectForm.executeTime.split(':').map(Number)\n        let nextTime = new Date(now)\n        nextTime.setHours(hours, minutes, 0, 0)\n\n        // 如果当前时间已经过了今天的执行时间，设置为明天\n        if (nextTime <= now) {\n          nextTime.setDate(nextTime.getDate() + 1)\n        }\n\n        // 如果是每周模式，调整到下一个符合条件的星期\n        if (this.collectForm.collectType === 'weekly') {\n          const targetDay = parseInt(this.collectForm.weekDay)\n          while (nextTime.getDay() !== targetDay) {\n            nextTime.setDate(nextTime.getDate() + 1)\n          }\n        }\n\n        return nextTime\n      }\n\n      const scheduleNextCollection = () => {\n        const nextTime = calculateNextCollectTime()\n        const delay = nextTime.getTime() - new Date().getTime()\n\n        // 设置下次执行的定时器\n        this.collectTimer = setTimeout(() => {\n          // 执行采集\n          this.collect()\n          // 设置下一次执行\n          scheduleNextCollection()\n        }, delay)\n      }\n\n      // 开始第一次调度\n      scheduleNextCollection()\n    },\n    handleSearch() {\n      this.filteredList = this.streamList.filter(item => {\n        const nameMatch = !this.searchForm.name || \n          item.name.toLowerCase().includes(this.searchForm.name.toLowerCase())\n        \n        const groupMatch = !this.searchForm.group || \n          item.group === this.searchForm.group\n        \n        const statusMatch = !this.searchForm.status || \n          item.status === this.searchForm.status\n        \n        return nameMatch && groupMatch && statusMatch\n      })\n      \n      // 重置到第一页\n      this.currentPage = 1\n      this.searchDialogVisible = false\n    },\n    resetSearch() {\n      this.searchForm = {\n        name: '',\n        group: '',\n        status: ''\n      }\n      this.filteredList = []\n      this.currentPage = 1\n    },\n    // 获取真实IP地址\n    async getRealIp() {\n      try {\n        const response = await fetch(`${this.getBaseUrl()}/api/local-ip`)\n        if (response.ok) {\n          const data = await response.json()\n          this.realIp = data.ip\n          localStorage.setItem('realIp', data.ip)  // 保存真实IP到localStorage\n        }\n      } catch (error) {\n        console.error('获取IP失败:', error)\n      }\n    },\n    // 获取基础URL\n    getBaseUrl() {\n      const useRealIp = localStorage.getItem('useRealIp') === 'true'\n      return useRealIp && this.realIp ? `http://${this.realIp}:8080` : 'http://localhost:8080'\n    },\n    async saveGithubSettings() {\n      try {\n        await this.$refs.syncForm.validate()\n\n        // 保存设置到localStorage\n        localStorage.setItem('githubToken', this.syncForm.token)\n        localStorage.setItem('githubRepo', this.syncForm.repo)\n        localStorage.setItem('githubTxtPath', this.syncForm.txtPath)\n        localStorage.setItem('githubM3uPath', this.syncForm.m3uPath)\n        localStorage.setItem('githubAutoSync', this.syncForm.autoSync)\n        localStorage.setItem('githubSyncType', this.syncForm.syncType)\n        localStorage.setItem('githubExecuteTime', this.syncForm.executeTime)\n        localStorage.setItem('githubWeekDay', this.syncForm.weekDay)\n\n        // 如果开启了自动同步，重新设置定时器\n        if (this.syncForm.autoSync) {\n          this.setupSyncSchedule()\n        } else {\n          this.clearSyncSchedule()\n        }\n\n        this.$message.success('设置已保存')\n        this.syncDialogVisible = false\n      } catch (error) {\n        this.$message.error(error.message || '保存失败')\n      }\n    },\n    async syncToGithub(content, path) {\n      const response = await fetch(`${this.getBaseUrl()}/api/sync-github`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          token: this.syncForm.token,\n          repo: this.syncForm.repo,\n          path: path,\n          content: content,\n          message: this.syncForm.message\n        })\n      })\n      \n      if (!response.ok) {\n        throw new Error('同步失败')\n      }\n    },\n    handleAutoSyncChange(value) {\n      if (value) {\n        this.setupSyncSchedule()\n      } else {\n        this.clearSyncSchedule()\n      }\n    },\n    setupSyncSchedule() {\n      this.clearSyncSchedule()\n      const calculateNextSyncTime = () => {\n        const now = new Date()\n        const [hours, minutes] = this.syncForm.executeTime.split(':').map(Number)\n        let nextTime = new Date(now)\n        nextTime.setHours(hours, minutes, 0, 0)\n\n        // 如果当前时间已经过了今天的执行时间，设置为明天\n        if (nextTime <= now) {\n          nextTime.setDate(nextTime.getDate() + 1)\n        }\n\n        // 如果是每周模式，调整到下一个符合条件的星期\n        if (this.syncForm.syncType === 'weekly') {\n          const targetDay = parseInt(this.syncForm.weekDay)\n          while (nextTime.getDay() !== targetDay) {\n            nextTime.setDate(nextTime.getDate() + 1)\n          }\n        }\n\n        return nextTime\n      }\n\n      const scheduleNextSync = () => {\n        const nextTime = calculateNextSyncTime()\n        const delay = nextTime.getTime() - new Date().getTime()\n\n        // 设置下次执行的定时器\n        this.syncTimer = setTimeout(async () => {\n          try {\n            // 执行同步\n            await this.syncToGithub(this.generateContent('txt'), this.syncForm.txtPath)\n            await this.syncToGithub(this.generateContent('m3u'), this.syncForm.m3uPath)\n            this.$message.success('已同步到GitHub')\n          } catch (error) {\n            this.$message.error('同步失败：' + error.message)\n          }\n          // 设置下一次执行\n          scheduleNextSync()\n        }, delay)\n      }\n\n      // 开始第一次调度\n      scheduleNextSync()\n    },\n    clearSyncSchedule() {\n      if (this.syncTimer) {\n        clearInterval(this.syncTimer)\n        this.syncTimer = null\n      }\n    },\n    getStatusTagType(status) {\n      switch (status) {\n        case '正常':\n          return 'success'\n        case '异常':\n          return 'danger'\n        case '未知':\n          return 'warning'\n        case '未检测':\n          return 'info'\n        default:\n          return 'info'\n      }\n    },\n    // 修改显示消息的方法\n    showMessage(content) {\n      // 如果是清除直播源的消息，使用新的消息系统\n      if (content.includes('已自动清除直播源') || content.includes('(')) {\n        const id = this.messageId++\n        const message = {\n          id,\n          content: content.includes('(') ? content : content.replace('已自动清除直播源：', '')\n        }\n        this.messages.push(message)\n        \n        // 3秒后自动移除消息\n        setTimeout(() => {\n          this.removeMessage(id)\n        }, 3000)\n        \n        // 最多显示3条消息\n        if (this.messages.length > 3) {\n          this.messages.shift()\n        }\n      } else {\n        // 其他消息使用 Element UI 的消息提示\n        this.$message.info(content)\n      }\n    },\n    \n    // 移除消息\n    removeMessage(id) {\n      const index = this.messages.findIndex(msg => msg.id === id)\n      if (index !== -1) {\n        this.messages.splice(index, 1)\n      }\n    },\n    // 修改清除直播源的提示\n    handleStreamRemoval(stream, reason) {\n      this.showMessage(`${stream.name} (${reason})`)\n    },\n    async checkUrlAccessibility() {\n      if (!this.importUrlForm.url) return\n      \n      this.importUrlForm.isChecking = true\n      this.importUrlForm.isAccessible = null\n      \n      try {\n        // 添加延迟，避免频繁请求\n        await new Promise(resolve => setTimeout(resolve, 500))\n        \n        const baseUrl = process.env.VUE_APP_API_URL || ''  // 从环境变量获取API基础URL\n        const response = await fetch(`${baseUrl}/api/check-url`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            url: this.importUrlForm.url\n          })\n        })\n        \n        if (!response.ok) throw new Error('请求失败')\n        const result = await response.json()\n        this.importUrlForm.isAccessible = result.accessible\n      } catch (error) {\n        console.error('检查链接可达性失败:', error)\n        this.importUrlForm.isAccessible = false\n      } finally {\n        this.importUrlForm.isChecking = false\n      }\n    },\n    async handleImportUrl() {\n      if (!this.importUrlForm.url) {\n        this.$message.warning('请输入文件链接')\n        return\n      }\n\n      try {\n        // 显示加载状态\n        this.importUrlForm.isChecking = true\n        \n        // 获取文件内容\n        const response = await fetch(this.importUrlForm.url)\n        if (!response.ok) throw new Error('获取文件失败')\n        \n        const content = await response.text()\n        const newStreams = this.parseContent(content)\n        \n        if (newStreams.length > 0) {\n          // 过滤重复的直播源\n          const existingUrls = new Set(this.streamList.map(s => s.url))\n          const uniqueStreams = newStreams.filter(s => !existingUrls.has(s.url))\n          \n          if (uniqueStreams.length > 0) {\n            this.streamList.push(...uniqueStreams)\n            this.$message.success(`成功导入 ${uniqueStreams.length} 个直播源`)\n            \n            // 导入后立即检查多播源\n            this.$nextTick(() => {\n              this.checkMulticastStreams()\n            })\n            \n            // 关闭对话框\n            this.importUrlDialogVisible = false\n          } else {\n            this.$message.info('没有新的直播源可以导入')\n          }\n        } else {\n          this.$message.warning('未找到有效的直播源')\n        }\n      } catch (error) {\n        console.error('导入网络文件失败:', error)\n        this.$message.error('导入失败：' + error.message)\n      } finally {\n        this.importUrlForm.isChecking = false\n      }\n    },\n    getPlaceholderText() {\n      switch (this.collectForm.mode) {\n        case 'tv':\n          return '请输入包含央视或卫视频道的网络地址'\n        default:\n          return '请输入需要采集的网络地址'\n      }\n    },\n    async handleCollectUrlsFileUpload(event) {\n      const file = event.target.files[0]\n      if (!file) return\n\n      try {\n        const content = await this.readFile(file)\n        // 按行分割并过滤空行\n        const urls = content.split('\\n')\n          .map(line => line.trim())\n          .filter(line => line && line.length > 0)\n        \n        if (urls.length === 0) {\n          this.$message.warning('文件中未找到有效的URL地址')\n          return\n        }\n\n        // 验证URL格式\n        const invalidUrls = urls.filter(url => !/^https?:\\/\\/.+/.test(url))\n        if (invalidUrls.length > 0) {\n          this.$message.warning(`发现 ${invalidUrls.length} 个无效的URL地址`)\n          return\n        }\n\n        // 更新采集地址列表\n        this.collectForm.urls = urls\n        this.$message.success(`成功导入 ${urls.length} 个采集地址`)\n      } catch (error) {\n        this.$message.error('读取文件失败：' + error.message)\n      } finally {\n        // 清除文件输入，允许重复选择同一文件\n        event.target.value = ''\n      }\n    },\n  },\n  watch: {\n    // 只监听数据变化\n    streamList: {\n      handler() {\n        this.updateLinkContent()\n        this.saveState()\n      },\n      deep: true\n    },\n    currentPage() {\n      this.saveState()\n    },\n    pageSize() {\n      this.saveState()\n    },\n    // 监听所有可能的运行状态\n    isChecking() {\n      this.updateActiveStatus()\n    },\n    isCollecting() {\n      this.updateActiveStatus()\n    },\n    isScheduled() {\n      this.updateActiveStatus()\n    },\n    // 添加格式变化监听\n    'linkForm.format'() {\n      if (this.generateLinkDialogVisible) {\n        this.handleGenerateLink()\n      }\n    }\n  },\n  // 组件被激活时（重新显示）\n  activated() {\n    // 如果有定时任务，恢复定时器\n    if (this.isScheduled) {\n      this.setupSchedule()\n    }\n    // 如果有采集任务，且不是从其他页面切换回来，才恢复采集\n    if (this.isCollecting && !this.isPageSwitching) {\n      this.startCollecting(true)\n    }\n    // 如果有GitHub自动同步，恢复同步定时器\n    if (this.syncForm.autoSync) {\n      this.setupSyncSchedule()\n    }\n    // 重置页面切换标志\n    this.isPageSwitching = false\n  },\n  // 组件被停用时（离开但不销毁）\n  deactivated() {\n    // 设置页面切换标志\n    this.isPageSwitching = true\n    // 暂停定时器，但保持状态标志\n    if (this.scheduleTimer) {\n      clearInterval(this.scheduleTimer)\n      this.scheduleTimer = null\n    }\n    // 暂停采集定时器，但保持状态标志\n    if (this.collectTimer) {\n      clearInterval(this.collectTimer)\n      this.collectTimer = null\n    }\n    // 暂停同步定时器，但保持状态标志\n    if (this.syncTimer) {\n      clearInterval(this.syncTimer)\n      this.syncTimer = null\n    }\n  }\n}\n</script>\n\n<style scoped>\n.stream-check {\n  padding: 25px;\n  background-color: #fff;\n  border-radius: 4px;\n  height: calc(100vh - 130px);\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  position: relative;\n}\n\n.table-operations {\n  margin-bottom: 20px;\n  flex-shrink: 0;\n}\n\n.button-groups {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  align-items: center;\n}\n\n.button-group {\n  display: flex;\n  align-items: center;\n}\n\n/* 确保按钮组在小屏幕上不会被压缩 */\n:deep(.el-button-group) {\n  white-space: nowrap;\n  margin: 0;\n}\n\n/* 确保按钮内容不会换行 */\n:deep(.el-button) {\n  white-space: nowrap;\n}\n\n/* 在较小屏幕上调整按钮大小 */\n@media screen and (max-width: 768px) {\n  :deep(.el-button) {\n    padding: 8px 15px;\n    font-size: 12px;\n  }\n  \n  :deep(.el-button [class*=\"el-icon-\"]) {\n    font-size: 14px;\n  }\n}\n\n/* 在更小的屏幕上进一步调整 */\n@media screen and (max-width: 576px) {\n  .button-groups {\n    gap: 5px;\n  }\n  \n  :deep(.el-button) {\n    padding: 6px 10px;\n    font-size: 12px;\n  }\n}\n\n/* 添加表格容器样式 */\n.el-table-wrapper {\n  flex: 1;\n  position: relative; /* 添加相对定位 */\n  min-height: 200px; /* 设置最小高度 */\n}\n\n/* 覆盖 element-ui 的表格样式 */\n:deep(.el-table) {\n  position: absolute; /* 绝对定位 */\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  height: 100%;\n  max-height: 100%;\n}\n\n:deep(.el-table__body-wrapper) {\n  height: calc(100% - 40px) !important; /* 减去表头高度 */\n  overflow-y: auto !important;\n}\n\n:deep(.el-table__fixed-right) {\n  height: 100% !important; /* 修复固定列的高度 */\n  bottom: 0px;\n}\n\n:deep(.el-table__fixed-right .el-table__fixed-body-wrapper) {\n  height: calc(100% - 40px) !important; /* 减去表头高度 */\n}\n\n.pagination-container {\n  margin-top: 20px;\n  display: flex;\n  justify-content: center;\n  flex-shrink: 0; /* 防止分页被压缩 */\n  padding-bottom: 10px; /* 添加底部间距 */\n  background-color: #fff; /* 确保分页器背景色 */\n  position: relative; /* 添加相对定位 */\n  z-index: 1; /* 确保分页器在最上层 */\n}\n\n.el-button [class*=\"el-icon-\"] {\n  font-size: 18px;\n}\n\n.delete-btn {\n  color: #F56C6C;\n}\n\n.delete-btn:hover {\n  color: #ff4d4d;\n}\n\n.setting-tip {\n  margin-left: 10px;\n  color: #909399;\n  font-size: 13px;\n}\n\n.link-info {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.link-info p {\n  margin: 0;\n  color: #606266;\n}\n\n.link-actions {\n  display: flex;\n  gap: 10px;\n  justify-content: flex-end;\n  margin-top: 10px;\n}\n\n/* 生成链接对话框样式 */\n.generate-link-dialog {\n  max-width: 600px;\n}\n\n.link-container {\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n}\n\n.link-card, .tips-card {\n  margin: 0;\n  border: 1px solid #EBEEF5;\n}\n\n.link-content {\n  padding: 10px;\n}\n\n.tips-content {\n  color: #606266;\n  font-size: 14px;\n  padding: 10px;\n}\n\n.tips-content ul {\n  margin: 0;\n  padding-left: 20px;\n  line-height: 1.8;\n}\n\n/* 覆盖 element-ui 的一些默认样式 */\n:deep(.el-dialog__body) {\n  padding: 20px;\n}\n\n:deep(.el-card__header) {\n  padding: 12px 20px;\n  font-weight: 500;\n}\n\n:deep(.el-card__body) {\n  padding: 15px;\n}\n\n/* 可以添加一些自定义样式 */\n.el-tag {\n  width: 90px;  /* 统一标签宽度 */\n}\n\n.el-tag + .el-tag {\n  margin-left: 4px;\n}\n\n/* 修改消息面板样式 */\n.message-panel {\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  width: 300px;\n  z-index: 9999;\n  pointer-events: none;\n  opacity: 0;\n  transition: opacity 0.3s;\n}\n\n.message-panel.has-messages {\n  opacity: 1;\n}\n\n.message-item {\n  background: rgba(64, 158, 255, 0.95);\n  color: white;\n  border-radius: 4px;\n  padding: 10px 15px;\n  margin-bottom: 8px;\n  box-shadow: 0 2px 12px 0 rgba(0,0,0,.1);\n  display: flex;\n  align-items: center;\n  font-size: 14px;\n  transition: all 0.3s;\n}\n\n.message-item i {\n  margin-right: 8px;\n  font-size: 16px;\n}\n\n.message-content {\n  flex: 1;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n/* 消息动画 */\n.message-list-enter-active, .message-list-leave-active {\n  transition: all 0.3s;\n}\n\n.message-list-enter {\n  transform: translateY(100%);\n  opacity: 0;\n}\n\n.message-list-leave-to {\n  transform: translateX(100%);\n  opacity: 0;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}