{"ast":null,"code":"export default {\n  name: 'StreamCheck',\n  data() {\n    return {\n      loading: false,\n      streamList: [],\n      importUrlDialogVisible: false,\n      importForm: {\n        url: '',\n        group: ''\n      },\n      importRules: {\n        url: [{\n          required: true,\n          message: '请输入URL地址',\n          trigger: 'blur'\n        }, {\n          type: 'url',\n          message: '请输入正确的URL地址',\n          trigger: ['blur', 'change']\n        }],\n        group: [{\n          required: true,\n          message: '请选择分组',\n          trigger: 'change'\n        }]\n      },\n      currentPage: 1,\n      pageSize: 5,\n      isChecking: false,\n      isPaused: false,\n      checkedCount: 0,\n      totalCount: 0,\n      pausedIndex: -1,\n      shouldStop: false,\n      isCollecting: false,\n      collectDialogVisible: false,\n      collectForm: {\n        urls: [''],\n        autoCollect: false,\n        collectType: 'daily',\n        executeTime: '09:00',\n        weekDay: '1'\n      },\n      collectRules: {\n        urls: [{\n          type: 'array',\n          validator: (rule, value, callback) => {\n            if (value.length === 0) {\n              callback(new Error('请至少添加一个采集地址'));\n            }\n            // 验证每个URL\n            const errors = value.map(url => {\n              if (!url) return '采集地址不能为空';\n              if (!/^https?:\\/\\/.+/.test(url)) return '请输入正确的URL地址';\n              return null;\n            }).filter(error => error !== null);\n            if (errors.length > 0) {\n              callback(new Error(errors[0]));\n            } else {\n              callback();\n            }\n          },\n          trigger: 'change'\n        }],\n        executeTime: [{\n          required: true,\n          message: '请选择执行时间',\n          trigger: 'change'\n        }],\n        weekDay: [{\n          required: true,\n          message: '请选择执行日期',\n          trigger: 'change'\n        }]\n      },\n      collectTimer: null,\n      generateLinkDialogVisible: false,\n      generatedLink: '',\n      previewContent: '',\n      // 新增预览内容\n      currentLinkId: '',\n      scheduleDialogVisible: false,\n      isScheduled: false,\n      scheduleForm: {\n        scheduleType: 'daily',\n        executeTime: '09:00',\n        weekDay: '1'\n      },\n      scheduleRules: {\n        executeTime: [{\n          required: true,\n          message: '请选择执行时间',\n          trigger: 'change'\n        }],\n        weekDay: [{\n          required: true,\n          message: '请选择执行日期',\n          trigger: 'change'\n        }]\n      },\n      scheduleTimer: null,\n      nextScheduleTime: null,\n      stateKey: 'streamCheckState',\n      // 用于本地存储的key\n      hasActiveOperations: false,\n      // 添加标记表示是否有动作在执行\n      linkForm: {\n        format: 'txt' // 默认txt格式\n      },\n      searchDialogVisible: false,\n      searchForm: {\n        name: '',\n        group: '',\n        status: ''\n      },\n      filteredList: [],\n      // 用于存储搜索过滤后的列表\n      realIp: '',\n      // 存储真实IP地址\n      syncDialogVisible: false,\n      syncForm: {\n        token: localStorage.getItem('githubToken') || '',\n        repo: localStorage.getItem('githubRepo') || '',\n        txtPath: localStorage.getItem('githubTxtPath') || '',\n        m3uPath: localStorage.getItem('githubM3uPath') || '',\n        autoSync: localStorage.getItem('githubAutoSync') === 'true',\n        syncType: localStorage.getItem('githubSyncType') || 'daily',\n        executeTime: localStorage.getItem('githubExecuteTime') || '00:00',\n        weekDay: localStorage.getItem('githubWeekDay') || '1',\n        message: '更新直播源列表'\n      },\n      syncRules: {\n        token: [{\n          required: true,\n          message: '请输入GitHub Token',\n          trigger: 'blur'\n        }],\n        repo: [{\n          required: true,\n          message: '请输入仓库名称',\n          trigger: 'blur'\n        }, {\n          pattern: /^[\\w-]+\\/[\\w-]+$/,\n          message: '格式：用户名/仓库名',\n          trigger: 'blur'\n        }],\n        txtPath: [{\n          required: true,\n          message: '请输入文件路径',\n          trigger: 'blur'\n        }],\n        m3uPath: [{\n          required: true,\n          message: '请输入文件路径',\n          trigger: 'blur'\n        }],\n        message: [{\n          required: true,\n          message: '请输入提交消息',\n          trigger: 'blur'\n        }]\n      },\n      syncTimer: null\n    };\n  },\n  computed: {\n    paginatedData() {\n      // 使用过滤后的列表进行分页\n      const start = (this.currentPage - 1) * this.pageSize;\n      const end = start + this.pageSize;\n      return (this.filteredList.length > 0 ? this.filteredList : this.streamList).slice(start, end);\n    },\n    checkButtonText() {\n      if (!this.isChecking && !this.isPaused) {\n        return '批量检测';\n      }\n      return `检测中 ${this.checkedCount}/${this.totalCount}`;\n    },\n    mergedStreams() {\n      // 创建一个Map来存储合并后的直播源\n      const streamMap = new Map();\n\n      // 按照当前列表顺序处理每个直播源\n      this.streamList.forEach(stream => {\n        const key = stream.name; // 使用名称作为键\n\n        if (streamMap.has(key)) {\n          // 如果已存在相同名称的直播源，添加到URLs数组\n          const existing = streamMap.get(key);\n          if (!existing.urls.includes(stream.url)) {\n            existing.urls.push(stream.url);\n          }\n        } else {\n          // 如果是新的名称，创建新条目\n          streamMap.set(key, {\n            name: stream.name,\n            urls: [stream.url],\n            group: stream.group\n          });\n        }\n      });\n\n      // 转换回数组格式\n      return Array.from(streamMap.values());\n    },\n    groupOptions() {\n      return [...new Set(this.streamList.map(item => item.group))];\n    }\n  },\n  created() {\n    // 初始化时加载持久化的数据\n    if (localStorage.getItem('persistentData') === 'true') {\n      const savedList = localStorage.getItem('streamList');\n      if (savedList) {\n        this.streamList = JSON.parse(savedList);\n        // 初始化时检查多播源\n        this.$nextTick(() => {\n          this.checkMulticastStreams(); // 使用新方法\n        });\n      }\n    }\n\n    // 监听保存事件\n    this.$root.$on('save-stream-list', this.saveStreamList);\n\n    // 监听设置更新事件\n    this.$root.$on('settings-updated', this.handleSettingsUpdate);\n\n    // 从本地存储恢复状态\n    this.restoreState();\n\n    // 如果定时检测是开启状态，重新启动定时器\n    if (this.isScheduled) {\n      this.setupSchedule();\n    }\n    // 如果采集是开启状态，重新启动采集\n    if (this.isCollecting) {\n      this.startCollecting(true); // true表示是恢复状态\n    }\n    // 如果GitHub自动同步是开启状态，重新启动同步定时器\n    if (this.syncForm.autoSync) {\n      this.setupSyncSchedule();\n    }\n    this.filteredList = [];\n    this.getRealIp(); // 获取真实IP地址\n  },\n  beforeDestroy() {\n    // 移除事件监听\n    this.$root.$off('save-stream-list', this.saveStreamList);\n    this.$root.$off('settings-updated', this.handleSettingsUpdate);\n    // 组件销毁前清除定时器\n    if (this.collectTimer) {\n      clearInterval(this.collectTimer);\n    }\n    // 组件销毁时清理定时器\n    this.stopScheduleCheck();\n    // 在组件销毁前保存状态\n    this.saveState();\n    window.removeEventListener('beforeunload', this.handleBeforeUnload);\n  },\n  methods: {\n    // 添加处理设置更新的方法\n    handleSettingsUpdate(event) {\n      console.log('收到设置更新事件:', event);\n      if (event && event.type === 'settings-changed' && event.settings) {\n        console.log('设置已更新，当前设置:', event.settings);\n        // 重新检查所有多播源\n        this.$nextTick(() => {\n          this.checkMulticastStreams();\n        });\n      }\n    },\n    // 添加多播源检测的辅助方法\n    isMulticastStream(url) {\n      if (!url) return false;\n\n      // 更完整的多播源检测正则表达式\n      const patterns = [\n      // 标准格式\n      /[/](udp|rtp)[/]239\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /[/](udp|rtp)[/]225\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /[/](udp|rtp)[/]224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n      // 带@的格式\n      /^(udp|rtp):\\/\\/@239\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /^(udp|rtp):\\/\\/@225\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /^(udp|rtp):\\/\\/@224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n      // 不带@的格式\n      /^(udp|rtp):\\/\\/239\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /^(udp|rtp):\\/\\/225\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /^(udp|rtp):\\/\\/224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n      // IPv6格式\n      /^(udp|rtp):\\/\\/\\[239\\.\\d+\\.\\d+\\.\\d+\\]:\\d+/i, /^(udp|rtp):\\/\\/\\[225\\.\\d+\\.\\d+\\.\\d+\\]:\\d+/i, /^(udp|rtp):\\/\\/\\[224\\.\\d+\\.\\d+\\.\\d+\\]:\\d+/i,\n      // 其他常见格式\n      /^(udp|rtp):\\/\\/@?239\\.\\d+\\.\\d+\\.\\d+[/]\\d+/i, /^(udp|rtp):\\/\\/@?225\\.\\d+\\.\\d+\\.\\d+[/]\\d+/i, /^(udp|rtp):\\/\\/@?224\\.\\d+\\.\\d+\\.\\d+[/]\\d+/i,\n      // 简单格式\n      /^udp\\/@239\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /^rtp\\/@239\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /^udp\\/@225\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /^rtp\\/@225\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /^udp\\/@224\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /^rtp\\/@224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n      // 带端口的格式\n      /^(udp|rtp):\\/\\/@?239\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /^(udp|rtp):\\/\\/@?225\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /^(udp|rtp):\\/\\/@?224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n      // 特殊格式\n      /^(udp|rtp)[/](239|225|224)\\.\\d+\\.\\d+\\.\\d+[/]?(\\d+)?/i, /^(udp|rtp):\\/\\/(239|225|224)\\.\\d+\\.\\d+\\.\\d+[/]?(\\d+)?/i,\n      // HTTP代理的UDP/RTP多播源格式\n      /http:\\/\\/[^/]+[/](udp|rtp)[/]224\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /http:\\/\\/[^/]+[/](udp|rtp)[/]225\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /http:\\/\\/[^/]+[/](udp|rtp)[/]239\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n      // HTTPS代理的UDP/RTP多播源格式\n      /https:\\/\\/[^/]+[/](udp|rtp)[/]224\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /https:\\/\\/[^/]+[/](udp|rtp)[/]225\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /https:\\/\\/[^/]+[/](udp|rtp)[/]239\\.\\d+\\.\\d+\\.\\d+:\\d+/i];\n\n      // 先转换为小写进行检查\n      const lowerUrl = url.toLowerCase();\n      return patterns.some(pattern => pattern.test(lowerUrl));\n    },\n    // 检查多播源的方法\n    checkMulticastStreams() {\n      try {\n        const appSettings = localStorage.getItem('appSettings');\n        if (!appSettings) {\n          console.log('未找到设置配置');\n          return;\n        }\n        let settings;\n        try {\n          settings = JSON.parse(appSettings);\n        } catch (e) {\n          console.error('解析设置失败:', e);\n          return;\n        }\n\n        // 如果启用了自动清除多播源\n        if (settings.autoRemoveMulticast === true) {\n          console.log('开始检查多播源...');\n          let removedCount = 0;\n          const toRemove = [];\n\n          // 检查所有流\n          this.streamList.forEach((stream, index) => {\n            if (this.isMulticastStream(stream.url)) {\n              toRemove.push(index);\n              removedCount++;\n              console.log('发现多播源:', stream.url);\n            }\n          });\n\n          // 从后向前删除\n          for (let i = toRemove.length - 1; i >= 0; i--) {\n            const index = toRemove[i];\n            const stream = this.streamList[index];\n            console.log('正在删除多播源:', stream.name, stream.url);\n            this.streamList.splice(index, 1);\n          }\n          if (removedCount > 0) {\n            console.log(`成功清除 ${removedCount} 个多播源`);\n            this.$message.warning(`已自动清除 ${removedCount} 个多播源`);\n            this.saveStreamList();\n\n            // 如果当前页没有数据，跳转到上一页\n            if (this.paginatedData.length === 0 && this.currentPage > 1) {\n              this.currentPage--;\n            }\n          }\n        }\n      } catch (error) {\n        console.error('检查多播源失败:', error);\n      }\n    },\n    async checkStream(stream) {\n      // 优先从 appSettings 中读取 FFprobe 路径\n      let ffprobePath = '';\n      try {\n        const appSettings = localStorage.getItem('appSettings');\n        if (appSettings) {\n          const settings = JSON.parse(appSettings);\n          ffprobePath = settings.ffprobePath;\n        }\n      } catch (error) {\n        console.error('读取 appSettings 失败:', error);\n      }\n\n      // 如果 appSettings 中没有，则从独立设置中读取\n      if (!ffprobePath) {\n        ffprobePath = localStorage.getItem('ffprobePath');\n      }\n      if (!ffprobePath) {\n        console.error('未找到 FFprobe 路径配置');\n        this.$message.error('请先在系统设置中配置FFprobe路径');\n        return false;\n      }\n\n      // 检查是否是多播源\n      if (this.isMulticastStream(stream.url)) {\n        // 直接返回false，不再设置状态\n        return false;\n      }\n      try {\n        const response = await fetch(`${this.getBaseUrl()}/api/check-stream`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            url: stream.url,\n            ffprobePath: ffprobePath\n          })\n        });\n        if (!response.ok) throw new Error('请求失败');\n        const result = await response.json();\n\n        // 更新流信息\n        stream.status = result.available ? '正常' : '异常';\n        stream.resolution = result.resolution || '-';\n        stream.responseTime = result.responseTime || '-';\n\n        // 检查是否需要自动清除\n        if (!result.available || this.shouldRemoveStream(stream)) {\n          let reason = '';\n          if (!result.available || stream.status === '异常') {\n            reason = '异常源';\n          } else if (stream.responseTime > 3000) {\n            reason = '响应时间过慢';\n          } else {\n            reason = '分辨率过低';\n          }\n\n          // 找到当前页的所有项\n          const currentPageItems = this.paginatedData;\n          // 找到要删除项在当前页的索引\n          const pageIndex = currentPageItems.indexOf(stream);\n          // 找到要删除项在整个列表中的索引\n          const listIndex = this.streamList.indexOf(stream);\n          if (listIndex > -1) {\n            this.streamList.splice(listIndex, 1);\n            // 如果删除的是当前页的最后一项，且不是第一页，则跳转到上一页\n            if (pageIndex === currentPageItems.length - 1 && this.currentPage > 1) {\n              this.currentPage--;\n            }\n            // 添加删除原因提示\n            console.log(`清除直播源: ${stream.name}, 原因: ${reason}`);\n            this.$message.warning(`已自动清除直播源：${reason}`);\n          }\n        }\n        this.saveStreamList();\n        return result.available;\n      } catch (error) {\n        console.error('检测错误:', error);\n        stream.status = '异常';\n\n        // 如果设置了自动清除异常源，在这里也进行清除\n        if (this.shouldRemoveStream(stream)) {\n          const currentPageItems = this.paginatedData;\n          const pageIndex = currentPageItems.indexOf(stream);\n          const listIndex = this.streamList.indexOf(stream);\n          if (listIndex > -1) {\n            this.streamList.splice(listIndex, 1);\n            if (pageIndex === currentPageItems.length - 1 && this.currentPage > 1) {\n              this.currentPage--;\n            }\n            console.log(`清除异常直播源: ${stream.name}, 原因: 检测失败`);\n            this.$message.warning('已自动清除直播源：检测失败');\n          }\n        }\n        this.saveStreamList();\n        return false;\n      }\n    },\n    shouldRemoveStream(stream) {\n      try {\n        // 获取设置\n        const appSettings = localStorage.getItem('appSettings');\n        let settings = {};\n        if (appSettings) {\n          settings = JSON.parse(appSettings);\n        }\n\n        // 检查是否需要清除异常源\n        if (settings.autoRemoveInvalid === true && (stream.status === '异常' || stream.status === '未知')) {\n          console.log(`应清除异常源: ${stream.name}, 状态: ${stream.status}`);\n          return true;\n        }\n\n        // 获取模式设置\n        const extremeMode = settings.extremeMode === true;\n        const strictMode = settings.strictMode === true;\n\n        // 检查是否需要清除低分辨率源\n        if (settings.autoRemoveLowRes === true && stream.resolution !== '未知' && stream.resolution !== '多播源' && stream.resolution !== '-') {\n          const [width, height] = stream.resolution.split('x').map(Number);\n          if (extremeMode ? width < 1920 || height < 1080 : strictMode ? width < 1920 || height < 1080 : width < 1280 || height < 720) {\n            console.log(`应清除低分辨率源: ${stream.name}, 分辨率: ${stream.resolution}`);\n            return true;\n          }\n        }\n\n        // 检查响应时间\n        if (settings.autoRemoveSlowResponse === true && stream.responseTime !== '-' && Number(stream.responseTime) > (extremeMode ? 1500 : strictMode ? 2000 : 3000)) {\n          console.log(`应清除慢速源: ${stream.name}, 响应时间: ${stream.responseTime}ms`);\n          return true;\n        }\n        return false;\n      } catch (error) {\n        console.error('检查是否应该移除流时出错:', error);\n        return false;\n      }\n    },\n    async handleBatchCheck() {\n      if (this.isChecking) return;\n      const uncheckedStreams = this.streamList.filter(s => !this.isPaused || this.streamList.indexOf(s) > this.pausedIndex);\n      if (uncheckedStreams.length === 0) {\n        this.$message.info('没有需要检测的直播源');\n        return;\n      }\n      this.isChecking = true;\n      this.shouldStop = false;\n      this.totalCount = uncheckedStreams.length;\n      this.checkedCount = this.isPaused ? this.checkedCount : 0;\n\n      // 获取并发检测数量设置\n      const concurrentChecks = parseInt(localStorage.getItem('concurrentChecks')) || 3;\n      try {\n        // 从暂停的位置或开始位置继续检测\n        const startIndex = this.isPaused ? this.pausedIndex + 1 : 0;\n\n        // 分批处理，每批次处理固定数量的流\n        const batchSize = Math.min(concurrentChecks, 10); // 限制最大并发数\n\n        for (let i = startIndex; i < uncheckedStreams.length; i += batchSize) {\n          if (this.shouldStop) break;\n\n          // 获取当前批次要检测的流\n          const batch = uncheckedStreams.slice(i, i + batchSize);\n\n          // 并发检测当前批次的所有流\n          await Promise.all(batch.map(async stream => {\n            if (this.shouldStop) return;\n            try {\n              stream.status = '检测中';\n              const success = await this.checkStream(stream);\n              this.checkedCount++;\n              if (success) {\n                this.saveState();\n              }\n            } catch (error) {\n              console.error('检测流失败:', error);\n              stream.status = '异常';\n              this.checkedCount++;\n            }\n          }));\n\n          // 更新暂停位置\n          this.pausedIndex = i + batchSize - 1;\n\n          // 每批次完成后保存状态\n          this.saveState();\n        }\n        if (!this.shouldStop) {\n          this.isChecking = false;\n          this.isPaused = false;\n          this.pausedIndex = -1;\n          this.$message.success('批量检测完成');\n\n          // 检查是否需要在批量检测完成后同步\n          if (this.syncForm.autoSync && this.syncForm.syncType === 'afterCheck') {\n            await this.syncToGithub(this.generateContent('txt'), this.syncForm.txtPath);\n            await this.syncToGithub(this.generateContent('m3u'), this.syncForm.m3uPath);\n            this.$message.success('已同步到GitHub');\n          }\n        }\n      } catch (error) {\n        console.error('批量检测错误:', error);\n        this.$message.error('批量检测失败');\n      } finally {\n        if (this.shouldStop) {\n          this.isChecking = false;\n          this.isPaused = true;\n          this.$message.info('检测已暂停');\n        }\n      }\n    },\n    pauseCheck() {\n      this.shouldStop = true;\n    },\n    async resumeCheck() {\n      if (this.pausedIndex >= 0) {\n        this.isChecking = true;\n        this.isPaused = false;\n        this.shouldStop = false;\n        await this.batchCheck(this.pausedIndex);\n      }\n    },\n    async handleCheck(row) {\n      row.status = '检测中';\n      const success = await this.checkStream(row);\n      this.$message[success ? 'success' : 'error'](`检测${success ? '成功' : '失败'}: ${row.name}`);\n    },\n    handleDelete(row) {\n      this.$confirm('确认删除该直播源?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        const index = this.streamList.indexOf(row);\n        this.streamList.splice(index, 1);\n        const maxPage = Math.ceil(this.streamList.length / this.pageSize);\n        if (this.currentPage > maxPage) {\n          this.currentPage = Math.max(maxPage, 1);\n        }\n        this.saveStreamList(); // 保存更新后的列表\n        this.$message.success('删除成功');\n      }).catch(() => {});\n    },\n    async handleUrlImport() {\n      const valid = await this.$refs.importForm.validate();\n      if (!valid) return;\n      try {\n        const response = await fetch(`${this.getBaseUrl()}/api/import-url`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            url: this.importForm.url\n          })\n        });\n        if (!response.ok) throw new Error('导入失败');\n        const content = await response.text();\n        const newStreams = this.parseContent(content);\n        if (newStreams.length > 0) {\n          // 过滤重复的直播源\n          const existingUrls = new Set(this.streamList.map(s => s.url));\n          const uniqueStreams = newStreams.filter(s => !existingUrls.has(s.url));\n          if (uniqueStreams.length > 0) {\n            this.streamList.push(...uniqueStreams);\n            this.$message.success(`成功导入 ${uniqueStreams.length} 个直播源`);\n            this.importUrlDialogVisible = false;\n\n            // 导入后立即检查多播源\n            this.$nextTick(() => {\n              this.checkMulticastStreams();\n            });\n          } else {\n            this.$message.info('没有新的直播源可以导入');\n          }\n        } else {\n          this.$message.warning('未找到有效的直播源');\n        }\n      } catch (error) {\n        this.$message.error('导入失败：' + error.message);\n      }\n    },\n    readFile(file) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = e => resolve(e.target.result);\n        reader.onerror = () => reject(new Error('文件读取失败'));\n        reader.readAsText(file);\n      });\n    },\n    parseContent(content) {\n      const lines = content.split('\\n');\n      const streams = [];\n      let currentGroup = '未分组';\n\n      // 检测是否是 m3u 格式\n      if (content.includes('#EXTM3U')) {\n        let currentName = '';\n        let currentGroupTitle = '';\n        lines.forEach(line => {\n          line = line.trim();\n          if (!line) return;\n          if (line.startsWith('#EXTINF:')) {\n            // 尝试不同的名称提取方式\n            let name = '';\n\n            // 1. 尝试提取 tvg-name 属性\n            const tvgNameMatch = line.match(/tvg-name=\"([^\"]+)\"/i);\n            if (tvgNameMatch) {\n              name = tvgNameMatch[1].trim();\n            }\n\n            // 2. 如果没有 tvg-name，尝试提取最后的逗号后的名称\n            if (!name) {\n              const lastCommaIndex = line.lastIndexOf(',');\n              if (lastCommaIndex !== -1) {\n                name = line.substring(lastCommaIndex + 1).trim();\n              }\n            }\n\n            // 3. 如果还是没有名称，尝试提取 tvg-id\n            if (!name) {\n              const tvgIdMatch = line.match(/tvg-id=\"([^\"]+)\"/i);\n              if (tvgIdMatch) {\n                name = tvgIdMatch[1].trim();\n              } else {\n                // 3.1 尝试提取不带引号的 tvg-id\n                const tvgIdNoQuoteMatch = line.match(/tvg-id=([^,\\s]+)/i);\n                if (tvgIdNoQuoteMatch) {\n                  name = tvgIdNoQuoteMatch[1].trim();\n                }\n              }\n            }\n            currentName = name || '未命名';\n\n            // 提取分组信息\n            // 1. 先尝试带引号的 group-title\n            const groupMatch = line.match(/group-title=\"([^\"]+)\"/i);\n            if (groupMatch) {\n              currentGroupTitle = groupMatch[1].trim();\n            } else {\n              // 2. 尝试不带引号的 group-title\n              const groupNoQuoteMatch = line.match(/group-title=([^,\\s]+)/i);\n              if (groupNoQuoteMatch) {\n                currentGroupTitle = groupNoQuoteMatch[1].trim();\n              }\n            }\n          } else if (!line.startsWith('#') && line.trim()) {\n            // 这是一个媒体URL行\n            // 在添加流之前先检查是否是多播源\n            if (currentName && !this.isMulticastStream(line.trim())) {\n              streams.push({\n                name: currentName,\n                url: line.trim(),\n                group: currentGroupTitle || currentGroup,\n                status: '未检测',\n                resolution: '-',\n                responseTime: '-'\n              });\n            }\n            currentName = ''; // 重置当前名称\n          }\n        });\n      } else {\n        // txt 格式处理\n        lines.forEach(line => {\n          line = line.trim();\n          if (!line) return;\n\n          // 检查是否是分组标记\n          if (line.endsWith(',#genre#')) {\n            currentGroup = line.replace(',#genre#', '');\n            return;\n          }\n\n          // 解析直播源行\n          const [name, urls] = line.split(',');\n          if (!name || !urls) return;\n\n          // 检查是否包含多个URL（用#分隔）\n          const urlList = urls.split('#');\n\n          // 为每个URL创建一个新的直播源条目，但排除多播源\n          urlList.forEach(url => {\n            if (url && url.trim() && !this.isMulticastStream(url.trim())) {\n              streams.push({\n                name: name,\n                url: url.trim(),\n                group: currentGroup,\n                status: '未检测',\n                resolution: '-',\n                responseTime: '-'\n              });\n            }\n          });\n        });\n      }\n      return streams;\n    },\n    addStreamsToList(streams) {\n      streams.forEach(stream => {\n        this.streamList.push(stream);\n      });\n      this.currentPage = 1;\n      this.saveStreamList(); // 保存更新后的列表\n    },\n    handleSizeChange(val) {\n      this.pageSize = val;\n      // 当每页条数改变时，重置当前页为第一页\n      this.currentPage = 1;\n    },\n    handleCurrentChange(val) {\n      this.currentPage = val;\n    },\n    async handleFileUpload(event) {\n      const file = event.target.files[0];\n      if (!file) return;\n      try {\n        const content = await this.readFile(file);\n        const newStreams = this.parseContent(content);\n        if (newStreams.length > 0) {\n          // 过滤重复的直播源\n          const existingUrls = new Set(this.streamList.map(s => s.url));\n          const uniqueStreams = newStreams.filter(s => !existingUrls.has(s.url));\n          if (uniqueStreams.length > 0) {\n            this.streamList.push(...uniqueStreams);\n            this.$message.success(`成功导入 ${uniqueStreams.length} 个直播源`);\n\n            // 导入后立即检查多播源\n            this.$nextTick(() => {\n              this.checkMulticastStreams();\n            });\n          } else {\n            this.$message.info('没有新的直播源可以导入');\n          }\n        } else {\n          this.$message.warning('未找到有效的直播源');\n        }\n      } catch (error) {\n        this.$message.error('文件读取失败：' + error.message);\n      } finally {\n        // 清除文件输入，允许重复选择同一文件\n        event.target.value = '';\n      }\n    },\n    getGroupFromFileName(filename) {\n      // 从文件名中提取可能的分组名\n      const name = filename.toLowerCase();\n      if (name.includes('cctv')) return 'CCTV';\n      if (name.includes('卫视')) return '卫视';\n      if (name.includes('地方')) return '地方台';\n      return '未分组';\n    },\n    handleClearList() {\n      this.$confirm('确认清空列表吗？', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        // 只重置批量检测相关的状态\n        this.streamList = [];\n        this.currentPage = 1;\n        this.isChecking = false;\n        this.isPaused = false;\n        this.checkIndex = 0;\n\n        // 更新链接内容和保存状态\n        this.updateLinkContent();\n        this.saveState();\n        this.$message({\n          type: 'success',\n          message: '列表已清空'\n        });\n      }).catch(() => {\n        this.$message({\n          type: 'info',\n          message: '已取消清空'\n        });\n      });\n    },\n    handleCopy(row) {\n      // 创建一个临时输入框来实现复制功能\n      const textarea = document.createElement('textarea');\n      textarea.value = row.url;\n      document.body.appendChild(textarea);\n      textarea.select();\n      try {\n        document.execCommand('copy');\n        this.$message.success('链接已复制到剪贴板');\n      } catch (err) {\n        this.$message.error('复制失败');\n      } finally {\n        document.body.removeChild(textarea);\n      }\n    },\n    saveStreamList() {\n      if (localStorage.getItem('persistentData') === 'true') {\n        localStorage.setItem('streamList', JSON.stringify(this.streamList));\n      }\n    },\n    handleCollectMode() {\n      if (this.isCollecting) {\n        this.stopCollecting();\n      } else {\n        this.collectDialogVisible = true;\n      }\n    },\n    async startCollecting(isRestore = false) {\n      if (!isRestore) {\n        // 确保 urls 是数组\n        if (!Array.isArray(this.collectForm.urls)) {\n          this.$set(this.collectForm, 'urls', ['']);\n          return;\n        }\n        const valid = await this.$refs.collectForm.validate();\n        if (!valid) return;\n      }\n      this.collectDialogVisible = false;\n      this.isCollecting = true;\n      this.saveState(); // 保存状态\n\n      // 立即执行一次采集\n      await this.collect();\n\n      // 如果开启了自动采集，设置定时器\n      if (this.collectForm.autoCollect) {\n        this.setupCollectSchedule();\n      } else {\n        // 单次采集完成后停止\n        this.isCollecting = false;\n        this.saveState();\n      }\n    },\n    stopCollecting() {\n      this.isCollecting = false;\n      if (this.collectTimer) {\n        clearInterval(this.collectTimer);\n        this.collectTimer = null;\n      }\n      this.saveState(); // 保存状态\n      // 只有在自动采集模式下才显示停止提示\n      if (this.collectForm.autoCollect) {\n        this.$message.success('已停止采集');\n      }\n    },\n    async collect() {\n      try {\n        // 检查是否有检测正在进行\n        if (this.isChecking) {\n          this.$message.warning('检测正在进行中，暂时跳过本次采集');\n          return;\n        }\n        this.$message.info('开始采集直播源...');\n\n        // 并发采集所有地址\n        const results = await Promise.allSettled(this.collectForm.urls.map(async url => {\n          try {\n            const response = await fetch(`${this.getBaseUrl()}/api/collect-url?url=${encodeURIComponent(url)}`, {\n              method: 'GET',\n              headers: {\n                'Accept': 'text/plain'\n              }\n            });\n            if (!response.ok) throw new Error(`采集失败: ${url}`);\n            const content = await response.text();\n            const newStreams = this.parseContent(content);\n\n            // 过滤重复的直播源，同时考虑正在检测的源\n            const existingUrls = new Set(this.streamList.map(s => s.url));\n            return newStreams.filter(s => {\n              // 如果源已存在且正在检测中，保留原有状态\n              const existingStream = this.streamList.find(es => es.url === s.url);\n              if (existingStream && existingStream.status === '检测中') {\n                return false;\n              }\n              return !existingUrls.has(s.url);\n            });\n          } catch (error) {\n            console.error(`采集地址 ${url} 失败:`, error);\n            return [];\n          }\n        }));\n\n        // 合并所有采集结果\n        const allNewStreams = results.filter(result => result.status === 'fulfilled').flatMap(result => result.value).filter((stream, index, self) => index === self.findIndex(s => s.url === stream.url));\n\n        // 添加新的直播源到列表\n        if (allNewStreams.length > 0) {\n          this.addStreamsToList(allNewStreams);\n          this.$message.success(`采集成功: 新增${allNewStreams.length}个直播源`);\n        } else {\n          this.$message.info('未发现新的直播源');\n        }\n\n        // 统计失败的地址\n        const failedUrls = results.filter(result => result.status === 'rejected').length;\n        if (failedUrls > 0) {\n          this.$message.warning(`${failedUrls}个地址采集失败`);\n        }\n      } catch (error) {\n        this.$message.error('采集失败：' + error.message);\n        if (!this.collectForm.autoCollect) {\n          this.stopCollecting();\n        }\n      }\n    },\n    async handleGenerateLink() {\n      this.generateLinkDialogVisible = true;\n      try {\n        // 先生成 TXT 格式链接\n        const txtResponse = await fetch(`${this.getBaseUrl()}/api/generate-link`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain',\n            'X-File-Format': 'txt'\n          },\n          body: this.generateContent('txt')\n        });\n\n        // 再生成 M3U 格式链接\n        const m3uResponse = await fetch(`${this.getBaseUrl()}/api/generate-link`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain',\n            'X-File-Format': 'm3u'\n          },\n          body: this.generateContent('m3u')\n        });\n        if (txtResponse.ok && m3uResponse.ok) {\n          const txtLink = await txtResponse.text();\n          const m3uLink = await m3uResponse.text();\n\n          // 根据当前选择的格式显示对应的链接\n          this.generatedLinks = {\n            txt: txtLink,\n            m3u: m3uLink\n          };\n          this.generatedLink = this.generatedLinks[this.linkForm.format];\n        }\n      } catch (error) {\n        console.error('生成链接失败：', error);\n        this.$message.error('生成链接失败');\n      }\n    },\n    generateContent(format) {\n      return format === 'txt' ? this.generateTxtContent() : this.generateM3uContent();\n    },\n    generateTxtContent() {\n      let content = '';\n      let currentGroup = '';\n\n      // 对每个分组内的直播源按响应速度排序\n      const sortedStreams = [...this.mergedStreams].sort((a, b) => {\n        if (a.group !== b.group) return 0; // 不同分组不改变顺序\n        const aTime = Number(a.responseTime) || Infinity;\n        const bTime = Number(b.responseTime) || Infinity;\n        return aTime - bTime;\n      });\n      sortedStreams.forEach(stream => {\n        if (stream.group !== currentGroup) {\n          currentGroup = stream.group;\n          content += `${currentGroup},#genre#\\n`;\n        }\n        content += `${stream.name},${stream.urls.join('#')}\\n`;\n      });\n      return content.trim();\n    },\n    generateM3uContent() {\n      let content = '#EXTM3U\\n';\n      let currentGroup = '';\n\n      // 对每个分组内的直播源按响应速度排序\n      const sortedStreams = [...this.mergedStreams].sort((a, b) => {\n        if (a.group !== b.group) return 0; // 不同分组不改变顺序\n        const aTime = Number(a.responseTime) || Infinity;\n        const bTime = Number(b.responseTime) || Infinity;\n        return aTime - bTime;\n      });\n      sortedStreams.forEach(stream => {\n        if (stream.group !== currentGroup) {\n          currentGroup = stream.group;\n          content += `\\n#EXTINF:-1 group-title=\"${currentGroup}\"\\n`;\n        }\n        stream.urls.forEach(url => {\n          content += `#EXTINF:-1,${stream.name}\\n${url}\\n`;\n        });\n      });\n      return content.trim();\n    },\n    copyGeneratedLink() {\n      const textarea = document.createElement('textarea');\n      textarea.value = this.generatedLink;\n      document.body.appendChild(textarea);\n      textarea.select();\n      try {\n        document.execCommand('copy');\n        this.$message.success('链接已复制到剪贴板');\n      } catch (err) {\n        this.$message.error('复制失败');\n      } finally {\n        document.body.removeChild(textarea);\n      }\n    },\n    downloadTxtFile() {\n      const blob = new Blob([this.generatedLink], {\n        type: 'text/plain;charset=utf-8'\n      });\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `直播源列表_${new Date().toLocaleDateString()}.txt`;\n      document.body.appendChild(link);\n      link.click();\n\n      // 清理\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(link);\n      this.$message.success('文件下载成功');\n    },\n    // 修改更新链接内容的方法\n    async updateLinkContent() {\n      try {\n        // 更新 TXT 格式内容\n        await fetch(`${this.getBaseUrl()}/api/update-content`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain',\n            'X-File-Format': 'txt'\n          },\n          body: this.generateContent('txt')\n        });\n\n        // 更新 M3U 格式内容\n        await fetch(`${this.getBaseUrl()}/api/update-content`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain',\n            'X-File-Format': 'm3u'\n          },\n          body: this.generateContent('m3u')\n        });\n      } catch (error) {\n        console.error('更新链接内容失败：', error);\n      }\n    },\n    handleScheduleCheck() {\n      if (this.isScheduled) {\n        this.stopScheduleCheck();\n      } else {\n        this.scheduleDialogVisible = true;\n      }\n    },\n    startScheduleCheck() {\n      this.$refs.scheduleForm.validate(valid => {\n        if (valid) {\n          this.scheduleDialogVisible = false;\n          this.isScheduled = true;\n          this.setupSchedule();\n          this.saveState(); // 保存状态\n          this.$message.success('定时检测已开启');\n        }\n      });\n    },\n    stopScheduleCheck() {\n      if (this.scheduleTimer) {\n        clearInterval(this.scheduleTimer);\n        this.scheduleTimer = null;\n      }\n      this.isScheduled = false;\n      this.nextScheduleTime = null;\n      this.saveState(); // 保存状态\n      this.$message.success('定时检测已停止');\n    },\n    setupSchedule() {\n      // 清除现有定时器\n      if (this.scheduleTimer) {\n        clearInterval(this.scheduleTimer);\n      }\n      const calculateNextExecutionTime = () => {\n        const now = new Date();\n        const [hours, minutes] = this.scheduleForm.executeTime.split(':').map(Number);\n        let nextTime = new Date(now);\n        nextTime.setHours(hours, minutes, 0, 0);\n\n        // 如果当前时间已经过了今天的执行时间，设置为明天\n        if (nextTime <= now) {\n          nextTime.setDate(nextTime.getDate() + 1);\n        }\n\n        // 如果是每周模式，调整到下一个符合条件的星期\n        if (this.scheduleForm.scheduleType === 'weekly') {\n          const targetDay = parseInt(this.scheduleForm.weekDay);\n          while (nextTime.getDay() !== targetDay) {\n            nextTime.setDate(nextTime.getDate() + 1);\n          }\n        }\n        return nextTime;\n      };\n      const scheduleNextExecution = () => {\n        const nextTime = calculateNextExecutionTime();\n        const delay = nextTime.getTime() - new Date().getTime();\n\n        // 更新下次执行时间显示\n        this.nextScheduleTime = nextTime;\n\n        // 设置下次执行的定时器\n        this.scheduleTimer = setTimeout(() => {\n          // 如果当前正在检测中，等待检测完成后再执行\n          if (!this.isChecking) {\n            this.handleBatchCheck();\n          }\n          // 设置下一次执行\n          scheduleNextExecution();\n        }, delay);\n      };\n\n      // 开始第一次调度\n      scheduleNextExecution();\n    },\n    // 保存当前状态到本地存储\n    saveState() {\n      try {\n        // 清除旧的分块数据\n        this.clearStorageData();\n\n        // 只保存必要的数据字段，减少数据量\n        const minimalStreamList = this.streamList.map(stream => ({\n          name: stream.name,\n          url: stream.url,\n          group: stream.group,\n          status: stream.status,\n          resolution: stream.resolution || '',\n          responseTime: stream.responseTime || 0\n        }));\n\n        // 将streamList分块存储，减小分块大小\n        const streamListStr = JSON.stringify(minimalStreamList);\n        const chunkSize = 100000; // 减小到100KB\n        const chunks = Math.ceil(streamListStr.length / chunkSize);\n\n        // 如果数据量太大，只保存基本信息\n        if (chunks > 10) {\n          console.warn('数据量过大，只保存基本状态信息');\n          const basicState = {\n            currentPage: this.currentPage,\n            pageSize: this.pageSize,\n            scheduleForm: this.scheduleForm,\n            collectForm: this.collectForm\n          };\n          localStorage.setItem(this.stateKey, JSON.stringify(basicState));\n          return;\n        }\n\n        // 分块存储\n        for (let i = 0; i < chunks; i++) {\n          const chunk = streamListStr.slice(i * chunkSize, (i + 1) * chunkSize);\n          try {\n            localStorage.setItem(`${this.stateKey}_streamList_${i}`, chunk);\n          } catch (e) {\n            console.error('存储分块失败:', e);\n            this.clearStorageData();\n            // 尝试只保存基本信息\n            const basicState = {\n              currentPage: this.currentPage,\n              pageSize: this.pageSize,\n              scheduleForm: this.scheduleForm,\n              collectForm: this.collectForm\n            };\n            localStorage.setItem(this.stateKey, JSON.stringify(basicState));\n            return;\n          }\n        }\n\n        // 存储其他状态数据\n        const state = {\n          currentPage: this.currentPage,\n          pageSize: this.pageSize,\n          scheduleForm: this.scheduleForm,\n          collectForm: this.collectForm,\n          streamListChunks: chunks\n        };\n        localStorage.setItem(this.stateKey, JSON.stringify(state));\n      } catch (error) {\n        console.error('保存状态失败:', error);\n        this.clearStorageData();\n        // 尝试只保存基本信息\n        try {\n          const basicState = {\n            currentPage: this.currentPage,\n            pageSize: this.pageSize\n          };\n          localStorage.setItem(this.stateKey, JSON.stringify(basicState));\n        } catch (e) {\n          console.error('保存基本状态也失败:', e);\n        }\n      }\n    },\n    // 从本地存储恢复状态\n    restoreState() {\n      try {\n        const savedState = localStorage.getItem(this.stateKey);\n        if (savedState) {\n          const state = JSON.parse(savedState);\n\n          // 恢复streamList\n          if (state.streamListChunks) {\n            try {\n              let streamListStr = '';\n              for (let i = 0; i < state.streamListChunks; i++) {\n                const chunk = localStorage.getItem(`${this.stateKey}_streamList_${i}`);\n                if (chunk) {\n                  streamListStr += chunk;\n                }\n              }\n              if (streamListStr) {\n                this.streamList = JSON.parse(streamListStr);\n              }\n            } catch (e) {\n              console.error('恢复streamList失败:', e);\n              this.streamList = [];\n            }\n          }\n\n          // 恢复其他状态\n          this.currentPage = state.currentPage || 1;\n          this.pageSize = state.pageSize || 5;\n          if (state.scheduleForm) this.scheduleForm = state.scheduleForm;\n          if (state.collectForm) this.collectForm = state.collectForm;\n        }\n\n        // 重置所有运行状态\n        this.isChecking = false;\n        this.isPaused = false;\n        this.isScheduled = false;\n        this.isCollecting = false;\n        this.checkedCount = 0;\n        this.totalCount = 0;\n        this.pausedIndex = -1;\n        this.nextScheduleTime = null;\n      } catch (error) {\n        console.error('恢复状态失败:', error);\n        this.clearStorageData();\n        this.streamList = [];\n      }\n    },\n    // 清理存储数据\n    clearStorageData() {\n      try {\n        localStorage.removeItem(this.stateKey);\n        for (let i = 0;; i++) {\n          const key = `${this.stateKey}_streamList_${i}`;\n          if (localStorage.getItem(key) === null) {\n            break;\n          }\n          localStorage.removeItem(key);\n        }\n      } catch (error) {\n        console.error('清理存储数据失败:', error);\n      }\n    },\n    // 添加重置所有运行状态的方法\n    resetAllStates() {\n      // 停止定时检测\n      if (this.isScheduled) {\n        this.stopScheduleCheck();\n      }\n\n      // 停止采集\n      if (this.isCollecting) {\n        this.stopCollecting();\n      }\n\n      // 停止批量检测\n      if (this.isChecking) {\n        this.shouldStop = true;\n        this.isChecking = false;\n        this.isPaused = false;\n      }\n\n      // 重置所有状态\n      this.isChecking = false;\n      this.isPaused = false;\n      this.isScheduled = false;\n      this.isCollecting = false;\n      this.checkedCount = 0;\n      this.totalCount = 0;\n      this.pausedIndex = -1;\n      this.nextScheduleTime = null;\n\n      // 清除所有定时器\n      if (this.scheduleTimer) {\n        clearInterval(this.scheduleTimer);\n        this.scheduleTimer = null;\n      }\n      if (this.collectTimer) {\n        clearInterval(this.collectTimer);\n        this.collectTimer = null;\n      }\n\n      // 保存重置后的状态\n      this.saveState();\n      this.$message.success('所有运行状态已重置');\n    },\n    // 更新活动状态\n    updateActiveStatus() {\n      const hasActive = this.isChecking || this.isCollecting || this.isScheduled;\n      if (this.hasActiveOperations !== hasActive) {\n        this.hasActiveOperations = hasActive;\n        if (hasActive) {\n          // 添加刷新拦截\n          window.addEventListener('beforeunload', this.handleBeforeUnload);\n        } else {\n          // 移除刷新拦截\n          window.removeEventListener('beforeunload', this.handleBeforeUnload);\n        }\n      }\n    },\n    // 处理页面刷新\n    handleBeforeUnload(e) {\n      if (this.hasActiveOperations) {\n        const message = '有正在执行的操作，确定要离开吗？';\n        e.preventDefault();\n        e.returnValue = message;\n        return message;\n      }\n    },\n    addCollectUrl() {\n      if (!Array.isArray(this.collectForm.urls)) {\n        // 如果 urls 不是数组，先初始化它\n        this.$set(this.collectForm, 'urls', ['']);\n      } else {\n        this.collectForm.urls.push('');\n      }\n    },\n    removeCollectUrl(index) {\n      if (Array.isArray(this.collectForm.urls) && this.collectForm.urls.length > 1) {\n        this.collectForm.urls.splice(index, 1);\n      }\n    },\n    // 添加判断分辨率标签类型的方法\n    getResolutionTagType(resolution) {\n      if (!resolution || resolution === '-') return 'info';\n      if (resolution === '多播源') return 'warning'; // 为多播源添加特殊样式\n      const [width] = resolution.split('x').map(Number);\n      if (width >= 1920) return 'success';\n      if (width >= 1280) return ''; // 默认类型\n      return 'warning';\n    },\n    // 添加判断响应时间标签类型的方法\n    getResponseTimeTagType(responseTime) {\n      if (!responseTime || responseTime === '-') return 'info';\n      const time = Number(responseTime);\n      if (time <= 1000) return 'success';\n      if (time <= 2000) return ''; // 默认类型\n      if (time <= 3000) return 'warning';\n      return 'danger';\n    },\n    setupCollectSchedule() {\n      // 清除现有定时器\n      if (this.collectTimer) {\n        clearInterval(this.collectTimer);\n      }\n      const calculateNextCollectTime = () => {\n        const now = new Date();\n        const [hours, minutes] = this.collectForm.executeTime.split(':').map(Number);\n        let nextTime = new Date(now);\n        nextTime.setHours(hours, minutes, 0, 0);\n\n        // 如果当前时间已经过了今天的执行时间，设置为明天\n        if (nextTime <= now) {\n          nextTime.setDate(nextTime.getDate() + 1);\n        }\n\n        // 如果是每周模式，调整到下一个符合条件的星期\n        if (this.collectForm.collectType === 'weekly') {\n          const targetDay = parseInt(this.collectForm.weekDay);\n          while (nextTime.getDay() !== targetDay) {\n            nextTime.setDate(nextTime.getDate() + 1);\n          }\n        }\n        return nextTime;\n      };\n      const scheduleNextCollection = () => {\n        const nextTime = calculateNextCollectTime();\n        const delay = nextTime.getTime() - new Date().getTime();\n\n        // 设置下次执行的定时器\n        this.collectTimer = setTimeout(() => {\n          // 执行采集\n          this.collect();\n          // 设置下一次执行\n          scheduleNextCollection();\n        }, delay);\n      };\n\n      // 开始第一次调度\n      scheduleNextCollection();\n    },\n    handleSearch() {\n      this.filteredList = this.streamList.filter(item => {\n        const nameMatch = !this.searchForm.name || item.name.toLowerCase().includes(this.searchForm.name.toLowerCase());\n        const groupMatch = !this.searchForm.group || item.group === this.searchForm.group;\n        const statusMatch = !this.searchForm.status || item.status === this.searchForm.status;\n        return nameMatch && groupMatch && statusMatch;\n      });\n\n      // 重置到第一页\n      this.currentPage = 1;\n      this.searchDialogVisible = false;\n    },\n    resetSearch() {\n      this.searchForm = {\n        name: '',\n        group: '',\n        status: ''\n      };\n      this.filteredList = [];\n      this.currentPage = 1;\n    },\n    // 获取真实IP地址\n    async getRealIp() {\n      try {\n        const response = await fetch(`${this.getBaseUrl()}/api/local-ip`);\n        if (response.ok) {\n          const data = await response.json();\n          this.realIp = data.ip;\n          localStorage.setItem('realIp', data.ip); // 保存真实IP到localStorage\n        }\n      } catch (error) {\n        console.error('获取IP失败:', error);\n      }\n    },\n    // 获取基础URL\n    getBaseUrl() {\n      const useRealIp = localStorage.getItem('useRealIp') === 'true';\n      return useRealIp && this.realIp ? `http://${this.realIp}:8080` : 'http://localhost:8080';\n    },\n    async saveGithubSettings() {\n      try {\n        await this.$refs.syncForm.validate();\n\n        // 保存设置到localStorage\n        localStorage.setItem('githubToken', this.syncForm.token);\n        localStorage.setItem('githubRepo', this.syncForm.repo);\n        localStorage.setItem('githubTxtPath', this.syncForm.txtPath);\n        localStorage.setItem('githubM3uPath', this.syncForm.m3uPath);\n        localStorage.setItem('githubAutoSync', this.syncForm.autoSync);\n        localStorage.setItem('githubSyncType', this.syncForm.syncType);\n        localStorage.setItem('githubExecuteTime', this.syncForm.executeTime);\n        localStorage.setItem('githubWeekDay', this.syncForm.weekDay);\n\n        // 如果开启了自动同步，重新设置定时器\n        if (this.syncForm.autoSync) {\n          this.setupSyncSchedule();\n        } else {\n          this.clearSyncSchedule();\n        }\n        this.$message.success('设置已保存');\n        this.syncDialogVisible = false;\n      } catch (error) {\n        this.$message.error(error.message || '保存失败');\n      }\n    },\n    async syncToGithub(content, path) {\n      const response = await fetch(`${this.getBaseUrl()}/api/sync-github`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          token: this.syncForm.token,\n          repo: this.syncForm.repo,\n          path: path,\n          content: content,\n          message: this.syncForm.message\n        })\n      });\n      if (!response.ok) {\n        throw new Error('同步失败');\n      }\n    },\n    handleAutoSyncChange(value) {\n      if (value) {\n        this.setupSyncSchedule();\n      } else {\n        this.clearSyncSchedule();\n      }\n    },\n    setupSyncSchedule() {\n      this.clearSyncSchedule();\n      const calculateNextSyncTime = () => {\n        const now = new Date();\n        const [hours, minutes] = this.syncForm.executeTime.split(':').map(Number);\n        let nextTime = new Date(now);\n        nextTime.setHours(hours, minutes, 0, 0);\n\n        // 如果当前时间已经过了今天的执行时间，设置为明天\n        if (nextTime <= now) {\n          nextTime.setDate(nextTime.getDate() + 1);\n        }\n\n        // 如果是每周模式，调整到下一个符合条件的星期\n        if (this.syncForm.syncType === 'weekly') {\n          const targetDay = parseInt(this.syncForm.weekDay);\n          while (nextTime.getDay() !== targetDay) {\n            nextTime.setDate(nextTime.getDate() + 1);\n          }\n        }\n        return nextTime;\n      };\n      const scheduleNextSync = () => {\n        const nextTime = calculateNextSyncTime();\n        const delay = nextTime.getTime() - new Date().getTime();\n\n        // 设置下次执行的定时器\n        this.syncTimer = setTimeout(async () => {\n          try {\n            // 执行同步\n            await this.syncToGithub(this.generateContent('txt'), this.syncForm.txtPath);\n            await this.syncToGithub(this.generateContent('m3u'), this.syncForm.m3uPath);\n            this.$message.success('已同步到GitHub');\n          } catch (error) {\n            this.$message.error('同步失败：' + error.message);\n          }\n          // 设置下一次执行\n          scheduleNextSync();\n        }, delay);\n      };\n\n      // 开始第一次调度\n      scheduleNextSync();\n    },\n    clearSyncSchedule() {\n      if (this.syncTimer) {\n        clearInterval(this.syncTimer);\n        this.syncTimer = null;\n      }\n    },\n    getStatusTagType(status) {\n      switch (status) {\n        case '正常':\n          return 'success';\n        case '异常':\n          return 'danger';\n        case '未知':\n          return 'warning';\n        case '未检测':\n          return 'info';\n        default:\n          return 'info';\n      }\n    }\n  },\n  watch: {\n    // 只监听数据变化\n    streamList: {\n      handler() {\n        this.updateLinkContent();\n        this.saveState();\n      },\n      deep: true\n    },\n    currentPage() {\n      this.saveState();\n    },\n    pageSize() {\n      this.saveState();\n    },\n    // 监听所有可能的运行状态\n    isChecking() {\n      this.updateActiveStatus();\n    },\n    isCollecting() {\n      this.updateActiveStatus();\n    },\n    isScheduled() {\n      this.updateActiveStatus();\n    },\n    // 添加格式变化监听\n    'linkForm.format'() {\n      if (this.generateLinkDialogVisible) {\n        this.handleGenerateLink();\n      }\n    }\n  },\n  // 组件被激活时（重新显示）\n  activated() {\n    // 如果有定时任务，恢复定时器\n    if (this.isScheduled) {\n      this.setupSchedule();\n    }\n    // 如果有采集任务，恢复采集\n    if (this.isCollecting) {\n      this.startCollecting(true);\n    }\n    // 如果有GitHub自动同步，恢复同步定时器\n    if (this.syncForm.autoSync) {\n      this.setupSyncSchedule();\n    }\n  },\n  // 组件被停用时（离开但不销毁）\n  deactivated() {\n    // 暂停定时器，但保持状态标志\n    if (this.scheduleTimer) {\n      clearInterval(this.scheduleTimer);\n      this.scheduleTimer = null;\n    }\n    // 暂停采集定时器，但保持状态标志\n    if (this.collectTimer) {\n      clearInterval(this.collectTimer);\n      this.collectTimer = null;\n    }\n    // 暂停同步定时器，但保持状态标志\n    if (this.syncTimer) {\n      clearInterval(this.syncTimer);\n      this.syncTimer = null;\n    }\n  }\n};","map":{"version":3,"names":["name","data","loading","streamList","importUrlDialogVisible","importForm","url","group","importRules","required","message","trigger","type","currentPage","pageSize","isChecking","isPaused","checkedCount","totalCount","pausedIndex","shouldStop","isCollecting","collectDialogVisible","collectForm","urls","autoCollect","collectType","executeTime","weekDay","collectRules","validator","rule","value","callback","length","Error","errors","map","test","filter","error","collectTimer","generateLinkDialogVisible","generatedLink","previewContent","currentLinkId","scheduleDialogVisible","isScheduled","scheduleForm","scheduleType","scheduleRules","scheduleTimer","nextScheduleTime","stateKey","hasActiveOperations","linkForm","format","searchDialogVisible","searchForm","status","filteredList","realIp","syncDialogVisible","syncForm","token","localStorage","getItem","repo","txtPath","m3uPath","autoSync","syncType","syncRules","pattern","syncTimer","computed","paginatedData","start","end","slice","checkButtonText","mergedStreams","streamMap","Map","forEach","stream","key","has","existing","get","includes","push","set","Array","from","values","groupOptions","Set","item","created","savedList","JSON","parse","$nextTick","checkMulticastStreams","$root","$on","saveStreamList","handleSettingsUpdate","restoreState","setupSchedule","startCollecting","setupSyncSchedule","getRealIp","beforeDestroy","$off","clearInterval","stopScheduleCheck","saveState","window","removeEventListener","handleBeforeUnload","methods","event","console","log","settings","isMulticastStream","patterns","lowerUrl","toLowerCase","some","appSettings","e","autoRemoveMulticast","removedCount","toRemove","index","i","splice","$message","warning","checkStream","ffprobePath","response","fetch","getBaseUrl","method","headers","body","stringify","ok","result","json","available","resolution","responseTime","shouldRemoveStream","reason","currentPageItems","pageIndex","indexOf","listIndex","autoRemoveInvalid","extremeMode","strictMode","autoRemoveLowRes","width","height","split","Number","autoRemoveSlowResponse","handleBatchCheck","uncheckedStreams","s","info","concurrentChecks","parseInt","startIndex","batchSize","Math","min","batch","Promise","all","success","syncToGithub","generateContent","pauseCheck","resumeCheck","batchCheck","handleCheck","row","handleDelete","$confirm","confirmButtonText","cancelButtonText","then","maxPage","ceil","max","catch","handleUrlImport","valid","$refs","validate","content","text","newStreams","parseContent","existingUrls","uniqueStreams","readFile","file","resolve","reject","reader","FileReader","onload","target","onerror","readAsText","lines","streams","currentGroup","currentName","currentGroupTitle","line","trim","startsWith","tvgNameMatch","match","lastCommaIndex","lastIndexOf","substring","tvgIdMatch","tvgIdNoQuoteMatch","groupMatch","groupNoQuoteMatch","endsWith","replace","urlList","addStreamsToList","handleSizeChange","val","handleCurrentChange","handleFileUpload","files","getGroupFromFileName","filename","handleClearList","checkIndex","updateLinkContent","handleCopy","textarea","document","createElement","appendChild","select","execCommand","err","removeChild","setItem","handleCollectMode","stopCollecting","isRestore","isArray","$set","collect","setupCollectSchedule","results","allSettled","encodeURIComponent","existingStream","find","es","allNewStreams","flatMap","self","findIndex","failedUrls","handleGenerateLink","txtResponse","m3uResponse","txtLink","m3uLink","generatedLinks","txt","m3u","generateTxtContent","generateM3uContent","sortedStreams","sort","a","b","aTime","Infinity","bTime","join","copyGeneratedLink","downloadTxtFile","blob","Blob","URL","createObjectURL","link","href","download","Date","toLocaleDateString","click","revokeObjectURL","handleScheduleCheck","startScheduleCheck","calculateNextExecutionTime","now","hours","minutes","nextTime","setHours","setDate","getDate","targetDay","getDay","scheduleNextExecution","delay","getTime","setTimeout","clearStorageData","minimalStreamList","streamListStr","chunkSize","chunks","warn","basicState","chunk","state","streamListChunks","savedState","removeItem","resetAllStates","updateActiveStatus","hasActive","addEventListener","preventDefault","returnValue","addCollectUrl","removeCollectUrl","getResolutionTagType","getResponseTimeTagType","time","calculateNextCollectTime","scheduleNextCollection","handleSearch","nameMatch","statusMatch","resetSearch","ip","useRealIp","saveGithubSettings","clearSyncSchedule","path","handleAutoSyncChange","calculateNextSyncTime","scheduleNextSync","getStatusTagType","watch","handler","deep","linkForm.format","activated","deactivated"],"sources":["src/components/StreamCheck.vue"],"sourcesContent":["<template>\n  <div class=\"stream-check\">\n\n    <div class=\"table-operations\">\n      <div class=\"button-groups\">\n        <div class=\"button-group\">\n          <el-button-group>\n            <el-button\n                type=\"primary\"\n                icon=\"el-icon-upload2\"\n                @click=\"$refs.fileInput.click()\"\n                :disabled=\"isCollecting\">\n              导入本地文件\n            </el-button>\n            <el-button\n                type=\"primary\"\n                icon=\"el-icon-download\"\n                @click=\"importUrlDialogVisible = true\"\n                :disabled=\"isCollecting\">\n              导入网络文件\n            </el-button>\n          </el-button-group>\n        </div>\n\n        <div class=\"button-group\">\n          <el-button-group>\n            <el-button\n                type=\"success\"\n                icon=\"el-icon-refresh\"\n                @click=\"handleBatchCheck\"\n                :loading=\"isChecking\">\n              {{ checkButtonText }}\n            </el-button>\n            <el-button\n                v-if=\"isChecking\"\n                type=\"warning\"\n                icon=\"el-icon-video-pause\"\n                @click=\"pauseCheck\">\n              暂停检测\n            </el-button>\n            <el-button\n                v-if=\"isPaused\"\n                type=\"primary\"\n                icon=\"el-icon-video-play\"\n                @click=\"resumeCheck\">\n              继续检测\n            </el-button>\n            <el-button\n                type=\"danger\"\n                icon=\"el-icon-delete\"\n                @click=\"handleClearList\">\n              清空列表\n            </el-button>\n          </el-button-group>\n        </div>\n\n        <div class=\"button-group\">\n          <el-button-group>\n            <el-button\n                :type=\"isCollecting ? 'danger' : 'primary'\"\n                icon=\"el-icon-connection\"\n                @click=\"handleCollectMode\">\n              {{ isCollecting ? '停止采集' : '采集模式' }}\n            </el-button>\n          </el-button-group>\n        </div>\n\n        <div class=\"button-group\">\n          <el-button-group>\n            <el-button\n                type=\"primary\"\n                icon=\"el-icon-link\"\n                @click=\"handleGenerateLink\">\n              生成链接\n            </el-button>\n            <el-button\n                type=\"success\"\n                icon=\"el-icon-upload\"\n                @click=\"syncDialogVisible = true\">\n              同步到GitHub\n            </el-button>\n          </el-button-group>\n        </div>\n\n        <div class=\"button-group\">\n          <el-button-group>\n            <el-button\n                :type=\"isScheduled ? 'danger' : 'primary'\"\n                icon=\"el-icon-timer\"\n                @click=\"handleScheduleCheck\">\n              {{ isScheduled ? '停止定时' : '定时检测' }}\n            </el-button>\n          </el-button-group>\n        </div>\n\n        <div class=\"button-group\">\n          <el-button-group>\n            <el-button\n                :type=\"filteredList.length > 0 ? 'danger' : 'primary'\"\n                icon=\"el-icon-search\"\n                @click=\"filteredList.length > 0 ? resetSearch() : searchDialogVisible = true\">\n              {{ filteredList.length > 0 ? '重置' : '搜索' }}\n            </el-button>\n          </el-button-group>\n        </div>\n      </div>\n\n      <!-- 隐藏的文件输入框 -->\n      <input\n          type=\"file\"\n          ref=\"fileInput\"\n          style=\"display: none\"\n          accept=\".txt,.m3u,.m3u8\"\n          @change=\"handleFileUpload\"\n      >\n    </div>\n\n    <div class=\"el-table-wrapper\">\n      <el-table\n          :data=\"paginatedData\"\n          border\n          style=\"width: 100%\">\n        <el-table-column\n            prop=\"name\"\n            label=\"名称\"\n            min-width=\"120\"\n            align=\"center\">\n        </el-table-column>\n\n        <el-table-column\n            prop=\"url\"\n            label=\"链接\"\n            min-width=\"200\"\n            align=\"center\"\n            show-overflow-tooltip>\n        </el-table-column>\n\n        <el-table-column\n            prop=\"resolution\"\n            label=\"分辨率\"\n            width=\"120\"\n            align=\"center\">\n          <template slot-scope=\"scope\">\n            <el-tag\n                :type=\"getResolutionTagType(scope.row.resolution)\">\n              {{ scope.row.resolution || '未知' }}\n            </el-tag>\n          </template>\n        </el-table-column>\n\n        <el-table-column\n            prop=\"responseTime\"\n            label=\"响应速度\"\n            width=\"120\"\n            align=\"center\">\n          <template slot-scope=\"scope\">\n            <el-tag\n                :type=\"getResponseTimeTagType(scope.row.responseTime)\">\n              {{ scope.row.responseTime === '-' ? '-' : scope.row.responseTime + 'ms' }}\n            </el-tag>\n          </template>\n        </el-table-column>\n\n        <el-table-column\n            prop=\"group\"\n            label=\"分组\"\n            width=\"120\"\n            align=\"center\">\n          <template slot-scope=\"scope\">\n            <el-tag\n                type=\"info\">\n              {{ scope.row.group }}\n            </el-tag>\n          </template>\n        </el-table-column>\n\n        <el-table-column\n            prop=\"status\"\n            label=\"状态\"\n            width=\"100\"\n            align=\"center\">\n          <template slot-scope=\"scope\">\n            <el-tag :type=\"getStatusTagType(scope.row.status)\">\n              {{ scope.row.status }}\n            </el-tag>\n          </template>\n        </el-table-column>\n\n        <el-table-column\n            label=\"操作\"\n            width=\"120\"\n            align=\"center\"\n            fixed=\"right\">\n          <template slot-scope=\"scope\">\n            <el-tooltip content=\"复制链接\" placement=\"top\">\n              <el-button\n                  type=\"text\"\n                  icon=\"el-icon-document-copy\"\n                  @click=\"handleCopy(scope.row)\">\n              </el-button>\n            </el-tooltip>\n            <el-tooltip content=\"删除\" placement=\"top\">\n              <el-button\n                  type=\"text\"\n                  class=\"delete-btn\"\n                  icon=\"el-icon-delete\"\n                  @click=\"handleDelete(scope.row)\">\n              </el-button>\n            </el-tooltip>\n          </template>\n        </el-table-column>\n      </el-table>\n    </div>\n\n    <!-- 添加分页组件 -->\n    <div class=\"pagination-container\">\n      <el-pagination\n          @size-change=\"handleSizeChange\"\n          @current-change=\"handleCurrentChange\"\n          :current-page=\"currentPage\"\n          :page-sizes=\"[5, 10, 20, 50]\"\n          :page-size=\"pageSize\"\n          layout=\"total, sizes, prev, pager, next, jumper\"\n          :total=\"filteredList.length || streamList.length\">\n      </el-pagination>\n    </div>\n\n    <!-- 添加/编辑对话框 -->\n    <el-dialog\n        title=\"导入网络文件\"\n        :visible.sync=\"importUrlDialogVisible\"\n        width=\"500px\">\n      <el-form :model=\"importForm\" label-width=\"80px\" ref=\"importForm\" :rules=\"importRules\">\n        <el-form-item label=\"URL地址\" prop=\"url\">\n          <el-input\n              v-model=\"importForm.url\"\n              placeholder=\"请输入txt或m3u文件的网络地址\"\n          ></el-input>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\">\n        <el-button @click=\"importUrlDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"handleUrlImport\">导 入</el-button>\n      </div>\n    </el-dialog>\n\n    <!-- 采集模式设置对话框 -->\n    <el-dialog\n        title=\"采集模式设置\"\n        :visible.sync=\"collectDialogVisible\"\n        width=\"500px\">\n      <el-form :model=\"collectForm\" label-width=\"100px\" ref=\"collectForm\" :rules=\"collectRules\">\n        <!-- 采集地址列表 -->\n        <el-form-item\n            v-for=\"(url, index) in collectForm.urls\"\n            :key=\"index\"\n            :label=\"index === 0 ? '采集地址' : ''\"\n            :prop=\"'urls.' + index\">\n          <el-input\n              v-model=\"collectForm.urls[index]\"\n              placeholder=\"请输入需要采集的网络地址\">\n            <template slot=\"append\">\n              <el-button\n                  icon=\"el-icon-delete\"\n                  @click=\"removeCollectUrl(index)\"\n                  v-if=\"collectForm.urls.length > 1\">\n              </el-button>\n            </template>\n          </el-input>\n        </el-form-item>\n\n        <!-- 添加地址按钮 -->\n        <el-form-item>\n          <el-button\n              type=\"text\"\n              icon=\"el-icon-plus\"\n              @click=\"addCollectUrl\">\n            添加采集地址\n          </el-button>\n        </el-form-item>\n\n        <el-form-item label=\"自动采集\">\n          <el-switch v-model=\"collectForm.autoCollect\"></el-switch>\n        </el-form-item>\n\n        <!-- 采集时间设置 -->\n        <template v-if=\"collectForm.autoCollect\">\n          <el-form-item label=\"采集周期\" prop=\"collectType\">\n            <el-radio-group v-model=\"collectForm.collectType\">\n              <el-radio label=\"daily\">每天</el-radio>\n              <el-radio label=\"weekly\">每周</el-radio>\n            </el-radio-group>\n          </el-form-item>\n\n          <el-form-item label=\"执行时间\" prop=\"executeTime\">\n            <el-time-picker\n                v-model=\"collectForm.executeTime\"\n                format=\"HH:mm\"\n                value-format=\"HH:mm\"\n                placeholder=\"选择时间\">\n            </el-time-picker>\n          </el-form-item>\n\n          <el-form-item\n              label=\"执行日期\"\n              prop=\"weekDay\"\n              v-if=\"collectForm.collectType === 'weekly'\">\n            <el-select v-model=\"collectForm.weekDay\">\n              <el-option label=\"星期一\" value=\"1\"></el-option>\n              <el-option label=\"星期二\" value=\"2\"></el-option>\n              <el-option label=\"星期三\" value=\"3\"></el-option>\n              <el-option label=\"星期四\" value=\"4\"></el-option>\n              <el-option label=\"星期五\" value=\"5\"></el-option>\n              <el-option label=\"星期六\" value=\"6\"></el-option>\n              <el-option label=\"星期日\" value=\"0\"></el-option>\n            </el-select>\n          </el-form-item>\n        </template>\n      </el-form>\n      <div slot=\"footer\">\n        <el-button @click=\"collectDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"startCollecting\">开始采集</el-button>\n      </div>\n    </el-dialog>\n\n    <!-- 生成链接对话框 -->\n    <el-dialog\n        title=\"生成链接\"\n        :visible.sync=\"generateLinkDialogVisible\"\n        width=\"500px\"\n        custom-class=\"generate-link-dialog\">\n      <div class=\"link-container\">\n        <!-- 添加格式选择 -->\n        <el-form :model=\"linkForm\" label-width=\"80px\">\n          <el-form-item label=\"文件格式\">\n            <el-radio-group v-model=\"linkForm.format\">\n              <el-radio label=\"txt\">TXT格式</el-radio>\n              <el-radio label=\"m3u\">M3U格式</el-radio>\n            </el-radio-group>\n          </el-form-item>\n        </el-form>\n\n        <!-- 链接展示卡片 -->\n        <el-card class=\"link-card\">\n          <div class=\"link-content\">\n            <el-input\n                v-model=\"generatedLink\"\n                placeholder=\"正在生成链接...\"\n                readonly>\n              <template slot=\"prepend\">链接地址</template>\n              <el-button\n                  slot=\"append\"\n                  icon=\"el-icon-document-copy\"\n                  @click=\"copyGeneratedLink\">\n                复制\n              </el-button>\n            </el-input>\n          </div>\n        </el-card>\n\n        <!-- 使用说明 -->\n        <el-card class=\"tips-card\">\n          <div class=\"tips-content\">\n            <ul>\n              <li>生成的链接可以直接在支持网络导入的播放器中使用</li>\n              <li>链接内容会随列表更新而自动更新</li>\n              <li>TXT格式适用于大多数播放器</li>\n              <li>M3U格式提供更好的播放器兼容性</li>\n            </ul>\n          </div>\n        </el-card>\n      </div>\n    </el-dialog>\n\n    <!-- 添加定时检测设置对话框 -->\n    <el-dialog\n        title=\"定时检测设置\"\n        :visible.sync=\"scheduleDialogVisible\"\n        width=\"500px\">\n      <el-form :model=\"scheduleForm\" label-width=\"100px\" ref=\"scheduleForm\" :rules=\"scheduleRules\">\n        <el-form-item label=\"检测周期\" prop=\"scheduleType\">\n          <el-radio-group v-model=\"scheduleForm.scheduleType\">\n            <el-radio label=\"daily\">每天</el-radio>\n            <el-radio label=\"weekly\">每周</el-radio>\n          </el-radio-group>\n        </el-form-item>\n\n        <el-form-item label=\"执行时间\" prop=\"executeTime\">\n          <el-time-picker\n              v-model=\"scheduleForm.executeTime\"\n              format=\"HH:mm\"\n              value-format=\"HH:mm\"\n              placeholder=\"选择时间\">\n          </el-time-picker>\n        </el-form-item>\n\n        <el-form-item\n            label=\"执行日期\"\n            prop=\"weekDay\"\n            v-if=\"scheduleForm.scheduleType === 'weekly'\">\n          <el-select v-model=\"scheduleForm.weekDay\">\n            <el-option label=\"星期一\" value=\"1\"></el-option>\n            <el-option label=\"星期二\" value=\"2\"></el-option>\n            <el-option label=\"星期三\" value=\"3\"></el-option>\n            <el-option label=\"星期四\" value=\"4\"></el-option>\n            <el-option label=\"星期五\" value=\"5\"></el-option>\n            <el-option label=\"星期六\" value=\"6\"></el-option>\n            <el-option label=\"星期日\" value=\"0\"></el-option>\n          </el-select>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\">\n        <el-button @click=\"scheduleDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"startScheduleCheck\">开始定时</el-button>\n      </div>\n    </el-dialog>\n\n    <!-- 添加搜索对话框 -->\n    <el-dialog\n        title=\"搜索直播源\"\n        :visible.sync=\"searchDialogVisible\"\n        width=\"500px\">\n      <el-form :model=\"searchForm\" label-width=\"80px\">\n        <el-form-item label=\"名称\">\n          <el-input\n              v-model=\"searchForm.name\"\n              placeholder=\"支持模糊搜索\"\n              clearable>\n          </el-input>\n        </el-form-item>\n        <el-form-item label=\"分组\">\n          <el-select\n              v-model=\"searchForm.group\"\n              placeholder=\"请选择\"\n              clearable>\n            <el-option\n                v-for=\"group in groupOptions\"\n                :key=\"group\"\n                :label=\"group\"\n                :value=\"group\">\n            </el-option>\n          </el-select>\n        </el-form-item>\n        <el-form-item label=\"状态\">\n          <el-select\n              v-model=\"searchForm.status\"\n              placeholder=\"请选择\"\n              clearable>\n            <el-option label=\"正常\" value=\"正常\"></el-option>\n            <el-option label=\"异常\" value=\"异常\"></el-option>\n            <el-option label=\"未检测\" value=\"未检测\"></el-option>\n          </el-select>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\">\n        <el-button @click=\"searchDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"handleSearch\">搜 索</el-button>\n      </div>\n    </el-dialog>\n\n    <!-- GitHub同步设置对话框 -->\n    <el-dialog\n        title=\"GitHub同步设置\"\n        :visible.sync=\"syncDialogVisible\"\n        width=\"500px\">\n      <el-form :model=\"syncForm\" ref=\"syncForm\" label-width=\"120px\" :rules=\"syncRules\">\n        <el-form-item label=\"GitHub Token\" prop=\"token\">\n          <el-input\n              v-model=\"syncForm.token\"\n              type=\"password\"\n              placeholder=\"请输入GitHub Personal Access Token\"\n              show-password>\n          </el-input>\n        </el-form-item>\n        \n        <el-form-item label=\"仓库名称\" prop=\"repo\">\n          <el-input\n              v-model=\"syncForm.repo\"\n              placeholder=\"格式：用户名/仓库名\">\n          </el-input>\n        </el-form-item>\n        \n        <el-form-item label=\"TXT文件名\" prop=\"txtPath\">\n          <el-input\n              v-model=\"syncForm.txtPath\"\n              placeholder=\"例如：playlist.txt\">\n          </el-input>\n        </el-form-item>\n        \n        <el-form-item label=\"M3U文件名\" prop=\"m3uPath\">\n          <el-input\n              v-model=\"syncForm.m3uPath\"\n              placeholder=\"例如：playlist.m3u\">\n          </el-input>\n        </el-form-item>\n        \n        <el-form-item label=\"定时同步\">\n          <el-switch\n              v-model=\"syncForm.autoSync\"\n              @change=\"handleAutoSyncChange\">\n          </el-switch>\n        </el-form-item>\n        \n        <template v-if=\"syncForm.autoSync\">\n          <el-form-item label=\"同步周期\" prop=\"syncType\">\n            <el-radio-group v-model=\"syncForm.syncType\">\n              <el-radio label=\"daily\">每天</el-radio>\n              <el-radio label=\"weekly\">每周</el-radio>\n              <el-radio label=\"afterCheck\">批量检测完毕后</el-radio>\n            </el-radio-group>\n          </el-form-item>\n\n          <el-form-item\n              label=\"执行时间\"\n              prop=\"executeTime\"\n              v-if=\"syncForm.syncType !== 'afterCheck'\">\n            <el-time-picker\n                v-model=\"syncForm.executeTime\"\n                format=\"HH:mm\"\n                value-format=\"HH:mm\"\n                placeholder=\"选择时间\">\n            </el-time-picker>\n          </el-form-item>\n\n          <el-form-item\n              label=\"执行日期\"\n              prop=\"weekDay\"\n              v-if=\"syncForm.syncType === 'weekly'\">\n            <el-select v-model=\"syncForm.weekDay\">\n              <el-option label=\"星期一\" value=\"1\"></el-option>\n              <el-option label=\"星期二\" value=\"2\"></el-option>\n              <el-option label=\"星期三\" value=\"3\"></el-option>\n              <el-option label=\"星期四\" value=\"4\"></el-option>\n              <el-option label=\"星期五\" value=\"5\"></el-option>\n              <el-option label=\"星期六\" value=\"6\"></el-option>\n              <el-option label=\"星期日\" value=\"0\"></el-option>\n            </el-select>\n          </el-form-item>\n        </template>\n        \n        <el-form-item label=\"提交信息\" prop=\"message\">\n          <el-input\n              v-model=\"syncForm.message\"\n              placeholder=\"更新说明\">\n          </el-input>\n        </el-form-item>\n      </el-form>\n      \n      <div slot=\"footer\">\n        <el-button @click=\"syncDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"saveGithubSettings\">保 存</el-button>\n      </div>\n    </el-dialog>\n  </div>\n\n</template>\n\n<script>\nexport default {\n  name: 'StreamCheck',\n  data() {\n    return {\n      loading: false,\n      streamList: [],\n      importUrlDialogVisible: false,\n      importForm: {\n        url: '',\n        group: ''\n      },\n      importRules: {\n        url: [\n          { required: true, message: '请输入URL地址', trigger: 'blur' },\n          { type: 'url', message: '请输入正确的URL地址', trigger: ['blur', 'change'] }\n        ],\n        group: [\n          { required: true, message: '请选择分组', trigger: 'change' }\n        ]\n      },\n      currentPage: 1,\n      pageSize: 5,\n      isChecking: false,\n      isPaused: false,\n      checkedCount: 0,\n      totalCount: 0,\n      pausedIndex: -1,\n      shouldStop: false,\n      isCollecting: false,\n      collectDialogVisible: false,\n      collectForm: {\n        urls: [''],\n        autoCollect: false,\n        collectType: 'daily',\n        executeTime: '09:00',\n        weekDay: '1'\n      },\n      collectRules: {\n        urls: [\n          { \n            type: 'array',\n            validator: (rule, value, callback) => {\n              if (value.length === 0) {\n                callback(new Error('请至少添加一个采集地址'))\n              }\n              // 验证每个URL\n              const errors = value.map(url => {\n                if (!url) return '采集地址不能为空'\n                if (!/^https?:\\/\\/.+/.test(url)) return '请输入正确的URL地址'\n                return null\n              }).filter(error => error !== null)\n              \n              if (errors.length > 0) {\n                callback(new Error(errors[0]))\n              } else {\n                callback()\n              }\n            },\n            trigger: 'change'\n          }\n        ],\n        executeTime: [\n          { required: true, message: '请选择执行时间', trigger: 'change' }\n        ],\n        weekDay: [\n          { required: true, message: '请选择执行日期', trigger: 'change' }\n        ]\n      },\n      collectTimer: null,\n      generateLinkDialogVisible: false,\n      generatedLink: '',\n      previewContent: '',  // 新增预览内容\n      currentLinkId: '',\n      scheduleDialogVisible: false,\n      isScheduled: false,\n      scheduleForm: {\n        scheduleType: 'daily',\n        executeTime: '09:00',\n        weekDay: '1'\n      },\n      scheduleRules: {\n        executeTime: [\n          { required: true, message: '请选择执行时间', trigger: 'change' }\n        ],\n        weekDay: [\n          { required: true, message: '请选择执行日期', trigger: 'change' }\n        ]\n      },\n      scheduleTimer: null,\n      nextScheduleTime: null,\n      stateKey: 'streamCheckState', // 用于本地存储的key\n      hasActiveOperations: false,  // 添加标记表示是否有动作在执行\n      linkForm: {\n        format: 'txt' // 默认txt格式\n      },\n      searchDialogVisible: false,\n      searchForm: {\n        name: '',\n        group: '',\n        status: ''\n      },\n      filteredList: [], // 用于存储搜索过滤后的列表\n      realIp: '',  // 存储真实IP地址\n      syncDialogVisible: false,\n      syncForm: {\n        token: localStorage.getItem('githubToken') || '',\n        repo: localStorage.getItem('githubRepo') || '',\n        txtPath: localStorage.getItem('githubTxtPath') || '',\n        m3uPath: localStorage.getItem('githubM3uPath') || '',\n        autoSync: localStorage.getItem('githubAutoSync') === 'true',\n        syncType: localStorage.getItem('githubSyncType') || 'daily',\n        executeTime: localStorage.getItem('githubExecuteTime') || '00:00',\n        weekDay: localStorage.getItem('githubWeekDay') || '1',\n        message: '更新直播源列表'\n      },\n      syncRules: {\n        token: [\n          { required: true, message: '请输入GitHub Token', trigger: 'blur' }\n        ],\n        repo: [\n          { required: true, message: '请输入仓库名称', trigger: 'blur' },\n          { pattern: /^[\\w-]+\\/[\\w-]+$/, message: '格式：用户名/仓库名', trigger: 'blur' }\n        ],\n        txtPath: [\n          { required: true, message: '请输入文件路径', trigger: 'blur' }\n        ],\n        m3uPath: [\n          { required: true, message: '请输入文件路径', trigger: 'blur' }\n        ],\n        message: [\n          { required: true, message: '请输入提交消息', trigger: 'blur' }\n        ]\n      },\n      syncTimer: null\n    }\n  },\n  computed: {\n    paginatedData() {\n      // 使用过滤后的列表进行分页\n      const start = (this.currentPage - 1) * this.pageSize\n      const end = start + this.pageSize\n      return (this.filteredList.length > 0 ? this.filteredList : this.streamList).slice(start, end)\n    },\n    checkButtonText() {\n      if (!this.isChecking && !this.isPaused) {\n        return '批量检测'\n      }\n      return `检测中 ${this.checkedCount}/${this.totalCount}`\n    },\n    mergedStreams() {\n      // 创建一个Map来存储合并后的直播源\n      const streamMap = new Map()\n      \n      // 按照当前列表顺序处理每个直播源\n      this.streamList.forEach(stream => {\n        const key = stream.name // 使用名称作为键\n        \n        if (streamMap.has(key)) {\n          // 如果已存在相同名称的直播源，添加到URLs数组\n          const existing = streamMap.get(key)\n          if (!existing.urls.includes(stream.url)) {\n            existing.urls.push(stream.url)\n          }\n        } else {\n          // 如果是新的名称，创建新条目\n          streamMap.set(key, {\n            name: stream.name,\n            urls: [stream.url],\n            group: stream.group\n          })\n        }\n      })\n      \n      // 转换回数组格式\n      return Array.from(streamMap.values())\n    },\n    groupOptions() {\n      return [...new Set(this.streamList.map(item => item.group))]\n    }\n  },\n  created() {\n    // 初始化时加载持久化的数据\n    if (localStorage.getItem('persistentData') === 'true') {\n      const savedList = localStorage.getItem('streamList')\n      if (savedList) {\n        this.streamList = JSON.parse(savedList)\n        // 初始化时检查多播源\n        this.$nextTick(() => {\n          this.checkMulticastStreams() // 使用新方法\n        })\n      }\n    }\n    \n    // 监听保存事件\n    this.$root.$on('save-stream-list', this.saveStreamList)\n    \n    // 监听设置更新事件\n    this.$root.$on('settings-updated', this.handleSettingsUpdate)\n\n    // 从本地存储恢复状态\n    this.restoreState()\n    \n    // 如果定时检测是开启状态，重新启动定时器\n    if (this.isScheduled) {\n      this.setupSchedule()\n    }\n    // 如果采集是开启状态，重新启动采集\n    if (this.isCollecting) {\n      this.startCollecting(true) // true表示是恢复状态\n    }\n    // 如果GitHub自动同步是开启状态，重新启动同步定时器\n    if (this.syncForm.autoSync) {\n      this.setupSyncSchedule()\n    }\n\n    this.filteredList = []\n    this.getRealIp()  // 获取真实IP地址\n  },\n  beforeDestroy() {\n    // 移除事件监听\n    this.$root.$off('save-stream-list', this.saveStreamList)\n    this.$root.$off('settings-updated', this.handleSettingsUpdate)\n    // 组件销毁前清除定时器\n    if (this.collectTimer) {\n      clearInterval(this.collectTimer)\n    }\n    // 组件销毁时清理定时器\n    this.stopScheduleCheck()\n    // 在组件销毁前保存状态\n    this.saveState()\n    window.removeEventListener('beforeunload', this.handleBeforeUnload)\n  },\n  methods: {\n    // 添加处理设置更新的方法\n    handleSettingsUpdate(event) {\n      console.log('收到设置更新事件:', event)\n      if (event && event.type === 'settings-changed' && event.settings) {\n        console.log('设置已更新，当前设置:', event.settings)\n        // 重新检查所有多播源\n        this.$nextTick(() => {\n          this.checkMulticastStreams()\n        })\n      }\n    },\n\n    // 添加多播源检测的辅助方法\n    isMulticastStream(url) {\n      if (!url) return false\n      \n      // 更完整的多播源检测正则表达式\n      const patterns = [\n        // 标准格式\n        /[/](udp|rtp)[/]239\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /[/](udp|rtp)[/]225\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /[/](udp|rtp)[/]224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        // 带@的格式\n        /^(udp|rtp):\\/\\/@239\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /^(udp|rtp):\\/\\/@225\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /^(udp|rtp):\\/\\/@224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        // 不带@的格式\n        /^(udp|rtp):\\/\\/239\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /^(udp|rtp):\\/\\/225\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /^(udp|rtp):\\/\\/224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        // IPv6格式\n        /^(udp|rtp):\\/\\/\\[239\\.\\d+\\.\\d+\\.\\d+\\]:\\d+/i,\n        /^(udp|rtp):\\/\\/\\[225\\.\\d+\\.\\d+\\.\\d+\\]:\\d+/i,\n        /^(udp|rtp):\\/\\/\\[224\\.\\d+\\.\\d+\\.\\d+\\]:\\d+/i,\n        // 其他常见格式\n        /^(udp|rtp):\\/\\/@?239\\.\\d+\\.\\d+\\.\\d+[/]\\d+/i,\n        /^(udp|rtp):\\/\\/@?225\\.\\d+\\.\\d+\\.\\d+[/]\\d+/i,\n        /^(udp|rtp):\\/\\/@?224\\.\\d+\\.\\d+\\.\\d+[/]\\d+/i,\n        // 简单格式\n        /^udp\\/@239\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /^rtp\\/@239\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /^udp\\/@225\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /^rtp\\/@225\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /^udp\\/@224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /^rtp\\/@224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        // 带端口的格式\n        /^(udp|rtp):\\/\\/@?239\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /^(udp|rtp):\\/\\/@?225\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /^(udp|rtp):\\/\\/@?224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        // 特殊格式\n        /^(udp|rtp)[/](239|225|224)\\.\\d+\\.\\d+\\.\\d+[/]?(\\d+)?/i,\n        /^(udp|rtp):\\/\\/(239|225|224)\\.\\d+\\.\\d+\\.\\d+[/]?(\\d+)?/i,\n        // HTTP代理的UDP/RTP多播源格式\n        /http:\\/\\/[^/]+[/](udp|rtp)[/]224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /http:\\/\\/[^/]+[/](udp|rtp)[/]225\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /http:\\/\\/[^/]+[/](udp|rtp)[/]239\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        // HTTPS代理的UDP/RTP多播源格式\n        /https:\\/\\/[^/]+[/](udp|rtp)[/]224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /https:\\/\\/[^/]+[/](udp|rtp)[/]225\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /https:\\/\\/[^/]+[/](udp|rtp)[/]239\\.\\d+\\.\\d+\\.\\d+:\\d+/i\n      ]\n      \n      // 先转换为小写进行检查\n      const lowerUrl = url.toLowerCase()\n      return patterns.some(pattern => pattern.test(lowerUrl))\n    },\n\n    // 检查多播源的方法\n    checkMulticastStreams() {\n      try {\n        const appSettings = localStorage.getItem('appSettings')\n        if (!appSettings) {\n          console.log('未找到设置配置')\n          return\n        }\n\n        let settings\n        try {\n          settings = JSON.parse(appSettings)\n        } catch (e) {\n          console.error('解析设置失败:', e)\n          return\n        }\n\n        // 如果启用了自动清除多播源\n        if (settings.autoRemoveMulticast === true) {\n          console.log('开始检查多播源...')\n          let removedCount = 0\n          const toRemove = []\n\n          // 检查所有流\n          this.streamList.forEach((stream, index) => {\n            if (this.isMulticastStream(stream.url)) {\n              toRemove.push(index)\n              removedCount++\n              console.log('发现多播源:', stream.url)\n            }\n          })\n\n          // 从后向前删除\n          for (let i = toRemove.length - 1; i >= 0; i--) {\n            const index = toRemove[i]\n            const stream = this.streamList[index]\n            console.log('正在删除多播源:', stream.name, stream.url)\n            this.streamList.splice(index, 1)\n          }\n\n          if (removedCount > 0) {\n            console.log(`成功清除 ${removedCount} 个多播源`)\n            this.$message.warning(`已自动清除 ${removedCount} 个多播源`)\n            this.saveStreamList()\n\n            // 如果当前页没有数据，跳转到上一页\n            if (this.paginatedData.length === 0 && this.currentPage > 1) {\n              this.currentPage--\n            }\n          }\n        }\n      } catch (error) {\n        console.error('检查多播源失败:', error)\n      }\n    },\n\n    async checkStream(stream) {\n      // 优先从 appSettings 中读取 FFprobe 路径\n      let ffprobePath = ''\n      try {\n        const appSettings = localStorage.getItem('appSettings')\n        if (appSettings) {\n          const settings = JSON.parse(appSettings)\n          ffprobePath = settings.ffprobePath\n        }\n      } catch (error) {\n        console.error('读取 appSettings 失败:', error)\n      }\n\n      // 如果 appSettings 中没有，则从独立设置中读取\n      if (!ffprobePath) {\n        ffprobePath = localStorage.getItem('ffprobePath')\n      }\n\n      if (!ffprobePath) {\n        console.error('未找到 FFprobe 路径配置')\n        this.$message.error('请先在系统设置中配置FFprobe路径')\n        return false\n      }\n\n      // 检查是否是多播源\n      if (this.isMulticastStream(stream.url)) {\n        // 直接返回false，不再设置状态\n        return false\n      }\n\n      try {\n        const response = await fetch(`${this.getBaseUrl()}/api/check-stream`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            url: stream.url,\n            ffprobePath: ffprobePath\n          })\n        })\n\n        if (!response.ok) throw new Error('请求失败')\n        \n        const result = await response.json()\n        \n        // 更新流信息\n        stream.status = result.available ? '正常' : '异常'\n        stream.resolution = result.resolution || '-'\n        stream.responseTime = result.responseTime || '-'\n\n        // 检查是否需要自动清除\n        if (!result.available || this.shouldRemoveStream(stream)) {\n          let reason = ''\n          if (!result.available || stream.status === '异常') {\n            reason = '异常源'\n          } else if (stream.responseTime > 3000) {\n            reason = '响应时间过慢'\n          } else {\n            reason = '分辨率过低'\n          }\n\n          // 找到当前页的所有项\n          const currentPageItems = this.paginatedData\n          // 找到要删除项在当前页的索引\n          const pageIndex = currentPageItems.indexOf(stream)\n          // 找到要删除项在整个列表中的索引\n          const listIndex = this.streamList.indexOf(stream)\n          \n          if (listIndex > -1) {\n            this.streamList.splice(listIndex, 1)\n            // 如果删除的是当前页的最后一项，且不是第一页，则跳转到上一页\n            if (pageIndex === currentPageItems.length - 1 && this.currentPage > 1) {\n              this.currentPage--\n            }\n            // 添加删除原因提示\n            console.log(`清除直播源: ${stream.name}, 原因: ${reason}`)\n            this.$message.warning(`已自动清除直播源：${reason}`)\n          }\n        }\n        \n        this.saveStreamList()\n        return result.available\n      } catch (error) {\n        console.error('检测错误:', error)\n        stream.status = '异常'\n        \n        // 如果设置了自动清除异常源，在这里也进行清除\n        if (this.shouldRemoveStream(stream)) {\n          const currentPageItems = this.paginatedData\n          const pageIndex = currentPageItems.indexOf(stream)\n          const listIndex = this.streamList.indexOf(stream)\n          \n          if (listIndex > -1) {\n            this.streamList.splice(listIndex, 1)\n            if (pageIndex === currentPageItems.length - 1 && this.currentPage > 1) {\n              this.currentPage--\n            }\n            console.log(`清除异常直播源: ${stream.name}, 原因: 检测失败`)\n            this.$message.warning('已自动清除直播源：检测失败')\n          }\n        }\n        \n        this.saveStreamList()\n        return false\n      }\n    },\n\n    shouldRemoveStream(stream) {\n      try {\n        // 获取设置\n        const appSettings = localStorage.getItem('appSettings')\n        let settings = {}\n        if (appSettings) {\n          settings = JSON.parse(appSettings)\n        }\n\n        // 检查是否需要清除异常源\n        if (settings.autoRemoveInvalid === true && \n            (stream.status === '异常' || stream.status === '未知')) {\n          console.log(`应清除异常源: ${stream.name}, 状态: ${stream.status}`)\n          return true\n        }\n\n        // 获取模式设置\n        const extremeMode = settings.extremeMode === true\n        const strictMode = settings.strictMode === true\n\n        // 检查是否需要清除低分辨率源\n        if (settings.autoRemoveLowRes === true && \n            stream.resolution !== '未知' && \n            stream.resolution !== '多播源' && \n            stream.resolution !== '-') {\n          const [width, height] = stream.resolution.split('x').map(Number)\n          if (extremeMode ? (width < 1920 || height < 1080) : \n              (strictMode ? (width < 1920 || height < 1080) : (width < 1280 || height < 720))) {\n            console.log(`应清除低分辨率源: ${stream.name}, 分辨率: ${stream.resolution}`)\n            return true\n          }\n        }\n\n        // 检查响应时间\n        if (settings.autoRemoveSlowResponse === true && \n            stream.responseTime !== '-' &&\n            Number(stream.responseTime) > (extremeMode ? 1500 : (strictMode ? 2000 : 3000))) {\n          console.log(`应清除慢速源: ${stream.name}, 响应时间: ${stream.responseTime}ms`)\n          return true\n        }\n\n        return false\n      } catch (error) {\n        console.error('检查是否应该移除流时出错:', error)\n        return false\n      }\n    },\n\n    async handleBatchCheck() {\n      if (this.isChecking) return\n      \n      const uncheckedStreams = this.streamList.filter(s => !this.isPaused || this.streamList.indexOf(s) > this.pausedIndex)\n      if (uncheckedStreams.length === 0) {\n        this.$message.info('没有需要检测的直播源')\n        return\n      }\n\n      this.isChecking = true\n      this.shouldStop = false\n      this.totalCount = uncheckedStreams.length\n      this.checkedCount = this.isPaused ? this.checkedCount : 0\n      \n      // 获取并发检测数量设置\n      const concurrentChecks = parseInt(localStorage.getItem('concurrentChecks')) || 3\n      \n      try {\n        // 从暂停的位置或开始位置继续检测\n        const startIndex = this.isPaused ? this.pausedIndex + 1 : 0\n        \n        // 分批处理，每批次处理固定数量的流\n        const batchSize = Math.min(concurrentChecks, 10) // 限制最大并发数\n        \n        for (let i = startIndex; i < uncheckedStreams.length; i += batchSize) {\n          if (this.shouldStop) break\n          \n          // 获取当前批次要检测的流\n          const batch = uncheckedStreams.slice(i, i + batchSize)\n          \n          // 并发检测当前批次的所有流\n          await Promise.all(\n            batch.map(async stream => {\n              if (this.shouldStop) return\n              \n              try {\n                stream.status = '检测中'\n                const success = await this.checkStream(stream)\n                this.checkedCount++\n                \n                if (success) {\n                  this.saveState()\n                }\n              } catch (error) {\n                console.error('检测流失败:', error)\n                stream.status = '异常'\n                this.checkedCount++\n              }\n            })\n          )\n          \n          // 更新暂停位置\n          this.pausedIndex = i + batchSize - 1\n          \n          // 每批次完成后保存状态\n          this.saveState()\n        }\n\n        if (!this.shouldStop) {\n          this.isChecking = false\n          this.isPaused = false\n          this.pausedIndex = -1\n          this.$message.success('批量检测完成')\n          \n          // 检查是否需要在批量检测完成后同步\n          if (this.syncForm.autoSync && this.syncForm.syncType === 'afterCheck') {\n            await this.syncToGithub(this.generateContent('txt'), this.syncForm.txtPath)\n            await this.syncToGithub(this.generateContent('m3u'), this.syncForm.m3uPath)\n            this.$message.success('已同步到GitHub')\n          }\n        }\n      } catch (error) {\n        console.error('批量检测错误:', error)\n        this.$message.error('批量检测失败')\n      } finally {\n        if (this.shouldStop) {\n          this.isChecking = false\n          this.isPaused = true\n          this.$message.info('检测已暂停')\n        }\n      }\n    },\n\n    pauseCheck() {\n      this.shouldStop = true\n    },\n\n    async resumeCheck() {\n      if (this.pausedIndex >= 0) {\n        this.isChecking = true\n        this.isPaused = false\n        this.shouldStop = false\n        await this.batchCheck(this.pausedIndex)\n      }\n    },\n\n    async handleCheck(row) {\n      row.status = '检测中'\n      \n      const success = await this.checkStream(row)\n      this.$message[success ? 'success' : 'error'](`检测${success ? '成功' : '失败'}: ${row.name}`)\n    },\n    handleDelete(row) {\n      this.$confirm('确认删除该直播源?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        const index = this.streamList.indexOf(row)\n        this.streamList.splice(index, 1)\n        const maxPage = Math.ceil(this.streamList.length / this.pageSize)\n        if (this.currentPage > maxPage) {\n          this.currentPage = Math.max(maxPage, 1)\n        }\n        this.saveStreamList()  // 保存更新后的列表\n        this.$message.success('删除成功')\n      }).catch(() => {})\n    },\n    async handleUrlImport() {\n      const valid = await this.$refs.importForm.validate()\n      if (!valid) return\n\n      try {\n        const response = await fetch(`${this.getBaseUrl()}/api/import-url`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({ url: this.importForm.url })\n        })\n\n        if (!response.ok) throw new Error('导入失败')\n\n        const content = await response.text()\n        const newStreams = this.parseContent(content)\n\n        if (newStreams.length > 0) {\n          // 过滤重复的直播源\n          const existingUrls = new Set(this.streamList.map(s => s.url))\n          const uniqueStreams = newStreams.filter(s => !existingUrls.has(s.url))\n          \n          if (uniqueStreams.length > 0) {\n            this.streamList.push(...uniqueStreams)\n            this.$message.success(`成功导入 ${uniqueStreams.length} 个直播源`)\n            this.importUrlDialogVisible = false\n            \n            // 导入后立即检查多播源\n            this.$nextTick(() => {\n              this.checkMulticastStreams()\n            })\n          } else {\n            this.$message.info('没有新的直播源可以导入')\n          }\n        } else {\n          this.$message.warning('未找到有效的直播源')\n        }\n      } catch (error) {\n        this.$message.error('导入失败：' + error.message)\n      }\n    },\n    readFile(file) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader()\n        reader.onload = (e) => resolve(e.target.result)\n        reader.onerror = () => reject(new Error('文件读取失败'))\n        reader.readAsText(file)\n      })\n    },\n    parseContent(content) {\n      const lines = content.split('\\n')\n      const streams = []\n      let currentGroup = '未分组'\n\n      // 检测是否是 m3u 格式\n      if (content.includes('#EXTM3U')) {\n        let currentName = ''\n        let currentGroupTitle = ''\n\n        lines.forEach(line => {\n          line = line.trim()\n          if (!line) return\n\n          if (line.startsWith('#EXTINF:')) {\n            // 尝试不同的名称提取方式\n            let name = ''\n            \n            // 1. 尝试提取 tvg-name 属性\n            const tvgNameMatch = line.match(/tvg-name=\"([^\"]+)\"/i)\n            if (tvgNameMatch) {\n              name = tvgNameMatch[1].trim()\n            }\n            \n            // 2. 如果没有 tvg-name，尝试提取最后的逗号后的名称\n            if (!name) {\n              const lastCommaIndex = line.lastIndexOf(',')\n              if (lastCommaIndex !== -1) {\n                name = line.substring(lastCommaIndex + 1).trim()\n              }\n            }\n            \n            // 3. 如果还是没有名称，尝试提取 tvg-id\n            if (!name) {\n              const tvgIdMatch = line.match(/tvg-id=\"([^\"]+)\"/i)\n              if (tvgIdMatch) {\n                name = tvgIdMatch[1].trim()\n              } else {\n                // 3.1 尝试提取不带引号的 tvg-id\n                const tvgIdNoQuoteMatch = line.match(/tvg-id=([^,\\s]+)/i)\n                if (tvgIdNoQuoteMatch) {\n                  name = tvgIdNoQuoteMatch[1].trim()\n                }\n              }\n            }\n\n            currentName = name || '未命名'\n            \n            // 提取分组信息\n            // 1. 先尝试带引号的 group-title\n            const groupMatch = line.match(/group-title=\"([^\"]+)\"/i)\n            if (groupMatch) {\n              currentGroupTitle = groupMatch[1].trim()\n            } else {\n              // 2. 尝试不带引号的 group-title\n              const groupNoQuoteMatch = line.match(/group-title=([^,\\s]+)/i)\n              if (groupNoQuoteMatch) {\n                currentGroupTitle = groupNoQuoteMatch[1].trim()\n              }\n            }\n          } else if (!line.startsWith('#') && line.trim()) {\n            // 这是一个媒体URL行\n            // 在添加流之前先检查是否是多播源\n            if (currentName && !this.isMulticastStream(line.trim())) {\n              streams.push({\n                name: currentName,\n                url: line.trim(),\n                group: currentGroupTitle || currentGroup,\n                status: '未检测',\n                resolution: '-',\n                responseTime: '-'\n              })\n            }\n            currentName = ''  // 重置当前名称\n          }\n        })\n      } else {\n        // txt 格式处理\n        lines.forEach(line => {\n          line = line.trim()\n          if (!line) return\n\n          // 检查是否是分组标记\n          if (line.endsWith(',#genre#')) {\n            currentGroup = line.replace(',#genre#', '')\n            return\n          }\n\n          // 解析直播源行\n          const [name, urls] = line.split(',')\n          if (!name || !urls) return\n\n          // 检查是否包含多个URL（用#分隔）\n          const urlList = urls.split('#')\n          \n          // 为每个URL创建一个新的直播源条目，但排除多播源\n          urlList.forEach(url => {\n            if (url && url.trim() && !this.isMulticastStream(url.trim())) {\n              streams.push({\n                name: name,\n                url: url.trim(),\n                group: currentGroup,\n                status: '未检测',\n                resolution: '-',\n                responseTime: '-'\n              })\n            }\n          })\n        })\n      }\n\n      return streams\n    },\n    addStreamsToList(streams) {\n      streams.forEach(stream => {\n        this.streamList.push(stream)\n      })\n      this.currentPage = 1\n      this.saveStreamList()  // 保存更新后的列表\n    },\n    handleSizeChange(val) {\n      this.pageSize = val\n      // 当每页条数改变时，重置当前页为第一页\n      this.currentPage = 1\n    },\n    handleCurrentChange(val) {\n      this.currentPage = val\n    },\n    async handleFileUpload(event) {\n      const file = event.target.files[0]\n      if (!file) return\n\n      try {\n        const content = await this.readFile(file)\n        const newStreams = this.parseContent(content)\n        \n        if (newStreams.length > 0) {\n          // 过滤重复的直播源\n          const existingUrls = new Set(this.streamList.map(s => s.url))\n          const uniqueStreams = newStreams.filter(s => !existingUrls.has(s.url))\n          \n          if (uniqueStreams.length > 0) {\n            this.streamList.push(...uniqueStreams)\n            this.$message.success(`成功导入 ${uniqueStreams.length} 个直播源`)\n            \n            // 导入后立即检查多播源\n            this.$nextTick(() => {\n              this.checkMulticastStreams()\n            })\n          } else {\n            this.$message.info('没有新的直播源可以导入')\n          }\n        } else {\n          this.$message.warning('未找到有效的直播源')\n        }\n      } catch (error) {\n        this.$message.error('文件读取失败：' + error.message)\n      } finally {\n        // 清除文件输入，允许重复选择同一文件\n        event.target.value = ''\n      }\n    },\n    getGroupFromFileName(filename) {\n      // 从文件名中提取可能的分组名\n      const name = filename.toLowerCase()\n      if (name.includes('cctv')) return 'CCTV'\n      if (name.includes('卫视')) return '卫视'\n      if (name.includes('地方')) return '地方台'\n      return '未分组'\n    },\n    handleClearList() {\n      this.$confirm('确认清空列表吗？', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        // 只重置批量检测相关的状态\n        this.streamList = []\n        this.currentPage = 1\n        this.isChecking = false\n        this.isPaused = false\n        this.checkIndex = 0\n        \n        // 更新链接内容和保存状态\n        this.updateLinkContent()\n        this.saveState()\n        \n        this.$message({\n          type: 'success',\n          message: '列表已清空'\n        })\n      }).catch(() => {\n        this.$message({\n          type: 'info',\n          message: '已取消清空'\n        })\n      })\n    },\n    handleCopy(row) {\n      // 创建一个临时输入框来实现复制功能\n      const textarea = document.createElement('textarea')\n      textarea.value = row.url\n      document.body.appendChild(textarea)\n      textarea.select()\n      \n      try {\n        document.execCommand('copy')\n        this.$message.success('链接已复制到剪贴板')\n      } catch (err) {\n        this.$message.error('复制失败')\n      } finally {\n        document.body.removeChild(textarea)\n      }\n    },\n    saveStreamList() {\n      if (localStorage.getItem('persistentData') === 'true') {\n        localStorage.setItem('streamList', JSON.stringify(this.streamList))\n      }\n    },\n    handleCollectMode() {\n      if (this.isCollecting) {\n        this.stopCollecting()\n      } else {\n        this.collectDialogVisible = true\n      }\n    },\n    async startCollecting(isRestore = false) {\n      if (!isRestore) {\n        // 确保 urls 是数组\n        if (!Array.isArray(this.collectForm.urls)) {\n          this.$set(this.collectForm, 'urls', [''])\n          return\n        }\n        \n        const valid = await this.$refs.collectForm.validate()\n        if (!valid) return\n      }\n\n      this.collectDialogVisible = false\n      this.isCollecting = true\n      this.saveState() // 保存状态\n      \n      // 立即执行一次采集\n      await this.collect()\n      \n      // 如果开启了自动采集，设置定时器\n      if (this.collectForm.autoCollect) {\n        this.setupCollectSchedule()\n      } else {\n        // 单次采集完成后停止\n        this.isCollecting = false\n        this.saveState()\n      }\n    },\n    stopCollecting() {\n      this.isCollecting = false\n      if (this.collectTimer) {\n        clearInterval(this.collectTimer)\n        this.collectTimer = null\n      }\n      this.saveState() // 保存状态\n      // 只有在自动采集模式下才显示停止提示\n      if (this.collectForm.autoCollect) {\n        this.$message.success('已停止采集')\n      }\n    },\n    async collect() {\n      try {\n        // 检查是否有检测正在进行\n        if (this.isChecking) {\n          this.$message.warning('检测正在进行中，暂时跳过本次采集')\n          return\n        }\n\n        this.$message.info('开始采集直播源...')\n\n        // 并发采集所有地址\n        const results = await Promise.allSettled(\n          this.collectForm.urls.map(async url => {\n            try {\n              const response = await fetch(`${this.getBaseUrl()}/api/collect-url?url=${encodeURIComponent(url)}`, {\n                method: 'GET',\n                headers: {\n                  'Accept': 'text/plain'\n                },\n              })\n              if (!response.ok) throw new Error(`采集失败: ${url}`)\n              \n              const content = await response.text()\n              const newStreams = this.parseContent(content)\n              \n              // 过滤重复的直播源，同时考虑正在检测的源\n              const existingUrls = new Set(this.streamList.map(s => s.url))\n              return newStreams.filter(s => {\n                // 如果源已存在且正在检测中，保留原有状态\n                const existingStream = this.streamList.find(es => es.url === s.url)\n                if (existingStream && existingStream.status === '检测中') {\n                  return false\n                }\n                return !existingUrls.has(s.url)\n              })\n            } catch (error) {\n              console.error(`采集地址 ${url} 失败:`, error)\n              return []\n            }\n          })\n        )\n\n        // 合并所有采集结果\n        const allNewStreams = results\n          .filter(result => result.status === 'fulfilled')\n          .flatMap(result => result.value)\n          .filter((stream, index, self) => \n            index === self.findIndex(s => s.url === stream.url)\n          )\n\n        // 添加新的直播源到列表\n        if (allNewStreams.length > 0) {\n          this.addStreamsToList(allNewStreams)\n          this.$message.success(`采集成功: 新增${allNewStreams.length}个直播源`)\n        } else {\n          this.$message.info('未发现新的直播源')\n        }\n\n        // 统计失败的地址\n        const failedUrls = results\n          .filter(result => result.status === 'rejected')\n          .length\n\n        if (failedUrls > 0) {\n          this.$message.warning(`${failedUrls}个地址采集失败`)\n        }\n\n      } catch (error) {\n        this.$message.error('采集失败：' + error.message)\n        if (!this.collectForm.autoCollect) {\n          this.stopCollecting()\n        }\n      }\n    },\n    async handleGenerateLink() {\n      this.generateLinkDialogVisible = true\n      try {\n        // 先生成 TXT 格式链接\n        const txtResponse = await fetch(`${this.getBaseUrl()}/api/generate-link`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain',\n            'X-File-Format': 'txt'\n          },\n          body: this.generateContent('txt')\n        })\n        \n        // 再生成 M3U 格式链接\n        const m3uResponse = await fetch(`${this.getBaseUrl()}/api/generate-link`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain',\n            'X-File-Format': 'm3u'\n          },\n          body: this.generateContent('m3u')\n        })\n        \n        if (txtResponse.ok && m3uResponse.ok) {\n          const txtLink = await txtResponse.text()\n          const m3uLink = await m3uResponse.text()\n          \n          // 根据当前选择的格式显示对应的链接\n          this.generatedLinks = {\n            txt: txtLink,\n            m3u: m3uLink\n          }\n          this.generatedLink = this.generatedLinks[this.linkForm.format]\n        }\n      } catch (error) {\n        console.error('生成链接失败：', error)\n        this.$message.error('生成链接失败')\n      }\n    },\n    generateContent(format) {\n      return format === 'txt' ? this.generateTxtContent() : this.generateM3uContent()\n    },\n    generateTxtContent() {\n      let content = ''\n      let currentGroup = ''\n      \n      // 对每个分组内的直播源按响应速度排序\n      const sortedStreams = [...this.mergedStreams].sort((a, b) => {\n        if (a.group !== b.group) return 0  // 不同分组不改变顺序\n        const aTime = Number(a.responseTime) || Infinity\n        const bTime = Number(b.responseTime) || Infinity\n        return aTime - bTime\n      })\n      \n      sortedStreams.forEach(stream => {\n        if (stream.group !== currentGroup) {\n          currentGroup = stream.group\n          content += `${currentGroup},#genre#\\n`\n        }\n        content += `${stream.name},${stream.urls.join('#')}\\n`\n      })\n      \n      return content.trim()\n    },\n    generateM3uContent() {\n      let content = '#EXTM3U\\n'\n      let currentGroup = ''\n      \n      // 对每个分组内的直播源按响应速度排序\n      const sortedStreams = [...this.mergedStreams].sort((a, b) => {\n        if (a.group !== b.group) return 0  // 不同分组不改变顺序\n        const aTime = Number(a.responseTime) || Infinity\n        const bTime = Number(b.responseTime) || Infinity\n        return aTime - bTime\n      })\n      \n      sortedStreams.forEach(stream => {\n        if (stream.group !== currentGroup) {\n          currentGroup = stream.group\n          content += `\\n#EXTINF:-1 group-title=\"${currentGroup}\"\\n`\n        }\n        stream.urls.forEach(url => {\n          content += `#EXTINF:-1,${stream.name}\\n${url}\\n`\n        })\n      })\n      \n      return content.trim()\n    },\n    copyGeneratedLink() {\n      const textarea = document.createElement('textarea')\n      textarea.value = this.generatedLink\n      document.body.appendChild(textarea)\n      textarea.select()\n      \n      try {\n        document.execCommand('copy')\n        this.$message.success('链接已复制到剪贴板')\n      } catch (err) {\n        this.$message.error('复制失败')\n      } finally {\n        document.body.removeChild(textarea)\n      }\n    },\n    downloadTxtFile() {\n      const blob = new Blob([this.generatedLink], { type: 'text/plain;charset=utf-8' })\n      const url = window.URL.createObjectURL(blob)\n      const link = document.createElement('a')\n      link.href = url\n      link.download = `直播源列表_${new Date().toLocaleDateString()}.txt`\n      \n      document.body.appendChild(link)\n      link.click()\n      \n      // 清理\n      window.URL.revokeObjectURL(url)\n      document.body.removeChild(link)\n      this.$message.success('文件下载成功')\n    },\n    // 修改更新链接内容的方法\n    async updateLinkContent() {\n      try {\n        // 更新 TXT 格式内容\n        await fetch(`${this.getBaseUrl()}/api/update-content`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain',\n            'X-File-Format': 'txt'\n          },\n          body: this.generateContent('txt')\n        })\n        \n        // 更新 M3U 格式内容\n        await fetch(`${this.getBaseUrl()}/api/update-content`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain',\n            'X-File-Format': 'm3u'\n          },\n          body: this.generateContent('m3u')\n        })\n      } catch (error) {\n        console.error('更新链接内容失败：', error)\n      }\n    },\n    handleScheduleCheck() {\n      if (this.isScheduled) {\n        this.stopScheduleCheck()\n      } else {\n        this.scheduleDialogVisible = true\n      }\n    },\n    startScheduleCheck() {\n      this.$refs.scheduleForm.validate(valid => {\n        if (valid) {\n          this.scheduleDialogVisible = false\n          this.isScheduled = true\n          this.setupSchedule()\n          this.saveState() // 保存状态\n          this.$message.success('定时检测已开启')\n        }\n      })\n    },\n    stopScheduleCheck() {\n      if (this.scheduleTimer) {\n        clearInterval(this.scheduleTimer)\n        this.scheduleTimer = null\n      }\n      this.isScheduled = false\n      this.nextScheduleTime = null\n      this.saveState() // 保存状态\n      this.$message.success('定时检测已停止')\n    },\n    setupSchedule() {\n      // 清除现有定时器\n      if (this.scheduleTimer) {\n        clearInterval(this.scheduleTimer)\n      }\n\n      const calculateNextExecutionTime = () => {\n        const now = new Date()\n        const [hours, minutes] = this.scheduleForm.executeTime.split(':').map(Number)\n        let nextTime = new Date(now)\n        nextTime.setHours(hours, minutes, 0, 0)\n\n        // 如果当前时间已经过了今天的执行时间，设置为明天\n        if (nextTime <= now) {\n          nextTime.setDate(nextTime.getDate() + 1)\n        }\n\n        // 如果是每周模式，调整到下一个符合条件的星期\n        if (this.scheduleForm.scheduleType === 'weekly') {\n          const targetDay = parseInt(this.scheduleForm.weekDay)\n          while (nextTime.getDay() !== targetDay) {\n            nextTime.setDate(nextTime.getDate() + 1)\n          }\n        }\n\n        return nextTime\n      }\n\n      const scheduleNextExecution = () => {\n        const nextTime = calculateNextExecutionTime()\n        const delay = nextTime.getTime() - new Date().getTime()\n\n        // 更新下次执行时间显示\n        this.nextScheduleTime = nextTime\n\n        // 设置下次执行的定时器\n        this.scheduleTimer = setTimeout(() => {\n          // 如果当前正在检测中，等待检测完成后再执行\n          if (!this.isChecking) {\n            this.handleBatchCheck()\n          }\n          // 设置下一次执行\n          scheduleNextExecution()\n        }, delay)\n      }\n\n      // 开始第一次调度\n      scheduleNextExecution()\n    },\n    // 保存当前状态到本地存储\n    saveState() {\n      try {\n        // 清除旧的分块数据\n        this.clearStorageData()\n\n        // 只保存必要的数据字段，减少数据量\n        const minimalStreamList = this.streamList.map(stream => ({\n          name: stream.name,\n          url: stream.url,\n          group: stream.group,\n          status: stream.status,\n          resolution: stream.resolution || '',\n          responseTime: stream.responseTime || 0\n        }))\n\n        // 将streamList分块存储，减小分块大小\n        const streamListStr = JSON.stringify(minimalStreamList)\n        const chunkSize = 100000 // 减小到100KB\n        const chunks = Math.ceil(streamListStr.length / chunkSize)\n        \n        // 如果数据量太大，只保存基本信息\n        if (chunks > 10) {\n          console.warn('数据量过大，只保存基本状态信息')\n          const basicState = {\n            currentPage: this.currentPage,\n            pageSize: this.pageSize,\n            scheduleForm: this.scheduleForm,\n            collectForm: this.collectForm\n          }\n          localStorage.setItem(this.stateKey, JSON.stringify(basicState))\n          return\n        }\n\n        // 分块存储\n        for (let i = 0; i < chunks; i++) {\n          const chunk = streamListStr.slice(i * chunkSize, (i + 1) * chunkSize)\n          try {\n            localStorage.setItem(`${this.stateKey}_streamList_${i}`, chunk)\n          } catch (e) {\n            console.error('存储分块失败:', e)\n            this.clearStorageData()\n            // 尝试只保存基本信息\n            const basicState = {\n              currentPage: this.currentPage,\n              pageSize: this.pageSize,\n              scheduleForm: this.scheduleForm,\n              collectForm: this.collectForm\n            }\n            localStorage.setItem(this.stateKey, JSON.stringify(basicState))\n            return\n          }\n        }\n\n        // 存储其他状态数据\n        const state = {\n          currentPage: this.currentPage,\n          pageSize: this.pageSize,\n          scheduleForm: this.scheduleForm,\n          collectForm: this.collectForm,\n          streamListChunks: chunks\n        }\n        localStorage.setItem(this.stateKey, JSON.stringify(state))\n      } catch (error) {\n        console.error('保存状态失败:', error)\n        this.clearStorageData()\n        // 尝试只保存基本信息\n        try {\n          const basicState = {\n            currentPage: this.currentPage,\n            pageSize: this.pageSize\n          }\n          localStorage.setItem(this.stateKey, JSON.stringify(basicState))\n        } catch (e) {\n          console.error('保存基本状态也失败:', e)\n        }\n      }\n    },\n\n    // 从本地存储恢复状态\n    restoreState() {\n      try {\n        const savedState = localStorage.getItem(this.stateKey)\n        if (savedState) {\n          const state = JSON.parse(savedState)\n          \n          // 恢复streamList\n          if (state.streamListChunks) {\n            try {\n              let streamListStr = ''\n              for (let i = 0; i < state.streamListChunks; i++) {\n                const chunk = localStorage.getItem(`${this.stateKey}_streamList_${i}`)\n                if (chunk) {\n                  streamListStr += chunk\n                }\n              }\n              if (streamListStr) {\n                this.streamList = JSON.parse(streamListStr)\n              }\n            } catch (e) {\n              console.error('恢复streamList失败:', e)\n              this.streamList = []\n            }\n          }\n          \n          // 恢复其他状态\n          this.currentPage = state.currentPage || 1\n          this.pageSize = state.pageSize || 5\n          if (state.scheduleForm) this.scheduleForm = state.scheduleForm\n          if (state.collectForm) this.collectForm = state.collectForm\n        }\n\n        // 重置所有运行状态\n        this.isChecking = false\n        this.isPaused = false\n        this.isScheduled = false\n        this.isCollecting = false\n        this.checkedCount = 0\n        this.totalCount = 0\n        this.pausedIndex = -1\n        this.nextScheduleTime = null\n      } catch (error) {\n        console.error('恢复状态失败:', error)\n        this.clearStorageData()\n        this.streamList = []\n      }\n    },\n\n    // 清理存储数据\n    clearStorageData() {\n      try {\n        localStorage.removeItem(this.stateKey)\n        for (let i = 0; ; i++) {\n          const key = `${this.stateKey}_streamList_${i}`\n          if (localStorage.getItem(key) === null) {\n            break\n          }\n          localStorage.removeItem(key)\n        }\n      } catch (error) {\n        console.error('清理存储数据失败:', error)\n      }\n    },\n    // 添加重置所有运行状态的方法\n    resetAllStates() {\n      // 停止定时检测\n      if (this.isScheduled) {\n        this.stopScheduleCheck()\n      }\n      \n      // 停止采集\n      if (this.isCollecting) {\n        this.stopCollecting()\n      }\n      \n      // 停止批量检测\n      if (this.isChecking) {\n        this.shouldStop = true\n        this.isChecking = false\n        this.isPaused = false\n      }\n      \n      // 重置所有状态\n      this.isChecking = false\n      this.isPaused = false\n      this.isScheduled = false\n      this.isCollecting = false\n      this.checkedCount = 0\n      this.totalCount = 0\n      this.pausedIndex = -1\n      this.nextScheduleTime = null\n      \n      // 清除所有定时器\n      if (this.scheduleTimer) {\n        clearInterval(this.scheduleTimer)\n        this.scheduleTimer = null\n      }\n      if (this.collectTimer) {\n        clearInterval(this.collectTimer)\n        this.collectTimer = null\n      }\n      \n      // 保存重置后的状态\n      this.saveState()\n      \n      this.$message.success('所有运行状态已重置')\n    },\n    // 更新活动状态\n    updateActiveStatus() {\n      const hasActive = this.isChecking || this.isCollecting || this.isScheduled\n      \n      if (this.hasActiveOperations !== hasActive) {\n        this.hasActiveOperations = hasActive\n        if (hasActive) {\n          // 添加刷新拦截\n          window.addEventListener('beforeunload', this.handleBeforeUnload)\n        } else {\n          // 移除刷新拦截\n          window.removeEventListener('beforeunload', this.handleBeforeUnload)\n        }\n      }\n    },\n    // 处理页面刷新\n    handleBeforeUnload(e) {\n      if (this.hasActiveOperations) {\n        const message = '有正在执行的操作，确定要离开吗？'\n        e.preventDefault()\n        e.returnValue = message\n        return message\n      }\n    },\n    addCollectUrl() {\n      if (!Array.isArray(this.collectForm.urls)) {\n        // 如果 urls 不是数组，先初始化它\n        this.$set(this.collectForm, 'urls', [''])\n      } else {\n        this.collectForm.urls.push('')\n      }\n    },\n    removeCollectUrl(index) {\n      if (Array.isArray(this.collectForm.urls) && this.collectForm.urls.length > 1) {\n        this.collectForm.urls.splice(index, 1)\n      }\n    },\n    // 添加判断分辨率标签类型的方法\n    getResolutionTagType(resolution) {\n      if (!resolution || resolution === '-') return 'info'\n      if (resolution === '多播源') return 'warning'  // 为多播源添加特殊样式\n      const [width] = resolution.split('x').map(Number)\n      if (width >= 1920) return 'success'\n      if (width >= 1280) return ''  // 默认类型\n      return 'warning'\n    },\n    // 添加判断响应时间标签类型的方法\n    getResponseTimeTagType(responseTime) {\n      if (!responseTime || responseTime === '-') return 'info'\n      const time = Number(responseTime)\n      if (time <= 1000) return 'success'\n      if (time <= 2000) return ''  // 默认类型\n      if (time <= 3000) return 'warning'\n      return 'danger'\n    },\n    setupCollectSchedule() {\n      // 清除现有定时器\n      if (this.collectTimer) {\n        clearInterval(this.collectTimer)\n      }\n\n      const calculateNextCollectTime = () => {\n        const now = new Date()\n        const [hours, minutes] = this.collectForm.executeTime.split(':').map(Number)\n        let nextTime = new Date(now)\n        nextTime.setHours(hours, minutes, 0, 0)\n\n        // 如果当前时间已经过了今天的执行时间，设置为明天\n        if (nextTime <= now) {\n          nextTime.setDate(nextTime.getDate() + 1)\n        }\n\n        // 如果是每周模式，调整到下一个符合条件的星期\n        if (this.collectForm.collectType === 'weekly') {\n          const targetDay = parseInt(this.collectForm.weekDay)\n          while (nextTime.getDay() !== targetDay) {\n            nextTime.setDate(nextTime.getDate() + 1)\n          }\n        }\n\n        return nextTime\n      }\n\n      const scheduleNextCollection = () => {\n        const nextTime = calculateNextCollectTime()\n        const delay = nextTime.getTime() - new Date().getTime()\n\n        // 设置下次执行的定时器\n        this.collectTimer = setTimeout(() => {\n          // 执行采集\n          this.collect()\n          // 设置下一次执行\n          scheduleNextCollection()\n        }, delay)\n      }\n\n      // 开始第一次调度\n      scheduleNextCollection()\n    },\n    handleSearch() {\n      this.filteredList = this.streamList.filter(item => {\n        const nameMatch = !this.searchForm.name || \n          item.name.toLowerCase().includes(this.searchForm.name.toLowerCase())\n        \n        const groupMatch = !this.searchForm.group || \n          item.group === this.searchForm.group\n        \n        const statusMatch = !this.searchForm.status || \n          item.status === this.searchForm.status\n        \n        return nameMatch && groupMatch && statusMatch\n      })\n      \n      // 重置到第一页\n      this.currentPage = 1\n      this.searchDialogVisible = false\n    },\n    resetSearch() {\n      this.searchForm = {\n        name: '',\n        group: '',\n        status: ''\n      }\n      this.filteredList = []\n      this.currentPage = 1\n    },\n    // 获取真实IP地址\n    async getRealIp() {\n      try {\n        const response = await fetch(`${this.getBaseUrl()}/api/local-ip`)\n        if (response.ok) {\n          const data = await response.json()\n          this.realIp = data.ip\n          localStorage.setItem('realIp', data.ip)  // 保存真实IP到localStorage\n        }\n      } catch (error) {\n        console.error('获取IP失败:', error)\n      }\n    },\n    // 获取基础URL\n    getBaseUrl() {\n      const useRealIp = localStorage.getItem('useRealIp') === 'true'\n      return useRealIp && this.realIp ? `http://${this.realIp}:8080` : 'http://localhost:8080'\n    },\n    async saveGithubSettings() {\n      try {\n        await this.$refs.syncForm.validate()\n\n        // 保存设置到localStorage\n        localStorage.setItem('githubToken', this.syncForm.token)\n        localStorage.setItem('githubRepo', this.syncForm.repo)\n        localStorage.setItem('githubTxtPath', this.syncForm.txtPath)\n        localStorage.setItem('githubM3uPath', this.syncForm.m3uPath)\n        localStorage.setItem('githubAutoSync', this.syncForm.autoSync)\n        localStorage.setItem('githubSyncType', this.syncForm.syncType)\n        localStorage.setItem('githubExecuteTime', this.syncForm.executeTime)\n        localStorage.setItem('githubWeekDay', this.syncForm.weekDay)\n\n        // 如果开启了自动同步，重新设置定时器\n        if (this.syncForm.autoSync) {\n          this.setupSyncSchedule()\n        } else {\n          this.clearSyncSchedule()\n        }\n\n        this.$message.success('设置已保存')\n        this.syncDialogVisible = false\n      } catch (error) {\n        this.$message.error(error.message || '保存失败')\n      }\n    },\n    async syncToGithub(content, path) {\n      const response = await fetch(`${this.getBaseUrl()}/api/sync-github`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          token: this.syncForm.token,\n          repo: this.syncForm.repo,\n          path: path,\n          content: content,\n          message: this.syncForm.message\n        })\n      })\n      \n      if (!response.ok) {\n        throw new Error('同步失败')\n      }\n    },\n    handleAutoSyncChange(value) {\n      if (value) {\n        this.setupSyncSchedule()\n      } else {\n        this.clearSyncSchedule()\n      }\n    },\n    setupSyncSchedule() {\n      this.clearSyncSchedule()\n      const calculateNextSyncTime = () => {\n        const now = new Date()\n        const [hours, minutes] = this.syncForm.executeTime.split(':').map(Number)\n        let nextTime = new Date(now)\n        nextTime.setHours(hours, minutes, 0, 0)\n\n        // 如果当前时间已经过了今天的执行时间，设置为明天\n        if (nextTime <= now) {\n          nextTime.setDate(nextTime.getDate() + 1)\n        }\n\n        // 如果是每周模式，调整到下一个符合条件的星期\n        if (this.syncForm.syncType === 'weekly') {\n          const targetDay = parseInt(this.syncForm.weekDay)\n          while (nextTime.getDay() !== targetDay) {\n            nextTime.setDate(nextTime.getDate() + 1)\n          }\n        }\n\n        return nextTime\n      }\n\n      const scheduleNextSync = () => {\n        const nextTime = calculateNextSyncTime()\n        const delay = nextTime.getTime() - new Date().getTime()\n\n        // 设置下次执行的定时器\n        this.syncTimer = setTimeout(async () => {\n          try {\n            // 执行同步\n            await this.syncToGithub(this.generateContent('txt'), this.syncForm.txtPath)\n            await this.syncToGithub(this.generateContent('m3u'), this.syncForm.m3uPath)\n            this.$message.success('已同步到GitHub')\n          } catch (error) {\n            this.$message.error('同步失败：' + error.message)\n          }\n          // 设置下一次执行\n          scheduleNextSync()\n        }, delay)\n      }\n\n      // 开始第一次调度\n      scheduleNextSync()\n    },\n    clearSyncSchedule() {\n      if (this.syncTimer) {\n        clearInterval(this.syncTimer)\n        this.syncTimer = null\n      }\n    },\n    getStatusTagType(status) {\n      switch (status) {\n        case '正常':\n          return 'success'\n        case '异常':\n          return 'danger'\n        case '未知':\n          return 'warning'\n        case '未检测':\n          return 'info'\n        default:\n          return 'info'\n      }\n    }\n  },\n  watch: {\n    // 只监听数据变化\n    streamList: {\n      handler() {\n        this.updateLinkContent()\n        this.saveState()\n      },\n      deep: true\n    },\n    currentPage() {\n      this.saveState()\n    },\n    pageSize() {\n      this.saveState()\n    },\n    // 监听所有可能的运行状态\n    isChecking() {\n      this.updateActiveStatus()\n    },\n    isCollecting() {\n      this.updateActiveStatus()\n    },\n    isScheduled() {\n      this.updateActiveStatus()\n    },\n    // 添加格式变化监听\n    'linkForm.format'() {\n      if (this.generateLinkDialogVisible) {\n        this.handleGenerateLink()\n      }\n    }\n  },\n  // 组件被激活时（重新显示）\n  activated() {\n    // 如果有定时任务，恢复定时器\n    if (this.isScheduled) {\n      this.setupSchedule()\n    }\n    // 如果有采集任务，恢复采集\n    if (this.isCollecting) {\n      this.startCollecting(true)\n    }\n    // 如果有GitHub自动同步，恢复同步定时器\n    if (this.syncForm.autoSync) {\n      this.setupSyncSchedule()\n    }\n  },\n  // 组件被停用时（离开但不销毁）\n  deactivated() {\n    // 暂停定时器，但保持状态标志\n    if (this.scheduleTimer) {\n      clearInterval(this.scheduleTimer)\n      this.scheduleTimer = null\n    }\n    // 暂停采集定时器，但保持状态标志\n    if (this.collectTimer) {\n      clearInterval(this.collectTimer)\n      this.collectTimer = null\n    }\n    // 暂停同步定时器，但保持状态标志\n    if (this.syncTimer) {\n      clearInterval(this.syncTimer)\n      this.syncTimer = null\n    }\n  }\n}\n</script>\n\n<style scoped>\n.stream-check {\n  padding: 25px;\n  background-color: #fff;\n  border-radius: 4px;\n  height: calc(100vh - 130px);\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  position: relative;\n}\n\n.table-operations {\n  margin-bottom: 20px;\n  flex-shrink: 0;\n}\n\n.button-groups {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  align-items: center;\n}\n\n.button-group {\n  display: flex;\n  align-items: center;\n}\n\n/* 确保按钮组在小屏幕上不会被压缩 */\n:deep(.el-button-group) {\n  white-space: nowrap;\n  margin: 0;\n}\n\n/* 确保按钮内容不会换行 */\n:deep(.el-button) {\n  white-space: nowrap;\n}\n\n/* 在较小屏幕上调整按钮大小 */\n@media screen and (max-width: 768px) {\n  :deep(.el-button) {\n    padding: 8px 15px;\n    font-size: 12px;\n  }\n  \n  :deep(.el-button [class*=\"el-icon-\"]) {\n    font-size: 14px;\n  }\n}\n\n/* 在更小的屏幕上进一步调整 */\n@media screen and (max-width: 576px) {\n  .button-groups {\n    gap: 5px;\n  }\n  \n  :deep(.el-button) {\n    padding: 6px 10px;\n    font-size: 12px;\n  }\n}\n\n/* 添加表格容器样式 */\n.el-table-wrapper {\n  flex: 1;\n  position: relative; /* 添加相对定位 */\n  min-height: 200px; /* 设置最小高度 */\n}\n\n/* 覆盖 element-ui 的表格样式 */\n:deep(.el-table) {\n  position: absolute; /* 绝对定位 */\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  height: 100%;\n  max-height: 100%;\n}\n\n:deep(.el-table__body-wrapper) {\n  height: calc(100% - 40px) !important; /* 减去表头高度 */\n  overflow-y: auto !important;\n}\n\n:deep(.el-table__fixed-right) {\n  height: 100% !important; /* 修复固定列的高度 */\n  bottom: 0px;\n}\n\n:deep(.el-table__fixed-right .el-table__fixed-body-wrapper) {\n  height: calc(100% - 40px) !important; /* 减去表头高度 */\n}\n\n.pagination-container {\n  margin-top: 20px;\n  display: flex;\n  justify-content: center;\n  flex-shrink: 0; /* 防止分页被压缩 */\n  padding-bottom: 10px; /* 添加底部间距 */\n  background-color: #fff; /* 确保分页器背景色 */\n  position: relative; /* 添加相对定位 */\n  z-index: 1; /* 确保分页器在最上层 */\n}\n\n.el-button [class*=\"el-icon-\"] {\n  font-size: 18px;\n}\n\n.delete-btn {\n  color: #F56C6C;\n}\n\n.delete-btn:hover {\n  color: #ff4d4d;\n}\n\n.setting-tip {\n  margin-left: 10px;\n  color: #909399;\n  font-size: 13px;\n}\n\n.link-info {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.link-info p {\n  margin: 0;\n  color: #606266;\n}\n\n.link-actions {\n  display: flex;\n  gap: 10px;\n  justify-content: flex-end;\n  margin-top: 10px;\n}\n\n/* 生成链接对话框样式 */\n.generate-link-dialog {\n  max-width: 600px;\n}\n\n.link-container {\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n}\n\n.link-card, .tips-card {\n  margin: 0;\n  border: 1px solid #EBEEF5;\n}\n\n.link-content {\n  padding: 10px;\n}\n\n.tips-content {\n  color: #606266;\n  font-size: 14px;\n  padding: 10px;\n}\n\n.tips-content ul {\n  margin: 0;\n  padding-left: 20px;\n  line-height: 1.8;\n}\n\n/* 覆盖 element-ui 的一些默认样式 */\n:deep(.el-dialog__body) {\n  padding: 20px;\n}\n\n:deep(.el-card__header) {\n  padding: 12px 20px;\n  font-weight: 500;\n}\n\n:deep(.el-card__body) {\n  padding: 15px;\n}\n\n/* 可以添加一些自定义样式 */\n.el-tag {\n  width: 90px;  /* 统一标签宽度 */\n}\n\n.el-tag + .el-tag {\n  margin-left: 4px;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}