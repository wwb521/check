{"ast":null,"code":"export default {\n  name: 'StreamSource',\n  data() {\n    return {\n      streamUrl: '',\n      dialogVisible: false,\n      generatedLink: ''\n    };\n  },\n  methods: {\n    async generateLink() {\n      if (this.streamUrl.trim()) {\n        try {\n          // 这里应该调用后端 API 来保存文本内容并获取访问链接\n          // 示例：假设后端提供了 /api/stream-source/create 接口\n          const response = await this.$http.post('/api/stream-source/create', {\n            content: this.streamUrl.trim()\n          });\n\n          // 假设后端返回的数据格式为 { url: 'xxx' }\n          this.generatedLink = response.data.url;\n          this.dialogVisible = true;\n        } catch (error) {\n          this.$message({\n            message: '生成链接失败，请重试',\n            type: 'error',\n            duration: 2000\n          });\n        }\n      } else {\n        this.$message({\n          message: '请输入直播源地址',\n          type: 'warning',\n          duration: 2000\n        });\n      }\n    },\n    copyLink() {\n      navigator.clipboard.writeText(this.generatedLink).then(() => {\n        this.$message({\n          message: '链接已复制到剪贴板',\n          type: 'success',\n          duration: 2000\n        });\n      }).catch(() => {\n        this.$message({\n          message: '复制失败，请手动复制',\n          type: 'error',\n          duration: 2000\n        });\n      });\n    }\n  }\n};","map":{"version":3,"names":["name","data","streamUrl","dialogVisible","generatedLink","methods","generateLink","trim","response","$http","post","content","url","error","$message","message","type","duration","copyLink","navigator","clipboard","writeText","then","catch"],"sources":["src/views/StreamSource.vue"],"sourcesContent":["<template>\r\n  <div class=\"stream-source-container\">\r\n    <el-card class=\"box-card\">\r\n      <div slot=\"header\" class=\"card-header\">\r\n        <span>直播源整合</span>\r\n      </div>\r\n      <div class=\"card-content\">\r\n        <div class=\"input-section\">\r\n          <el-input\r\n            v-model=\"streamUrl\"\r\n            type=\"textarea\"\r\n            :rows=\"8\"\r\n            placeholder=\"请输入直播源地址，每行一个地址\"\r\n            :autosize=\"{ minRows: 8, maxRows: 15 }\"\r\n          ></el-input>\r\n          <div class=\"input-tip\">支持多个地址，每行输入一个地址</div>\r\n          \r\n          <div class=\"button-section\">\r\n            <el-button type=\"primary\" @click=\"generateLink\" :disabled=\"!streamUrl.trim()\">\r\n              生成链接\r\n            </el-button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </el-card>\r\n\r\n    <!-- 生成链接对话框 -->\r\n    <el-dialog\r\n      title=\"生成的链接\"\r\n      :visible.sync=\"dialogVisible\"\r\n      width=\"600px\"\r\n      :close-on-click-modal=\"false\"\r\n      custom-class=\"link-dialog\"\r\n    >\r\n      <div class=\"link-input-container\">\r\n        <div class=\"link-label\">链接地址</div>\r\n        <div class=\"link-content\">\r\n          <el-input\r\n            v-model=\"generatedLink\"\r\n            readonly\r\n            class=\"link-input\"\r\n          >\r\n            <el-button slot=\"append\" @click=\"copyLink\">复制</el-button>\r\n          </el-input>\r\n        </div>\r\n      </div>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'StreamSource',\r\n  data() {\r\n    return {\r\n      streamUrl: '',\r\n      dialogVisible: false,\r\n      generatedLink: ''\r\n    }\r\n  },\r\n  methods: {\r\n    async generateLink() {\r\n      if (this.streamUrl.trim()) {\r\n        try {\r\n          // 这里应该调用后端 API 来保存文本内容并获取访问链接\r\n          // 示例：假设后端提供了 /api/stream-source/create 接口\r\n          const response = await this.$http.post('/api/stream-source/create', {\r\n            content: this.streamUrl.trim()\r\n          });\r\n          \r\n          // 假设后端返回的数据格式为 { url: 'xxx' }\r\n          this.generatedLink = response.data.url;\r\n          this.dialogVisible = true;\r\n        } catch (error) {\r\n          this.$message({\r\n            message: '生成链接失败，请重试',\r\n            type: 'error',\r\n            duration: 2000\r\n          });\r\n        }\r\n      } else {\r\n        this.$message({\r\n          message: '请输入直播源地址',\r\n          type: 'warning',\r\n          duration: 2000\r\n        });\r\n      }\r\n    },\r\n    copyLink() {\r\n      navigator.clipboard.writeText(this.generatedLink)\r\n        .then(() => {\r\n          this.$message({\r\n            message: '链接已复制到剪贴板',\r\n            type: 'success',\r\n            duration: 2000\r\n          });\r\n        })\r\n        .catch(() => {\r\n          this.$message({\r\n            message: '复制失败，请手动复制',\r\n            type: 'error',\r\n            duration: 2000\r\n          });\r\n        });\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.stream-source-container {\r\n  padding: 20px;\r\n}\r\n\r\n.card-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.card-content {\r\n  min-height: 300px;\r\n}\r\n\r\n.input-section {\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n  padding: 20px 0;\r\n}\r\n\r\n.input-tip {\r\n  font-size: 12px;\r\n  color: #909399;\r\n  margin-top: 8px;\r\n  margin-bottom: 20px;\r\n  line-height: 1.4;\r\n}\r\n\r\n:deep(.el-textarea__inner) {\r\n  font-family: 'Consolas', 'Monaco', monospace;\r\n  font-size: 14px;\r\n  line-height: 1.6;\r\n}\r\n\r\n.button-section {\r\n  text-align: center;\r\n  margin-top: 20px;\r\n}\r\n\r\n/* 对话框样式 */\r\n:deep(.link-dialog) {\r\n  .el-dialog__header {\r\n    padding: 15px 20px;\r\n    border-bottom: 1px solid #e4e7ed;\r\n  }\r\n  \r\n  .el-dialog__body {\r\n    padding: 20px;\r\n  }\r\n  \r\n  .el-dialog__footer {\r\n    display: none;\r\n  }\r\n}\r\n\r\n.link-input-container {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n}\r\n\r\n.link-label {\r\n  width: 70px;\r\n  color: #606266;\r\n  font-size: 14px;\r\n}\r\n\r\n.link-content {\r\n  flex: 1;\r\n}\r\n\r\n:deep(.link-input) {\r\n  .el-input__inner {\r\n    border-right: none;\r\n  }\r\n  \r\n  .el-input-group__append {\r\n    background-color: #fff;\r\n    border-left: none;\r\n    \r\n    .el-button {\r\n      border: none;\r\n      padding: 0 15px;\r\n      \r\n      &:hover {\r\n        color: #409EFF;\r\n      }\r\n    }\r\n  }\r\n}\r\n</style> "],"mappings":"AAmDA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,SAAA;MACAC,aAAA;MACAC,aAAA;IACA;EACA;EACAC,OAAA;IACA,MAAAC,aAAA;MACA,SAAAJ,SAAA,CAAAK,IAAA;QACA;UACA;UACA;UACA,MAAAC,QAAA,cAAAC,KAAA,CAAAC,IAAA;YACAC,OAAA,OAAAT,SAAA,CAAAK,IAAA;UACA;;UAEA;UACA,KAAAH,aAAA,GAAAI,QAAA,CAAAP,IAAA,CAAAW,GAAA;UACA,KAAAT,aAAA;QACA,SAAAU,KAAA;UACA,KAAAC,QAAA;YACAC,OAAA;YACAC,IAAA;YACAC,QAAA;UACA;QACA;MACA;QACA,KAAAH,QAAA;UACAC,OAAA;UACAC,IAAA;UACAC,QAAA;QACA;MACA;IACA;IACAC,SAAA;MACAC,SAAA,CAAAC,SAAA,CAAAC,SAAA,MAAAjB,aAAA,EACAkB,IAAA;QACA,KAAAR,QAAA;UACAC,OAAA;UACAC,IAAA;UACAC,QAAA;QACA;MACA,GACAM,KAAA;QACA,KAAAT,QAAA;UACAC,OAAA;UACAC,IAAA;UACAC,QAAA;QACA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}