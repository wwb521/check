{"ast":null,"code":"export default {\n  name: 'StreamCheck',\n  data() {\n    return {\n      // No changes to data section\n    };\n  },\n  computed: {\n    // No changes to computed section\n  },\n  created() {\n    // No changes to created section\n  },\n  beforeDestroy() {\n    // No changes to beforeDestroy section\n  },\n  methods: {\n    // No changes to methods section\n    setupSyncSchedule() {\n      this.clearSyncSchedule();\n      const calculateNextSyncTime = () => {\n        const now = new Date();\n        const [hours, minutes] = this.syncForm.executeTime.split(':').map(Number);\n        let nextTime = new Date(now);\n        nextTime.setHours(hours, minutes, 0, 0);\n\n        // 如果当前时间已经过了今天的执行时间，设置为明天\n        if (nextTime <= now) {\n          nextTime.setDate(nextTime.getDate() + 1);\n        }\n\n        // 如果是每周模式，调整到下一个符合条件的星期\n        if (this.syncForm.syncType === 'weekly') {\n          const targetDay = parseInt(this.syncForm.weekDay);\n          while (nextTime.getDay() !== targetDay) {\n            nextTime.setDate(nextTime.getDate() + 1);\n          }\n        }\n        return nextTime;\n      };\n      const scheduleNextSync = () => {\n        const nextTime = calculateNextSyncTime();\n        const delay = nextTime.getTime() - new Date().getTime();\n\n        // 设置下次执行的定时器\n        this.syncTimer = setTimeout(() => {\n          // 执行同步\n          this.handleSync();\n          // 设置下一次执行\n          scheduleNextSync();\n        }, delay);\n      };\n\n      // 开始第一次调度\n      scheduleNextSync();\n    }\n    // No changes to other methods\n  },\n  watch: {\n    // No changes to watch section\n  },\n  activated() {\n    // No changes to activated section\n  },\n  deactivated() {\n    // No changes to deactivated section\n  }\n};","map":{"version":3,"names":["name","data","computed","created","beforeDestroy","methods","setupSyncSchedule","clearSyncSchedule","calculateNextSyncTime","now","Date","hours","minutes","syncForm","executeTime","split","map","Number","nextTime","setHours","setDate","getDate","syncType","targetDay","parseInt","weekDay","getDay","scheduleNextSync","delay","getTime","syncTimer","setTimeout","handleSync","watch","activated","deactivated"],"sources":["src/components/StreamCheck.vue"],"sourcesContent":["<template>\n  <!-- No changes to template section -->\n</template>\n\n<script>\nexport default {\n  name: 'StreamCheck',\n  data() {\n    return {\n      // No changes to data section\n    }\n  },\n  computed: {\n    // No changes to computed section\n  },\n  created() {\n    // No changes to created section\n  },\n  beforeDestroy() {\n    // No changes to beforeDestroy section\n  },\n  methods: {\n    // No changes to methods section\n    setupSyncSchedule() {\n      this.clearSyncSchedule()\n\n      const calculateNextSyncTime = () => {\n        const now = new Date()\n        const [hours, minutes] = this.syncForm.executeTime.split(':').map(Number)\n        let nextTime = new Date(now)\n        nextTime.setHours(hours, minutes, 0, 0)\n\n        // 如果当前时间已经过了今天的执行时间，设置为明天\n        if (nextTime <= now) {\n          nextTime.setDate(nextTime.getDate() + 1)\n        }\n\n        // 如果是每周模式，调整到下一个符合条件的星期\n        if (this.syncForm.syncType === 'weekly') {\n          const targetDay = parseInt(this.syncForm.weekDay)\n          while (nextTime.getDay() !== targetDay) {\n            nextTime.setDate(nextTime.getDate() + 1)\n          }\n        }\n\n        return nextTime\n      }\n\n      const scheduleNextSync = () => {\n        const nextTime = calculateNextSyncTime()\n        const delay = nextTime.getTime() - new Date().getTime()\n\n        // 设置下次执行的定时器\n        this.syncTimer = setTimeout(() => {\n          // 执行同步\n          this.handleSync()\n          // 设置下一次执行\n          scheduleNextSync()\n        }, delay)\n      }\n\n      // 开始第一次调度\n      scheduleNextSync()\n    },\n    // No changes to other methods\n  },\n  watch: {\n    // No changes to watch section\n  },\n  activated() {\n    // No changes to activated section\n  },\n  deactivated() {\n    // No changes to deactivated section\n  }\n}\n</script>\n\n<style scoped>\n/* No changes to style section */\n</style> "],"mappings":"AAKA;EACAA,IAAA;EACAC,KAAA;IACA;MACA;IAAA,CACA;EACA;EACAC,QAAA;IACA;EAAA,CACA;EACAC,QAAA;IACA;EAAA,CACA;EACAC,cAAA;IACA;EAAA,CACA;EACAC,OAAA;IACA;IACAC,kBAAA;MACA,KAAAC,iBAAA;MAEA,MAAAC,qBAAA,GAAAA,CAAA;QACA,MAAAC,GAAA,OAAAC,IAAA;QACA,OAAAC,KAAA,EAAAC,OAAA,SAAAC,QAAA,CAAAC,WAAA,CAAAC,KAAA,MAAAC,GAAA,CAAAC,MAAA;QACA,IAAAC,QAAA,OAAAR,IAAA,CAAAD,GAAA;QACAS,QAAA,CAAAC,QAAA,CAAAR,KAAA,EAAAC,OAAA;;QAEA;QACA,IAAAM,QAAA,IAAAT,GAAA;UACAS,QAAA,CAAAE,OAAA,CAAAF,QAAA,CAAAG,OAAA;QACA;;QAEA;QACA,SAAAR,QAAA,CAAAS,QAAA;UACA,MAAAC,SAAA,GAAAC,QAAA,MAAAX,QAAA,CAAAY,OAAA;UACA,OAAAP,QAAA,CAAAQ,MAAA,OAAAH,SAAA;YACAL,QAAA,CAAAE,OAAA,CAAAF,QAAA,CAAAG,OAAA;UACA;QACA;QAEA,OAAAH,QAAA;MACA;MAEA,MAAAS,gBAAA,GAAAA,CAAA;QACA,MAAAT,QAAA,GAAAV,qBAAA;QACA,MAAAoB,KAAA,GAAAV,QAAA,CAAAW,OAAA,SAAAnB,IAAA,GAAAmB,OAAA;;QAEA;QACA,KAAAC,SAAA,GAAAC,UAAA;UACA;UACA,KAAAC,UAAA;UACA;UACAL,gBAAA;QACA,GAAAC,KAAA;MACA;;MAEA;MACAD,gBAAA;IACA;IACA;EACA;EACAM,KAAA;IACA;EAAA,CACA;EACAC,UAAA;IACA;EAAA,CACA;EACAC,YAAA;IACA;EAAA;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}