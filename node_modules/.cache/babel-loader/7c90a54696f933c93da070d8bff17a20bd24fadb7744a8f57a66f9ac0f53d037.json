{"ast":null,"code":"export default {\n  name: 'StreamCheck',\n  data() {\n    return {\n      // No changes to data section\n    };\n  },\n  computed: {\n    // No changes to computed section\n  },\n  created() {\n    // 初始化时加载持久化的数据\n    if (localStorage.getItem('persistentData') === 'true') {\n      const savedList = localStorage.getItem('streamList');\n      if (savedList) {\n        this.streamList = JSON.parse(savedList);\n      }\n    }\n\n    // 监听保存事件\n    this.$root.$on('save-stream-list', this.saveStreamList);\n\n    // 从本地存储恢复状态\n    this.restoreState();\n    // 如果定时检测是开启状态，重新启动定时器\n    if (this.isScheduled) {\n      this.setupSchedule();\n    }\n    // 如果采集是开启状态，重新启动采集\n    if (this.isCollecting) {\n      this.startCollecting(true); // true表示是恢复状态\n    }\n    // 如果GitHub自动同步是开启状态，重新启动同步定时器\n    if (this.syncForm.autoSync) {\n      this.setupSyncSchedule();\n    }\n    this.filteredList = [];\n    this.getRealIp(); // 获取真实IP地址\n  },\n  beforeDestroy() {\n    // No changes to beforeDestroy section\n  },\n  methods: {\n    // No changes to methods section\n    async handleSync() {\n      try {\n        await this.$refs.syncForm.validate();\n\n        // 保存设置\n        localStorage.setItem('githubToken', this.syncForm.token);\n        localStorage.setItem('githubRepo', this.syncForm.repo);\n        localStorage.setItem('githubTxtPath', this.syncForm.txtPath);\n        localStorage.setItem('githubM3uPath', this.syncForm.m3uPath);\n        localStorage.setItem('githubAutoSync', this.syncForm.autoSync);\n        localStorage.setItem('githubSyncType', this.syncForm.syncType);\n        localStorage.setItem('githubExecuteTime', this.syncForm.executeTime);\n        localStorage.setItem('githubWeekDay', this.syncForm.weekDay);\n\n        // 如果开启了自动同步，重新设置定时器\n        if (this.syncForm.autoSync) {\n          this.setupSyncSchedule();\n        }\n\n        // 同步 TXT 内容\n        const txtContent = this.generateContent('txt');\n        await this.syncToGithub(txtContent, this.syncForm.txtPath);\n\n        // 同步 M3U 内容\n        const m3uContent = this.generateContent('m3u');\n        await this.syncToGithub(m3uContent, this.syncForm.m3uPath);\n        this.$message.success('同步成功');\n        this.syncDialogVisible = false;\n      } catch (error) {\n        this.$message.error(error.message || '同步失败');\n      }\n    }\n  },\n  watch: {\n    // No changes to watch section\n  },\n  activated() {\n    // 如果有定时任务，恢复定时器\n    if (this.isScheduled) {\n      this.setupSchedule();\n    }\n    // 如果有采集任务，恢复采集\n    if (this.isCollecting) {\n      this.startCollecting(true);\n    }\n    // 如果有GitHub自动同步，恢复同步定时器\n    if (this.syncForm.autoSync) {\n      this.setupSyncSchedule();\n    }\n  },\n  deactivated() {\n    // No changes to deactivated section\n  }\n};","map":{"version":3,"names":["name","data","computed","created","localStorage","getItem","savedList","streamList","JSON","parse","$root","$on","saveStreamList","restoreState","isScheduled","setupSchedule","isCollecting","startCollecting","syncForm","autoSync","setupSyncSchedule","filteredList","getRealIp","beforeDestroy","methods","handleSync","$refs","validate","setItem","token","repo","txtPath","m3uPath","syncType","executeTime","weekDay","txtContent","generateContent","syncToGithub","m3uContent","$message","success","syncDialogVisible","error","message","watch","activated","deactivated"],"sources":["src/components/StreamCheck.vue"],"sourcesContent":["<template>\n  <!-- No changes to template section -->\n</template>\n\n<script>\nexport default {\n  name: 'StreamCheck',\n  data() {\n    return {\n      // No changes to data section\n    }\n  },\n  computed: {\n    // No changes to computed section\n  },\n  created() {\n    // 初始化时加载持久化的数据\n    if (localStorage.getItem('persistentData') === 'true') {\n      const savedList = localStorage.getItem('streamList')\n      if (savedList) {\n        this.streamList = JSON.parse(savedList)\n      }\n    }\n\n    // 监听保存事件\n    this.$root.$on('save-stream-list', this.saveStreamList)\n\n    // 从本地存储恢复状态\n    this.restoreState()\n    // 如果定时检测是开启状态，重新启动定时器\n    if (this.isScheduled) {\n      this.setupSchedule()\n    }\n    // 如果采集是开启状态，重新启动采集\n    if (this.isCollecting) {\n      this.startCollecting(true) // true表示是恢复状态\n    }\n    // 如果GitHub自动同步是开启状态，重新启动同步定时器\n    if (this.syncForm.autoSync) {\n      this.setupSyncSchedule()\n    }\n\n    this.filteredList = []\n    this.getRealIp()  // 获取真实IP地址\n  },\n  beforeDestroy() {\n    // No changes to beforeDestroy section\n  },\n  methods: {\n    // No changes to methods section\n    async handleSync() {\n      try {\n        await this.$refs.syncForm.validate()\n        \n        // 保存设置\n        localStorage.setItem('githubToken', this.syncForm.token)\n        localStorage.setItem('githubRepo', this.syncForm.repo)\n        localStorage.setItem('githubTxtPath', this.syncForm.txtPath)\n        localStorage.setItem('githubM3uPath', this.syncForm.m3uPath)\n        localStorage.setItem('githubAutoSync', this.syncForm.autoSync)\n        localStorage.setItem('githubSyncType', this.syncForm.syncType)\n        localStorage.setItem('githubExecuteTime', this.syncForm.executeTime)\n        localStorage.setItem('githubWeekDay', this.syncForm.weekDay)\n\n        // 如果开启了自动同步，重新设置定时器\n        if (this.syncForm.autoSync) {\n          this.setupSyncSchedule()\n        }\n        \n        // 同步 TXT 内容\n        const txtContent = this.generateContent('txt')\n        await this.syncToGithub(txtContent, this.syncForm.txtPath)\n\n        // 同步 M3U 内容\n        const m3uContent = this.generateContent('m3u')\n        await this.syncToGithub(m3uContent, this.syncForm.m3uPath)\n\n        this.$message.success('同步成功')\n        this.syncDialogVisible = false\n      } catch (error) {\n        this.$message.error(error.message || '同步失败')\n      }\n    },\n  },\n  watch: {\n    // No changes to watch section\n  },\n  activated() {\n    // 如果有定时任务，恢复定时器\n    if (this.isScheduled) {\n      this.setupSchedule()\n    }\n    // 如果有采集任务，恢复采集\n    if (this.isCollecting) {\n      this.startCollecting(true)\n    }\n    // 如果有GitHub自动同步，恢复同步定时器\n    if (this.syncForm.autoSync) {\n      this.setupSyncSchedule()\n    }\n  },\n  deactivated() {\n    // No changes to deactivated section\n  }\n}\n</script>\n\n<style scoped>\n/* No changes to style section */\n</style> "],"mappings":"AAKA;EACAA,IAAA;EACAC,KAAA;IACA;MACA;IAAA,CACA;EACA;EACAC,QAAA;IACA;EAAA,CACA;EACAC,QAAA;IACA;IACA,IAAAC,YAAA,CAAAC,OAAA;MACA,MAAAC,SAAA,GAAAF,YAAA,CAAAC,OAAA;MACA,IAAAC,SAAA;QACA,KAAAC,UAAA,GAAAC,IAAA,CAAAC,KAAA,CAAAH,SAAA;MACA;IACA;;IAEA;IACA,KAAAI,KAAA,CAAAC,GAAA,0BAAAC,cAAA;;IAEA;IACA,KAAAC,YAAA;IACA;IACA,SAAAC,WAAA;MACA,KAAAC,aAAA;IACA;IACA;IACA,SAAAC,YAAA;MACA,KAAAC,eAAA;IACA;IACA;IACA,SAAAC,QAAA,CAAAC,QAAA;MACA,KAAAC,iBAAA;IACA;IAEA,KAAAC,YAAA;IACA,KAAAC,SAAA;EACA;EACAC,cAAA;IACA;EAAA,CACA;EACAC,OAAA;IACA;IACA,MAAAC,WAAA;MACA;QACA,WAAAC,KAAA,CAAAR,QAAA,CAAAS,QAAA;;QAEA;QACAvB,YAAA,CAAAwB,OAAA,qBAAAV,QAAA,CAAAW,KAAA;QACAzB,YAAA,CAAAwB,OAAA,oBAAAV,QAAA,CAAAY,IAAA;QACA1B,YAAA,CAAAwB,OAAA,uBAAAV,QAAA,CAAAa,OAAA;QACA3B,YAAA,CAAAwB,OAAA,uBAAAV,QAAA,CAAAc,OAAA;QACA5B,YAAA,CAAAwB,OAAA,wBAAAV,QAAA,CAAAC,QAAA;QACAf,YAAA,CAAAwB,OAAA,wBAAAV,QAAA,CAAAe,QAAA;QACA7B,YAAA,CAAAwB,OAAA,2BAAAV,QAAA,CAAAgB,WAAA;QACA9B,YAAA,CAAAwB,OAAA,uBAAAV,QAAA,CAAAiB,OAAA;;QAEA;QACA,SAAAjB,QAAA,CAAAC,QAAA;UACA,KAAAC,iBAAA;QACA;;QAEA;QACA,MAAAgB,UAAA,QAAAC,eAAA;QACA,WAAAC,YAAA,CAAAF,UAAA,OAAAlB,QAAA,CAAAa,OAAA;;QAEA;QACA,MAAAQ,UAAA,QAAAF,eAAA;QACA,WAAAC,YAAA,CAAAC,UAAA,OAAArB,QAAA,CAAAc,OAAA;QAEA,KAAAQ,QAAA,CAAAC,OAAA;QACA,KAAAC,iBAAA;MACA,SAAAC,KAAA;QACA,KAAAH,QAAA,CAAAG,KAAA,CAAAA,KAAA,CAAAC,OAAA;MACA;IACA;EACA;EACAC,KAAA;IACA;EAAA,CACA;EACAC,UAAA;IACA;IACA,SAAAhC,WAAA;MACA,KAAAC,aAAA;IACA;IACA;IACA,SAAAC,YAAA;MACA,KAAAC,eAAA;IACA;IACA;IACA,SAAAC,QAAA,CAAAC,QAAA;MACA,KAAAC,iBAAA;IACA;EACA;EACA2B,YAAA;IACA;EAAA;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}