{"ast":null,"code":"export default {\n  name: 'SettingsPage',\n  data() {\n    return {\n      settings: {\n        ffprobePath: localStorage.getItem('ffprobePath') || '',\n        persistentData: localStorage.getItem('persistentData') === 'true',\n        autoRemoveInvalid: localStorage.getItem('autoRemoveInvalid') === 'true',\n        autoRemoveLowRes: localStorage.getItem('autoRemoveLowRes') === 'true',\n        autoRemoveSlowResponse: localStorage.getItem('autoRemoveSlowResponse') === 'true'\n      }\n    };\n  },\n  methods: {\n    async testFfprobe() {\n      if (!this.settings.ffprobePath) {\n        this.$message.warning('请先输入FFprobe路径');\n        return;\n      }\n      this.$message.info('正在测试FFprobe...');\n      try {\n        const response = await fetch('http://localhost:8080/api/test-ffprobe', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            path: this.settings.ffprobePath\n          })\n        });\n        if (!response.ok) throw new Error('请求失败');\n        const result = await response.json();\n        if (result.success) {\n          this.$message.success('FFprobe测试成功');\n        } else {\n          throw new Error(result.message);\n        }\n      } catch (error) {\n        this.$message.error('FFprobe测试失败: ' + error.message);\n      }\n    },\n    handlePersistentChange(value) {\n      if (value) {\n        // 开启持久化时，保存当前列表\n        this.saveStreamList();\n      } else {\n        // 关闭持久化时，清除所有保存的数据\n        localStorage.removeItem('streamList');\n        localStorage.removeItem('streamCheckState');\n        // 通知 StreamCheck 组件重置列表\n        this.$root.$emit('reset-stream-list');\n      }\n      this.handleSettingChange();\n    },\n    handleSettingChange() {\n      this.saveSettings();\n    },\n    saveSettings() {\n      this.$refs.settingsForm.validate(valid => {\n        if (valid) {\n          localStorage.setItem('ffprobePath', this.settings.ffprobePath);\n          localStorage.setItem('persistentData', this.settings.persistentData);\n          localStorage.setItem('autoRemoveInvalid', this.settings.autoRemoveInvalid);\n          localStorage.setItem('autoRemoveLowRes', this.settings.autoRemoveLowRes);\n          localStorage.setItem('autoRemoveSlowResponse', this.settings.autoRemoveSlowResponse);\n          this.$message.success('设置保存成功');\n        }\n      });\n    },\n    saveStreamList() {\n      // 触发保存事件，由 StreamCheck 组件处理\n      this.$root.$emit('save-stream-list');\n    }\n  }\n};","map":{"version":3,"names":["name","data","settings","ffprobePath","localStorage","getItem","persistentData","autoRemoveInvalid","autoRemoveLowRes","autoRemoveSlowResponse","methods","testFfprobe","$message","warning","info","response","fetch","method","headers","body","JSON","stringify","path","ok","Error","result","json","success","message","error","handlePersistentChange","value","saveStreamList","removeItem","$root","$emit","handleSettingChange","saveSettings","$refs","settingsForm","validate","valid","setItem"],"sources":["src/views/Settings.vue"],"sourcesContent":["<template>\n  <div class=\"settings\">\n    <el-card class=\"settings-card\">\n      <div slot=\"header\">\n        <span>系统设置</span>\n      </div>\n      \n      <el-form :model=\"settings\" ref=\"settingsForm\" label-width=\"180px\">\n        <el-form-item \n          label=\"FFprobe路径\" \n          prop=\"ffprobePath\"\n          :rules=\"[\n            { required: true, message: '请输入FFprobe路径', trigger: 'blur' }\n          ]\">\n          <el-input \n            v-model=\"settings.ffprobePath\" \n            placeholder=\"请输入FFprobe可执行文件的完整路径\">\n            <el-button slot=\"append\" @click=\"testFfprobe\">测试</el-button>\n          </el-input>\n        </el-form-item>\n\n        <el-form-item label=\"列表数据持久化\">\n          <el-switch\n            v-model=\"settings.persistentData\"\n            @change=\"handlePersistentChange\">\n          </el-switch>\n          <span class=\"setting-tip\">开启后列表数据将保存在本地</span>\n        </el-form-item>\n\n        <el-form-item label=\"自动清除异常源\">\n          <el-switch\n            v-model=\"settings.autoRemoveInvalid\"\n            @change=\"handleSettingChange\">\n          </el-switch>\n          <span class=\"setting-tip\">开启后将自动清除检测失败的直播源</span>\n        </el-form-item>\n\n        <el-form-item label=\"自动清除低分辨率\">\n          <el-switch\n            v-model=\"settings.autoRemoveLowRes\"\n            @change=\"handleSettingChange\">\n          </el-switch>\n          <span class=\"setting-tip\">开启后将自动清除分辨率低于1280x720的直播源</span>\n        </el-form-item>\n\n        <el-form-item label=\"自动清除慢速源\">\n          <el-switch\n            v-model=\"settings.autoRemoveSlowResponse\"\n            @change=\"handleSettingChange\">\n          </el-switch>\n          <span class=\"setting-tip\">开启后将自动清除响应时间超过3000ms的直播源</span>\n        </el-form-item>\n        \n        <el-form-item>\n          <el-button type=\"primary\" @click=\"saveSettings\">保存设置</el-button>\n        </el-form-item>\n      </el-form>\n    </el-card>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'SettingsPage',\n  data() {\n    return {\n      settings: {\n        ffprobePath: localStorage.getItem('ffprobePath') || '',\n        persistentData: localStorage.getItem('persistentData') === 'true',\n        autoRemoveInvalid: localStorage.getItem('autoRemoveInvalid') === 'true',\n        autoRemoveLowRes: localStorage.getItem('autoRemoveLowRes') === 'true',\n        autoRemoveSlowResponse: localStorage.getItem('autoRemoveSlowResponse') === 'true'\n      }\n    }\n  },\n  methods: {\n    async testFfprobe() {\n      if (!this.settings.ffprobePath) {\n        this.$message.warning('请先输入FFprobe路径')\n        return\n      }\n\n      this.$message.info('正在测试FFprobe...')\n      try {\n        const response = await fetch('http://localhost:8080/api/test-ffprobe', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({ path: this.settings.ffprobePath })\n        })\n        \n        if (!response.ok) throw new Error('请求失败')\n        \n        const result = await response.json()\n        if (result.success) {\n          this.$message.success('FFprobe测试成功')\n        } else {\n          throw new Error(result.message)\n        }\n      } catch (error) {\n        this.$message.error('FFprobe测试失败: ' + error.message)\n      }\n    },\n    \n    handlePersistentChange(value) {\n      if (value) {\n        // 开启持久化时，保存当前列表\n        this.saveStreamList()\n      } else {\n        // 关闭持久化时，清除所有保存的数据\n        localStorage.removeItem('streamList')\n        localStorage.removeItem('streamCheckState')\n        // 通知 StreamCheck 组件重置列表\n        this.$root.$emit('reset-stream-list')\n      }\n      this.handleSettingChange()\n    },\n\n    handleSettingChange() {\n      this.saveSettings()\n    },\n    \n    saveSettings() {\n      this.$refs.settingsForm.validate(valid => {\n        if (valid) {\n          localStorage.setItem('ffprobePath', this.settings.ffprobePath)\n          localStorage.setItem('persistentData', this.settings.persistentData)\n          localStorage.setItem('autoRemoveInvalid', this.settings.autoRemoveInvalid)\n          localStorage.setItem('autoRemoveLowRes', this.settings.autoRemoveLowRes)\n          localStorage.setItem('autoRemoveSlowResponse', this.settings.autoRemoveSlowResponse)\n          this.$message.success('设置保存成功')\n        }\n      })\n    },\n\n    saveStreamList() {\n      // 触发保存事件，由 StreamCheck 组件处理\n      this.$root.$emit('save-stream-list')\n    }\n  }\n}\n</script>\n\n<style scoped>\n.settings {\n  padding: 20px;\n}\n\n.settings-card {\n  max-width: 800px;\n  margin: 0 auto;\n}\n\n.setting-tip {\n  margin-left: 10px;\n  color: #909399;\n  font-size: 13px;\n}\n</style> "],"mappings":"AA8DA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,QAAA;QACAC,WAAA,EAAAC,YAAA,CAAAC,OAAA;QACAC,cAAA,EAAAF,YAAA,CAAAC,OAAA;QACAE,iBAAA,EAAAH,YAAA,CAAAC,OAAA;QACAG,gBAAA,EAAAJ,YAAA,CAAAC,OAAA;QACAI,sBAAA,EAAAL,YAAA,CAAAC,OAAA;MACA;IACA;EACA;EACAK,OAAA;IACA,MAAAC,YAAA;MACA,UAAAT,QAAA,CAAAC,WAAA;QACA,KAAAS,QAAA,CAAAC,OAAA;QACA;MACA;MAEA,KAAAD,QAAA,CAAAE,IAAA;MACA;QACA,MAAAC,QAAA,SAAAC,KAAA;UACAC,MAAA;UACAC,OAAA;YACA;UACA;UACAC,IAAA,EAAAC,IAAA,CAAAC,SAAA;YAAAC,IAAA,OAAApB,QAAA,CAAAC;UAAA;QACA;QAEA,KAAAY,QAAA,CAAAQ,EAAA,YAAAC,KAAA;QAEA,MAAAC,MAAA,SAAAV,QAAA,CAAAW,IAAA;QACA,IAAAD,MAAA,CAAAE,OAAA;UACA,KAAAf,QAAA,CAAAe,OAAA;QACA;UACA,UAAAH,KAAA,CAAAC,MAAA,CAAAG,OAAA;QACA;MACA,SAAAC,KAAA;QACA,KAAAjB,QAAA,CAAAiB,KAAA,mBAAAA,KAAA,CAAAD,OAAA;MACA;IACA;IAEAE,uBAAAC,KAAA;MACA,IAAAA,KAAA;QACA;QACA,KAAAC,cAAA;MACA;QACA;QACA5B,YAAA,CAAA6B,UAAA;QACA7B,YAAA,CAAA6B,UAAA;QACA;QACA,KAAAC,KAAA,CAAAC,KAAA;MACA;MACA,KAAAC,mBAAA;IACA;IAEAA,oBAAA;MACA,KAAAC,YAAA;IACA;IAEAA,aAAA;MACA,KAAAC,KAAA,CAAAC,YAAA,CAAAC,QAAA,CAAAC,KAAA;QACA,IAAAA,KAAA;UACArC,YAAA,CAAAsC,OAAA,qBAAAxC,QAAA,CAAAC,WAAA;UACAC,YAAA,CAAAsC,OAAA,wBAAAxC,QAAA,CAAAI,cAAA;UACAF,YAAA,CAAAsC,OAAA,2BAAAxC,QAAA,CAAAK,iBAAA;UACAH,YAAA,CAAAsC,OAAA,0BAAAxC,QAAA,CAAAM,gBAAA;UACAJ,YAAA,CAAAsC,OAAA,gCAAAxC,QAAA,CAAAO,sBAAA;UACA,KAAAG,QAAA,CAAAe,OAAA;QACA;MACA;IACA;IAEAK,eAAA;MACA;MACA,KAAAE,KAAA,CAAAC,KAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}