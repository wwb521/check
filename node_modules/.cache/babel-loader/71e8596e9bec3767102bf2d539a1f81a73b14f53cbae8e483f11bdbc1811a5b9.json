{"ast":null,"code":"export default {\n  name: 'StreamCheck',\n  data() {\n    return {\n      // No changes to data section\n    };\n  },\n  computed: {\n    // No changes to computed section\n  },\n  created() {\n    // No changes to created section\n  },\n  beforeDestroy() {\n    // No changes to beforeDestroy section\n  },\n  methods: {\n    async saveGithubSettings() {\n      try {\n        await this.$refs.syncForm.validate();\n\n        // 保存设置\n        localStorage.setItem('githubToken', this.syncForm.token);\n        localStorage.setItem('githubRepo', this.syncForm.repo);\n        localStorage.setItem('githubTxtPath', this.syncForm.txtPath);\n        localStorage.setItem('githubM3uPath', this.syncForm.m3uPath);\n        localStorage.setItem('githubAutoSync', this.syncForm.autoSync);\n        localStorage.setItem('githubSyncType', this.syncForm.syncType);\n        localStorage.setItem('githubExecuteTime', this.syncForm.executeTime);\n        localStorage.setItem('githubWeekDay', this.syncForm.weekDay);\n\n        // 如果开启了自动同步，重新设置定时器\n        if (this.syncForm.autoSync) {\n          this.setupSyncSchedule();\n        } else {\n          this.clearSyncSchedule();\n        }\n        this.$message.success('设置保存成功');\n        this.syncDialogVisible = false;\n      } catch (error) {\n        this.$message.error(error.message || '保存失败');\n      }\n    },\n    async handleSync() {\n      try {\n        // 同步 TXT 内容\n        const txtContent = this.generateContent('txt');\n        await this.syncToGithub(txtContent, this.syncForm.txtPath);\n\n        // 同步 M3U 内容\n        const m3uContent = this.generateContent('m3u');\n        await this.syncToGithub(m3uContent, this.syncForm.m3uPath);\n        this.$message.success('同步成功');\n      } catch (error) {\n        console.error('同步失败:', error);\n        this.$message.error(error.message || '同步失败');\n        throw error; // 重新抛出错误以便调用者处理\n      }\n    },\n    async syncToGithub(content, path) {\n      const response = await fetch(`${this.getBaseUrl()}/api/sync-github`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          token: this.syncForm.token,\n          repo: this.syncForm.repo,\n          path: path,\n          content: content,\n          message: this.syncForm.message\n        })\n      });\n      if (!response.ok) {\n        throw new Error('同步失败');\n      }\n    }\n  },\n  watch: {\n    // No changes to watch section\n  }\n  // No changes to activated section\n  // No changes to deactivated section\n};","map":{"version":3,"names":["name","data","computed","created","beforeDestroy","methods","saveGithubSettings","$refs","syncForm","validate","localStorage","setItem","token","repo","txtPath","m3uPath","autoSync","syncType","executeTime","weekDay","setupSyncSchedule","clearSyncSchedule","$message","success","syncDialogVisible","error","message","handleSync","txtContent","generateContent","syncToGithub","m3uContent","console","content","path","response","fetch","getBaseUrl","method","headers","body","JSON","stringify","ok","Error","watch"],"sources":["src/components/StreamCheck.vue"],"sourcesContent":["<template>\n  <!-- No changes to template section -->\n</template>\n\n<script>\nexport default {\n  name: 'StreamCheck',\n  data() {\n    return {\n      // No changes to data section\n    }\n  },\n  computed: {\n    // No changes to computed section\n  },\n  created() {\n    // No changes to created section\n  },\n  beforeDestroy() {\n    // No changes to beforeDestroy section\n  },\n  methods: {\n    async saveGithubSettings() {\n      try {\n        await this.$refs.syncForm.validate()\n\n        // 保存设置\n        localStorage.setItem('githubToken', this.syncForm.token)\n        localStorage.setItem('githubRepo', this.syncForm.repo)\n        localStorage.setItem('githubTxtPath', this.syncForm.txtPath)\n        localStorage.setItem('githubM3uPath', this.syncForm.m3uPath)\n        localStorage.setItem('githubAutoSync', this.syncForm.autoSync)\n        localStorage.setItem('githubSyncType', this.syncForm.syncType)\n        localStorage.setItem('githubExecuteTime', this.syncForm.executeTime)\n        localStorage.setItem('githubWeekDay', this.syncForm.weekDay)\n\n        // 如果开启了自动同步，重新设置定时器\n        if (this.syncForm.autoSync) {\n          this.setupSyncSchedule()\n        } else {\n          this.clearSyncSchedule()\n        }\n\n        this.$message.success('设置保存成功')\n        this.syncDialogVisible = false\n      } catch (error) {\n        this.$message.error(error.message || '保存失败')\n      }\n    },\n\n    async handleSync() {\n      try {\n        // 同步 TXT 内容\n        const txtContent = this.generateContent('txt')\n        await this.syncToGithub(txtContent, this.syncForm.txtPath)\n\n        // 同步 M3U 内容\n        const m3uContent = this.generateContent('m3u')\n        await this.syncToGithub(m3uContent, this.syncForm.m3uPath)\n\n        this.$message.success('同步成功')\n      } catch (error) {\n        console.error('同步失败:', error)\n        this.$message.error(error.message || '同步失败')\n        throw error // 重新抛出错误以便调用者处理\n      }\n    },\n\n    async syncToGithub(content, path) {\n      const response = await fetch(`${this.getBaseUrl()}/api/sync-github`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          token: this.syncForm.token,\n          repo: this.syncForm.repo,\n          path: path,\n          content: content,\n          message: this.syncForm.message\n        })\n      })\n      \n      if (!response.ok) {\n        throw new Error('同步失败')\n      }\n    }\n  },\n  watch: {\n    // No changes to watch section\n  },\n  // No changes to activated section\n  // No changes to deactivated section\n}\n</script>\n\n<style scoped>\n/* No changes to style section */\n</style> "],"mappings":"AAKA;EACAA,IAAA;EACAC,KAAA;IACA;MACA;IAAA,CACA;EACA;EACAC,QAAA;IACA;EAAA,CACA;EACAC,QAAA;IACA;EAAA,CACA;EACAC,cAAA;IACA;EAAA,CACA;EACAC,OAAA;IACA,MAAAC,mBAAA;MACA;QACA,WAAAC,KAAA,CAAAC,QAAA,CAAAC,QAAA;;QAEA;QACAC,YAAA,CAAAC,OAAA,qBAAAH,QAAA,CAAAI,KAAA;QACAF,YAAA,CAAAC,OAAA,oBAAAH,QAAA,CAAAK,IAAA;QACAH,YAAA,CAAAC,OAAA,uBAAAH,QAAA,CAAAM,OAAA;QACAJ,YAAA,CAAAC,OAAA,uBAAAH,QAAA,CAAAO,OAAA;QACAL,YAAA,CAAAC,OAAA,wBAAAH,QAAA,CAAAQ,QAAA;QACAN,YAAA,CAAAC,OAAA,wBAAAH,QAAA,CAAAS,QAAA;QACAP,YAAA,CAAAC,OAAA,2BAAAH,QAAA,CAAAU,WAAA;QACAR,YAAA,CAAAC,OAAA,uBAAAH,QAAA,CAAAW,OAAA;;QAEA;QACA,SAAAX,QAAA,CAAAQ,QAAA;UACA,KAAAI,iBAAA;QACA;UACA,KAAAC,iBAAA;QACA;QAEA,KAAAC,QAAA,CAAAC,OAAA;QACA,KAAAC,iBAAA;MACA,SAAAC,KAAA;QACA,KAAAH,QAAA,CAAAG,KAAA,CAAAA,KAAA,CAAAC,OAAA;MACA;IACA;IAEA,MAAAC,WAAA;MACA;QACA;QACA,MAAAC,UAAA,QAAAC,eAAA;QACA,WAAAC,YAAA,CAAAF,UAAA,OAAApB,QAAA,CAAAM,OAAA;;QAEA;QACA,MAAAiB,UAAA,QAAAF,eAAA;QACA,WAAAC,YAAA,CAAAC,UAAA,OAAAvB,QAAA,CAAAO,OAAA;QAEA,KAAAO,QAAA,CAAAC,OAAA;MACA,SAAAE,KAAA;QACAO,OAAA,CAAAP,KAAA,UAAAA,KAAA;QACA,KAAAH,QAAA,CAAAG,KAAA,CAAAA,KAAA,CAAAC,OAAA;QACA,MAAAD,KAAA;MACA;IACA;IAEA,MAAAK,aAAAG,OAAA,EAAAC,IAAA;MACA,MAAAC,QAAA,SAAAC,KAAA,SAAAC,UAAA;QACAC,MAAA;QACAC,OAAA;UACA;QACA;QACAC,IAAA,EAAAC,IAAA,CAAAC,SAAA;UACA9B,KAAA,OAAAJ,QAAA,CAAAI,KAAA;UACAC,IAAA,OAAAL,QAAA,CAAAK,IAAA;UACAqB,IAAA,EAAAA,IAAA;UACAD,OAAA,EAAAA,OAAA;UACAP,OAAA,OAAAlB,QAAA,CAAAkB;QACA;MACA;MAEA,KAAAS,QAAA,CAAAQ,EAAA;QACA,UAAAC,KAAA;MACA;IACA;EACA;EACAC,KAAA;IACA;EAAA;EAEA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}