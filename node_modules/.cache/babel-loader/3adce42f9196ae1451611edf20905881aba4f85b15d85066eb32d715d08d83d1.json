{"ast":null,"code":"export default {\n  name: 'StreamCheck',\n  data() {\n    return {\n      loading: false,\n      streamList: [],\n      importUrlDialogVisible: false,\n      importForm: {\n        url: '',\n        group: ''\n      },\n      importRules: {\n        url: [{\n          required: true,\n          message: '请输入URL地址',\n          trigger: 'blur'\n        }, {\n          type: 'url',\n          message: '请输入正确的URL地址',\n          trigger: 'blur'\n        }],\n        group: [{\n          required: true,\n          message: '请选择分组',\n          trigger: 'change'\n        }]\n      },\n      currentPage: 1,\n      pageSize: 5,\n      isChecking: false,\n      isPaused: false,\n      checkedCount: 0,\n      totalCount: 0,\n      pausedIndex: -1,\n      shouldStop: false,\n      isCollecting: false,\n      collectDialogVisible: false,\n      collectForm: {\n        urls: [''],\n        autoCollect: false,\n        collectType: 'daily',\n        executeTime: '09:00',\n        weekDay: '1'\n      },\n      collectRules: {\n        urls: [{\n          type: 'array',\n          validator: (rule, value, callback) => {\n            if (value.length === 0) {\n              callback(new Error('请至少添加一个采集地址'));\n            }\n            // 验证每个URL\n            const errors = value.map(url => {\n              if (!url) return '采集地址不能为空';\n              if (!/^https?:\\/\\/.+/.test(url)) return '请输入正确的URL地址';\n              return null;\n            }).filter(error => error !== null);\n            if (errors.length > 0) {\n              callback(new Error(errors[0]));\n            } else {\n              callback();\n            }\n          },\n          trigger: 'change'\n        }],\n        executeTime: [{\n          required: true,\n          message: '请选择执行时间',\n          trigger: 'change'\n        }],\n        weekDay: [{\n          required: true,\n          message: '请选择执行日期',\n          trigger: 'change'\n        }]\n      },\n      collectTimer: null,\n      generateLinkDialogVisible: false,\n      generatedLinks: {\n        txt: '',\n        m3u: ''\n      },\n      previewContent: '',\n      // 新增预览内容\n      currentLinkId: '',\n      scheduleDialogVisible: false,\n      isScheduled: false,\n      scheduleForm: {\n        scheduleType: 'daily',\n        executeTime: '09:00',\n        weekDay: '1'\n      },\n      scheduleRules: {\n        executeTime: [{\n          required: true,\n          message: '请选择执行时间',\n          trigger: 'change'\n        }],\n        weekDay: [{\n          required: true,\n          message: '请选择执行日期',\n          trigger: 'change'\n        }]\n      },\n      scheduleTimer: null,\n      nextScheduleTime: null,\n      stateKey: 'streamCheckState',\n      // 用于本地存储的key\n      hasActiveOperations: false,\n      // 添加标记表示是否有动作在执行\n      linkForm: {\n        format: 'txt' // 默认txt格式\n      }\n    };\n  },\n  computed: {\n    paginatedData() {\n      const start = (this.currentPage - 1) * this.pageSize;\n      const end = start + this.pageSize;\n      return this.streamList.slice(start, end);\n    },\n    checkButtonText() {\n      if (!this.isChecking && !this.isPaused) {\n        return '批量检测';\n      }\n      return `检测中 ${this.checkedCount}/${this.totalCount}`;\n    },\n    mergedStreams() {\n      // 创建一个Map来存储合并后的直播源\n      const streamMap = new Map();\n\n      // 按照当前列表顺序处理每个直播源\n      this.streamList.forEach(stream => {\n        const key = stream.name; // 使用名称作为键\n\n        if (streamMap.has(key)) {\n          // 如果已存在相同名称的直播源，添加到URLs数组\n          const existing = streamMap.get(key);\n          if (!existing.urls.includes(stream.url)) {\n            existing.urls.push(stream.url);\n          }\n        } else {\n          // 如果是新的名称，创建新条目\n          streamMap.set(key, {\n            name: stream.name,\n            urls: [stream.url],\n            group: stream.group\n          });\n        }\n      });\n\n      // 转换回数组格式\n      return Array.from(streamMap.values());\n    },\n    currentLink() {\n      return this.generatedLinks[this.linkForm.format] || '';\n    }\n  },\n  created() {\n    // 初始化时加载持久化的数据\n    if (localStorage.getItem('persistentData') === 'true') {\n      const savedList = localStorage.getItem('streamList');\n      if (savedList) {\n        this.streamList = JSON.parse(savedList);\n      }\n    }\n\n    // 监听保存事件\n    this.$root.$on('save-stream-list', this.saveStreamList);\n\n    // 从本地存储恢复状态\n    this.restoreState();\n    // 如果定时检测是开启状态，重新启动定时器\n    if (this.isScheduled) {\n      this.setupSchedule();\n    }\n    // 如果采集是开启状态，重新启动采集\n    if (this.isCollecting) {\n      this.startCollecting(true); // true表示是恢复状态\n    }\n  },\n  beforeDestroy() {\n    // 移除事件监听\n    this.$root.$off('save-stream-list', this.saveStreamList);\n    // 组件销毁前清除定时器\n    if (this.collectTimer) {\n      clearInterval(this.collectTimer);\n    }\n    // 组件销毁时清理定时器\n    this.stopScheduleCheck();\n    // 在组件销毁前保存状态\n    this.saveState();\n    window.removeEventListener('beforeunload', this.handleBeforeUnload);\n  },\n  methods: {\n    // No changes to methods section\n  },\n  watch: {\n    // No changes to watch section\n  }\n  // No changes to activated and deactivated sections\n};","map":{"version":3,"names":["name","data","loading","streamList","importUrlDialogVisible","importForm","url","group","importRules","required","message","trigger","type","currentPage","pageSize","isChecking","isPaused","checkedCount","totalCount","pausedIndex","shouldStop","isCollecting","collectDialogVisible","collectForm","urls","autoCollect","collectType","executeTime","weekDay","collectRules","validator","rule","value","callback","length","Error","errors","map","test","filter","error","collectTimer","generateLinkDialogVisible","generatedLinks","txt","m3u","previewContent","currentLinkId","scheduleDialogVisible","isScheduled","scheduleForm","scheduleType","scheduleRules","scheduleTimer","nextScheduleTime","stateKey","hasActiveOperations","linkForm","format","computed","paginatedData","start","end","slice","checkButtonText","mergedStreams","streamMap","Map","forEach","stream","key","has","existing","get","includes","push","set","Array","from","values","currentLink","created","localStorage","getItem","savedList","JSON","parse","$root","$on","saveStreamList","restoreState","setupSchedule","startCollecting","beforeDestroy","$off","clearInterval","stopScheduleCheck","saveState","window","removeEventListener","handleBeforeUnload","methods","watch"],"sources":["src/components/StreamCheck.vue"],"sourcesContent":["<template>\n  <!-- No changes to template section -->\n</template>\n\n<script>\nexport default {\n  name: 'StreamCheck',\n  data() {\n    return {\n      loading: false,\n      streamList: [],\n      importUrlDialogVisible: false,\n      importForm: {\n        url: '',\n        group: ''\n      },\n      importRules: {\n        url: [\n          { required: true, message: '请输入URL地址', trigger: 'blur' },\n          { type: 'url', message: '请输入正确的URL地址', trigger: 'blur' }\n        ],\n        group: [\n          { required: true, message: '请选择分组', trigger: 'change' }\n        ]\n      },\n      currentPage: 1,\n      pageSize: 5,\n      isChecking: false,\n      isPaused: false,\n      checkedCount: 0,\n      totalCount: 0,\n      pausedIndex: -1,\n      shouldStop: false,\n      isCollecting: false,\n      collectDialogVisible: false,\n      collectForm: {\n        urls: [''],\n        autoCollect: false,\n        collectType: 'daily',\n        executeTime: '09:00',\n        weekDay: '1'\n      },\n      collectRules: {\n        urls: [\n          { \n            type: 'array',\n            validator: (rule, value, callback) => {\n              if (value.length === 0) {\n                callback(new Error('请至少添加一个采集地址'))\n              }\n              // 验证每个URL\n              const errors = value.map(url => {\n                if (!url) return '采集地址不能为空'\n                if (!/^https?:\\/\\/.+/.test(url)) return '请输入正确的URL地址'\n                return null\n              }).filter(error => error !== null)\n              \n              if (errors.length > 0) {\n                callback(new Error(errors[0]))\n              } else {\n                callback()\n              }\n            },\n            trigger: 'change'\n          }\n        ],\n        executeTime: [\n          { required: true, message: '请选择执行时间', trigger: 'change' }\n        ],\n        weekDay: [\n          { required: true, message: '请选择执行日期', trigger: 'change' }\n        ]\n      },\n      collectTimer: null,\n      generateLinkDialogVisible: false,\n      generatedLinks: {\n        txt: '',\n        m3u: ''\n      },\n      previewContent: '',  // 新增预览内容\n      currentLinkId: '',\n      scheduleDialogVisible: false,\n      isScheduled: false,\n      scheduleForm: {\n        scheduleType: 'daily',\n        executeTime: '09:00',\n        weekDay: '1'\n      },\n      scheduleRules: {\n        executeTime: [\n          { required: true, message: '请选择执行时间', trigger: 'change' }\n        ],\n        weekDay: [\n          { required: true, message: '请选择执行日期', trigger: 'change' }\n        ]\n      },\n      scheduleTimer: null,\n      nextScheduleTime: null,\n      stateKey: 'streamCheckState', // 用于本地存储的key\n      hasActiveOperations: false,  // 添加标记表示是否有动作在执行\n      linkForm: {\n        format: 'txt' // 默认txt格式\n      }\n    }\n  },\n  computed: {\n    paginatedData() {\n      const start = (this.currentPage - 1) * this.pageSize\n      const end = start + this.pageSize\n      return this.streamList.slice(start, end)\n    },\n    checkButtonText() {\n      if (!this.isChecking && !this.isPaused) {\n        return '批量检测'\n      }\n      return `检测中 ${this.checkedCount}/${this.totalCount}`\n    },\n    mergedStreams() {\n      // 创建一个Map来存储合并后的直播源\n      const streamMap = new Map()\n      \n      // 按照当前列表顺序处理每个直播源\n      this.streamList.forEach(stream => {\n        const key = stream.name // 使用名称作为键\n        \n        if (streamMap.has(key)) {\n          // 如果已存在相同名称的直播源，添加到URLs数组\n          const existing = streamMap.get(key)\n          if (!existing.urls.includes(stream.url)) {\n            existing.urls.push(stream.url)\n          }\n        } else {\n          // 如果是新的名称，创建新条目\n          streamMap.set(key, {\n            name: stream.name,\n            urls: [stream.url],\n            group: stream.group\n          })\n        }\n      })\n      \n      // 转换回数组格式\n      return Array.from(streamMap.values())\n    },\n    currentLink() {\n      return this.generatedLinks[this.linkForm.format] || ''\n    }\n  },\n  created() {\n    // 初始化时加载持久化的数据\n    if (localStorage.getItem('persistentData') === 'true') {\n      const savedList = localStorage.getItem('streamList')\n      if (savedList) {\n        this.streamList = JSON.parse(savedList)\n      }\n    }\n\n    // 监听保存事件\n    this.$root.$on('save-stream-list', this.saveStreamList)\n\n    // 从本地存储恢复状态\n    this.restoreState()\n    // 如果定时检测是开启状态，重新启动定时器\n    if (this.isScheduled) {\n      this.setupSchedule()\n    }\n    // 如果采集是开启状态，重新启动采集\n    if (this.isCollecting) {\n      this.startCollecting(true) // true表示是恢复状态\n    }\n  },\n  beforeDestroy() {\n    // 移除事件监听\n    this.$root.$off('save-stream-list', this.saveStreamList)\n    // 组件销毁前清除定时器\n    if (this.collectTimer) {\n      clearInterval(this.collectTimer)\n    }\n    // 组件销毁时清理定时器\n    this.stopScheduleCheck()\n    // 在组件销毁前保存状态\n    this.saveState()\n    window.removeEventListener('beforeunload', this.handleBeforeUnload)\n  },\n  methods: {\n    // No changes to methods section\n  },\n  watch: {\n    // No changes to watch section\n  },\n  // No changes to activated and deactivated sections\n}\n</script>\n\n<style scoped>\n/* No changes to style section */\n</style> "],"mappings":"AAKA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,OAAA;MACAC,UAAA;MACAC,sBAAA;MACAC,UAAA;QACAC,GAAA;QACAC,KAAA;MACA;MACAC,WAAA;QACAF,GAAA,GACA;UAAAG,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,GACA;UAAAC,IAAA;UAAAF,OAAA;UAAAC,OAAA;QAAA,EACA;QACAJ,KAAA,GACA;UAAAE,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;MAEA;MACAE,WAAA;MACAC,QAAA;MACAC,UAAA;MACAC,QAAA;MACAC,YAAA;MACAC,UAAA;MACAC,WAAA;MACAC,UAAA;MACAC,YAAA;MACAC,oBAAA;MACAC,WAAA;QACAC,IAAA;QACAC,WAAA;QACAC,WAAA;QACAC,WAAA;QACAC,OAAA;MACA;MACAC,YAAA;QACAL,IAAA,GACA;UACAZ,IAAA;UACAkB,SAAA,EAAAA,CAAAC,IAAA,EAAAC,KAAA,EAAAC,QAAA;YACA,IAAAD,KAAA,CAAAE,MAAA;cACAD,QAAA,KAAAE,KAAA;YACA;YACA;YACA,MAAAC,MAAA,GAAAJ,KAAA,CAAAK,GAAA,CAAA/B,GAAA;cACA,KAAAA,GAAA;cACA,sBAAAgC,IAAA,CAAAhC,GAAA;cACA;YACA,GAAAiC,MAAA,CAAAC,KAAA,IAAAA,KAAA;YAEA,IAAAJ,MAAA,CAAAF,MAAA;cACAD,QAAA,KAAAE,KAAA,CAAAC,MAAA;YACA;cACAH,QAAA;YACA;UACA;UACAtB,OAAA;QACA,EACA;QACAgB,WAAA,GACA;UAAAlB,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,EACA;QACAiB,OAAA,GACA;UAAAnB,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;MAEA;MACA8B,YAAA;MACAC,yBAAA;MACAC,cAAA;QACAC,GAAA;QACAC,GAAA;MACA;MACAC,cAAA;MAAA;MACAC,aAAA;MACAC,qBAAA;MACAC,WAAA;MACAC,YAAA;QACAC,YAAA;QACAxB,WAAA;QACAC,OAAA;MACA;MACAwB,aAAA;QACAzB,WAAA,GACA;UAAAlB,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,EACA;QACAiB,OAAA,GACA;UAAAnB,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;MAEA;MACA0C,aAAA;MACAC,gBAAA;MACAC,QAAA;MAAA;MACAC,mBAAA;MAAA;MACAC,QAAA;QACAC,MAAA;MACA;IACA;EACA;EACAC,QAAA;IACAC,cAAA;MACA,MAAAC,KAAA,SAAAhD,WAAA,aAAAC,QAAA;MACA,MAAAgD,GAAA,GAAAD,KAAA,QAAA/C,QAAA;MACA,YAAAX,UAAA,CAAA4D,KAAA,CAAAF,KAAA,EAAAC,GAAA;IACA;IACAE,gBAAA;MACA,UAAAjD,UAAA,UAAAC,QAAA;QACA;MACA;MACA,mBAAAC,YAAA,SAAAC,UAAA;IACA;IACA+C,cAAA;MACA;MACA,MAAAC,SAAA,OAAAC,GAAA;;MAEA;MACA,KAAAhE,UAAA,CAAAiE,OAAA,CAAAC,MAAA;QACA,MAAAC,GAAA,GAAAD,MAAA,CAAArE,IAAA;;QAEA,IAAAkE,SAAA,CAAAK,GAAA,CAAAD,GAAA;UACA;UACA,MAAAE,QAAA,GAAAN,SAAA,CAAAO,GAAA,CAAAH,GAAA;UACA,KAAAE,QAAA,CAAAhD,IAAA,CAAAkD,QAAA,CAAAL,MAAA,CAAA/D,GAAA;YACAkE,QAAA,CAAAhD,IAAA,CAAAmD,IAAA,CAAAN,MAAA,CAAA/D,GAAA;UACA;QACA;UACA;UACA4D,SAAA,CAAAU,GAAA,CAAAN,GAAA;YACAtE,IAAA,EAAAqE,MAAA,CAAArE,IAAA;YACAwB,IAAA,GAAA6C,MAAA,CAAA/D,GAAA;YACAC,KAAA,EAAA8D,MAAA,CAAA9D;UACA;QACA;MACA;;MAEA;MACA,OAAAsE,KAAA,CAAAC,IAAA,CAAAZ,SAAA,CAAAa,MAAA;IACA;IACAC,YAAA;MACA,YAAArC,cAAA,MAAAc,QAAA,CAAAC,MAAA;IACA;EACA;EACAuB,QAAA;IACA;IACA,IAAAC,YAAA,CAAAC,OAAA;MACA,MAAAC,SAAA,GAAAF,YAAA,CAAAC,OAAA;MACA,IAAAC,SAAA;QACA,KAAAjF,UAAA,GAAAkF,IAAA,CAAAC,KAAA,CAAAF,SAAA;MACA;IACA;;IAEA;IACA,KAAAG,KAAA,CAAAC,GAAA,0BAAAC,cAAA;;IAEA;IACA,KAAAC,YAAA;IACA;IACA,SAAAzC,WAAA;MACA,KAAA0C,aAAA;IACA;IACA;IACA,SAAAtE,YAAA;MACA,KAAAuE,eAAA;IACA;EACA;EACAC,cAAA;IACA;IACA,KAAAN,KAAA,CAAAO,IAAA,0BAAAL,cAAA;IACA;IACA,SAAAhD,YAAA;MACAsD,aAAA,MAAAtD,YAAA;IACA;IACA;IACA,KAAAuD,iBAAA;IACA;IACA,KAAAC,SAAA;IACAC,MAAA,CAAAC,mBAAA,sBAAAC,kBAAA;EACA;EACAC,OAAA;IACA;EAAA,CACA;EACAC,KAAA;IACA;EAAA;EAEA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}