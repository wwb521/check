{"ast":null,"code":"export default {\n  name: 'SettingsPage',\n  data() {\n    return {\n      settings: {\n        ffprobePath: localStorage.getItem('ffprobePath') || '',\n        autoRemoveMulticast: localStorage.getItem('autoRemoveMulticast') === 'true',\n        autoRemoveInvalid: localStorage.getItem('autoRemoveInvalid') === 'true',\n        autoRemoveLowRes: localStorage.getItem('autoRemoveLowRes') === 'true',\n        autoRemoveSlowResponse: localStorage.getItem('autoRemoveSlowResponse') === 'true',\n        concurrentChecks: parseInt(localStorage.getItem('concurrentChecks')) || 3,\n        strictMode: localStorage.getItem('strictMode') === 'true',\n        extremeMode: localStorage.getItem('extremeMode') === 'true',\n        useRealIp: localStorage.getItem('useRealIp') === 'true'\n      }\n    };\n  },\n  watch: {\n    // 监听设置变化，自动保存\n    'settings.ffprobePath'() {\n      this.handleSettingChange();\n    },\n    'settings.autoRemoveMulticast'() {\n      this.handleSettingChange();\n    },\n    'settings.autoRemoveInvalid'() {\n      this.handleSettingChange();\n    },\n    'settings.autoRemoveLowRes'() {\n      this.handleSettingChange();\n    },\n    'settings.autoRemoveSlowResponse'() {\n      this.handleSettingChange();\n    },\n    'settings.concurrentChecks'() {\n      this.handleSettingChange();\n    },\n    'settings.strictMode'() {\n      this.handleSettingChange();\n    },\n    'settings.extremeMode'() {\n      this.handleSettingChange();\n    },\n    'settings.useRealIp'(newVal) {\n      this.handleSettingChange();\n      // 检查是否需要更新地址栏\n      const oldUseRealIp = localStorage.getItem('useRealIp') === 'true';\n      const realIp = localStorage.getItem('realIp');\n\n      // 只有当真实IP设置发生变化时才更新地址栏\n      if (oldUseRealIp !== newVal) {\n        const currentPort = window.location.port;\n        const newHost = newVal && realIp ? realIp : 'localhost';\n        const protocol = window.location.protocol;\n        const pathname = window.location.pathname;\n        const search = window.location.search;\n        const newUrl = `${protocol}//${newHost}:${currentPort}${pathname}${search}`;\n        if (window.location.href !== newUrl) {\n          this.$message.success('设置已更新，即将刷新页面...');\n          setTimeout(() => {\n            window.location.href = newUrl;\n          }, 1000);\n        }\n      }\n    }\n  },\n  methods: {\n    async testFfprobe() {\n      if (!this.settings.ffprobePath) {\n        this.$message.warning('请先输入FFprobe路径');\n        return;\n      }\n      this.$message.info('正在测试FFprobe...');\n      try {\n        const response = await fetch(`${this.getBaseUrl()}/api/test-ffprobe`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            path: this.settings.ffprobePath\n          })\n        });\n        if (!response.ok) throw new Error('请求失败');\n        const result = await response.json();\n        if (result.success) {\n          this.$message.success('FFprobe测试成功');\n        } else {\n          throw new Error(result.message);\n        }\n      } catch (error) {\n        this.$message.error('FFprobe测试失败: ' + error.message);\n      }\n    },\n    handleSettingChange() {\n      // 保存所有设置到localStorage\n      const settings = {\n        ffprobePath: this.settings.ffprobePath,\n        autoRemoveMulticast: this.settings.autoRemoveMulticast,\n        autoRemoveInvalid: this.settings.autoRemoveInvalid,\n        autoRemoveLowRes: this.settings.autoRemoveLowRes,\n        autoRemoveSlowResponse: this.settings.autoRemoveSlowResponse,\n        concurrentChecks: this.settings.concurrentChecks,\n        strictMode: this.settings.strictMode,\n        extremeMode: this.settings.extremeMode,\n        useRealIp: this.settings.useRealIp\n      };\n\n      // 分别保存每个设置项\n      Object.entries(settings).forEach(([key, value]) => {\n        localStorage.setItem(key, typeof value === 'boolean' ? value.toString() : value);\n      });\n\n      // 同时保存到 appSettings\n      localStorage.setItem('appSettings', JSON.stringify(settings));\n\n      // 触发设置更新事件\n      this.$root.$emit('settings-updated', {\n        type: 'settings-changed',\n        settings: settings\n      });\n      console.log('设置已保存:', settings); // 添加日志\n    },\n    getBaseUrl() {\n      const useRealIp = localStorage.getItem('useRealIp') === 'true';\n      const realIp = localStorage.getItem('realIp');\n      return useRealIp && realIp ? `http://${realIp}:8080` : 'http://localhost:8080';\n    },\n    async scanFfprobe() {\n      this.$message.info('正在扫描FFprobe...');\n      try {\n        const response = await fetch(`${this.getBaseUrl()}/api/scan-ffprobe`);\n        if (!response.ok) throw new Error('请求失败');\n        const result = await response.json();\n        if (result.success) {\n          this.settings.ffprobePath = result.message;\n          this.handleSettingChange();\n          this.$message.success('已找到FFprobe');\n        } else {\n          this.$message.warning('未找到FFprobe，请手动输入路径');\n        }\n      } catch (error) {\n        this.$message.error('扫描失败: ' + error.message);\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","data","settings","ffprobePath","localStorage","getItem","autoRemoveMulticast","autoRemoveInvalid","autoRemoveLowRes","autoRemoveSlowResponse","concurrentChecks","parseInt","strictMode","extremeMode","useRealIp","watch","settings.ffprobePath","handleSettingChange","settings.autoRemoveMulticast","settings.autoRemoveInvalid","settings.autoRemoveLowRes","settings.autoRemoveSlowResponse","settings.concurrentChecks","settings.strictMode","settings.extremeMode","settings.useRealIp","newVal","oldUseRealIp","realIp","currentPort","window","location","port","newHost","protocol","pathname","search","newUrl","href","$message","success","setTimeout","methods","testFfprobe","warning","info","response","fetch","getBaseUrl","method","headers","body","JSON","stringify","path","ok","Error","result","json","message","error","Object","entries","forEach","key","value","setItem","toString","$root","$emit","type","console","log","scanFfprobe"],"sources":["src/views/Settings.vue"],"sourcesContent":["<template>\n  <div class=\"settings\">\n    <el-card class=\"settings-card\">\n      <div slot=\"header\">\n        <span>系统设置</span>\n      </div>\n      \n      <el-form :model=\"settings\" ref=\"settingsForm\" label-width=\"180px\">\n        <el-form-item \n          label=\"FFprobe路径\" \n          prop=\"ffprobePath\"\n          :rules=\"[\n            { required: true, message: '请输入FFprobe路径', trigger: 'blur' }\n          ]\">\n          <el-input \n            v-model=\"settings.ffprobePath\" \n            placeholder=\"请输入FFprobe可执行文件的完整路径\">\n            <template slot=\"append\">\n              <el-button @click=\"scanFfprobe\">自动扫描</el-button>\n              <el-button @click=\"testFfprobe\">测试</el-button>\n            </template>\n          </el-input>\n        </el-form-item>\n\n        <el-form-item label=\"自动清除多播源\">\n          <el-switch\n            v-model=\"settings.autoRemoveMulticast\"\n            @change=\"handleSettingChange\">\n          </el-switch>\n          <span class=\"setting-tip\">自动清除检测到的多播源（IPTV内网组播地址）</span>\n        </el-form-item>\n\n        <el-form-item label=\"自动清除异常源\">\n          <el-switch\n            v-model=\"settings.autoRemoveInvalid\"\n            @change=\"handleSettingChange\">\n          </el-switch>\n          <span class=\"setting-tip\">开启后将自动清除检测失败的直播源</span>\n        </el-form-item>\n\n        <el-form-item label=\"自动清除低分辨率\">\n          <el-switch\n            v-model=\"settings.autoRemoveLowRes\"\n            @change=\"handleSettingChange\">\n          </el-switch>\n          <span class=\"setting-tip\">开启后将自动清除分辨率低于{{ settings.extremeMode ? '1920x1080' : (settings.strictMode ? '1920x1080' : '1280x720') }}的直播源</span>\n        </el-form-item>\n\n        <el-form-item label=\"自动清除慢速源\">\n          <el-switch\n            v-model=\"settings.autoRemoveSlowResponse\"\n            @change=\"handleSettingChange\">\n          </el-switch>\n          <span class=\"setting-tip\">开启后将自动清除响应时间超过{{ settings.extremeMode ? '1500' : (settings.strictMode ? '2000' : '3000') }}ms的直播源</span>\n        </el-form-item>\n\n        <el-form-item label=\"严格模式\">\n          <el-switch\n            v-model=\"settings.strictMode\"\n            :disabled=\"settings.extremeMode\"\n            @change=\"handleSettingChange\">\n          </el-switch>\n          <span class=\"setting-tip\">\n            {{ settings.extremeMode ? '请先关闭极端模式' : '开启后将使用更严格的清除标准（1920x1080和2000ms）' }}\n          </span>\n        </el-form-item>\n\n        <el-form-item label=\"极端模式\">\n          <el-switch\n            v-model=\"settings.extremeMode\"\n            :disabled=\"settings.strictMode\"\n            @change=\"handleSettingChange\">\n          </el-switch>\n          <span class=\"setting-tip\">\n            {{ settings.strictMode ? '请先关闭严格模式' : '开启后将使用最严格的清除标准（1920x1080和1500ms）' }}\n          </span>\n        </el-form-item>\n\n        <el-form-item label=\"使用真实IP地址\">\n          <el-switch\n            v-model=\"settings.useRealIp\"\n            @change=\"handleSettingChange\">\n          </el-switch>\n          <span class=\"setting-tip\">开启后使用真实IP地址代替localhost</span>\n        </el-form-item>\n\n        <el-form-item \n          label=\"并发检测数量\" \n          prop=\"concurrentChecks\"\n          :rules=\"[\n            { required: true, message: '请设置并发检测数量', trigger: 'change' },\n            { type: 'number', min: 1, max: 100, message: '并发数必须在1到100之间', trigger: 'change' }\n          ]\">\n          <el-input-number \n            v-model=\"settings.concurrentChecks\"\n            :min=\"1\"\n            :max=\"100\"\n            :step=\"1\"\n            @change=\"handleSettingChange\">\n          </el-input-number>\n          <span class=\"setting-tip\">同时检测的直播源数量 (1-100个)</span>\n        </el-form-item>\n      </el-form>\n    </el-card>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'SettingsPage',\n  data() {\n    return {\n      settings: {\n        ffprobePath: localStorage.getItem('ffprobePath') || '',\n        autoRemoveMulticast: localStorage.getItem('autoRemoveMulticast') === 'true',\n        autoRemoveInvalid: localStorage.getItem('autoRemoveInvalid') === 'true',\n        autoRemoveLowRes: localStorage.getItem('autoRemoveLowRes') === 'true',\n        autoRemoveSlowResponse: localStorage.getItem('autoRemoveSlowResponse') === 'true',\n        concurrentChecks: parseInt(localStorage.getItem('concurrentChecks')) || 3,\n        strictMode: localStorage.getItem('strictMode') === 'true',\n        extremeMode: localStorage.getItem('extremeMode') === 'true',\n        useRealIp: localStorage.getItem('useRealIp') === 'true'\n      }\n    }\n  },\n  watch: {\n    // 监听设置变化，自动保存\n    'settings.ffprobePath'() {\n      this.handleSettingChange()\n    },\n    'settings.autoRemoveMulticast'() {\n      this.handleSettingChange()\n    },\n    'settings.autoRemoveInvalid'() {\n      this.handleSettingChange()\n    },\n    'settings.autoRemoveLowRes'() {\n      this.handleSettingChange()\n    },\n    'settings.autoRemoveSlowResponse'() {\n      this.handleSettingChange()\n    },\n    'settings.concurrentChecks'() {\n      this.handleSettingChange()\n    },\n    'settings.strictMode'() {\n      this.handleSettingChange()\n    },\n    'settings.extremeMode'() {\n      this.handleSettingChange()\n    },\n    'settings.useRealIp'(newVal) {\n      this.handleSettingChange()\n      // 检查是否需要更新地址栏\n      const oldUseRealIp = localStorage.getItem('useRealIp') === 'true'\n      const realIp = localStorage.getItem('realIp')\n      \n      // 只有当真实IP设置发生变化时才更新地址栏\n      if (oldUseRealIp !== newVal) {\n        const currentPort = window.location.port\n        const newHost = newVal && realIp ? realIp : 'localhost'\n        const protocol = window.location.protocol\n        const pathname = window.location.pathname\n        const search = window.location.search\n        \n        const newUrl = `${protocol}//${newHost}:${currentPort}${pathname}${search}`\n        \n        if (window.location.href !== newUrl) {\n          this.$message.success('设置已更新，即将刷新页面...')\n          setTimeout(() => {\n            window.location.href = newUrl\n          }, 1000)\n        }\n      }\n    }\n  },\n  methods: {\n    async testFfprobe() {\n      if (!this.settings.ffprobePath) {\n        this.$message.warning('请先输入FFprobe路径')\n        return\n      }\n\n      this.$message.info('正在测试FFprobe...')\n      try {\n        const response = await fetch(`${this.getBaseUrl()}/api/test-ffprobe`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({ path: this.settings.ffprobePath })\n        })\n        \n        if (!response.ok) throw new Error('请求失败')\n        \n        const result = await response.json()\n        if (result.success) {\n          this.$message.success('FFprobe测试成功')\n        } else {\n          throw new Error(result.message)\n        }\n      } catch (error) {\n        this.$message.error('FFprobe测试失败: ' + error.message)\n      }\n    },\n    \n    handleSettingChange() {\n      // 保存所有设置到localStorage\n      const settings = {\n        ffprobePath: this.settings.ffprobePath,\n        autoRemoveMulticast: this.settings.autoRemoveMulticast,\n        autoRemoveInvalid: this.settings.autoRemoveInvalid,\n        autoRemoveLowRes: this.settings.autoRemoveLowRes,\n        autoRemoveSlowResponse: this.settings.autoRemoveSlowResponse,\n        concurrentChecks: this.settings.concurrentChecks,\n        strictMode: this.settings.strictMode,\n        extremeMode: this.settings.extremeMode,\n        useRealIp: this.settings.useRealIp\n      }\n      \n      // 分别保存每个设置项\n      Object.entries(settings).forEach(([key, value]) => {\n        localStorage.setItem(key, typeof value === 'boolean' ? value.toString() : value)\n      })\n      \n      // 同时保存到 appSettings\n      localStorage.setItem('appSettings', JSON.stringify(settings))\n      \n      // 触发设置更新事件\n      this.$root.$emit('settings-updated', {\n        type: 'settings-changed',\n        settings: settings\n      })\n\n      console.log('设置已保存:', settings) // 添加日志\n    },\n\n    getBaseUrl() {\n      const useRealIp = localStorage.getItem('useRealIp') === 'true'\n      const realIp = localStorage.getItem('realIp')\n      return useRealIp && realIp ? `http://${realIp}:8080` : 'http://localhost:8080'\n    },\n\n    async scanFfprobe() {\n      this.$message.info('正在扫描FFprobe...')\n      try {\n        const response = await fetch(`${this.getBaseUrl()}/api/scan-ffprobe`)\n        if (!response.ok) throw new Error('请求失败')\n        \n        const result = await response.json()\n        if (result.success) {\n          this.settings.ffprobePath = result.message\n          this.handleSettingChange()\n          this.$message.success('已找到FFprobe')\n        } else {\n          this.$message.warning('未找到FFprobe，请手动输入路径')\n        }\n      } catch (error) {\n        this.$message.error('扫描失败: ' + error.message)\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.settings {\n  padding: 40px 20px 20px 20px;\n}\n\n.settings-card {\n  max-width: 1000px;\n  margin: 0 auto;\n  margin-top: -50px;\n}\n\n.setting-tip {\n  margin-left: 10px;\n  color: #909399;\n  font-size: 13px;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}