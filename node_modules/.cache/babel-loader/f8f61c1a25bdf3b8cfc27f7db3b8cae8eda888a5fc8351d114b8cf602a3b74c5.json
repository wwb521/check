{"ast":null,"code":"export default {\n  name: 'StreamCheck',\n  data() {\n    return {\n      loading: false,\n      streamList: [],\n      importUrlDialogVisible: false,\n      importForm: {\n        url: '',\n        group: ''\n      },\n      importRules: {\n        url: [{\n          required: true,\n          message: '请输入URL地址',\n          trigger: 'blur'\n        }, {\n          type: 'url',\n          message: '请输入正确的URL地址',\n          trigger: ['blur', 'change']\n        }],\n        group: [{\n          required: true,\n          message: '请选择分组',\n          trigger: 'change'\n        }]\n      },\n      currentPage: 1,\n      pageSize: 5,\n      isChecking: false,\n      isPaused: false,\n      checkedCount: 0,\n      totalCount: 0,\n      pausedIndex: -1,\n      shouldStop: false,\n      isCollecting: false,\n      collectDialogVisible: false,\n      collectForm: {\n        urls: [''],\n        autoCollect: false,\n        collectType: 'daily',\n        executeTime: '09:00',\n        weekDay: '1'\n      },\n      collectRules: {\n        urls: [{\n          type: 'array',\n          validator: (rule, value, callback) => {\n            if (value.length === 0) {\n              callback(new Error('请至少添加一个采集地址'));\n            }\n            // 验证每个URL\n            const errors = value.map(url => {\n              if (!url) return '采集地址不能为空';\n              if (!/^https?:\\/\\/.+/.test(url)) return '请输入正确的URL地址';\n              return null;\n            }).filter(error => error !== null);\n            if (errors.length > 0) {\n              callback(new Error(errors[0]));\n            } else {\n              callback();\n            }\n          },\n          trigger: 'change'\n        }],\n        executeTime: [{\n          required: true,\n          message: '请选择执行时间',\n          trigger: 'change'\n        }],\n        weekDay: [{\n          required: true,\n          message: '请选择执行日期',\n          trigger: 'change'\n        }]\n      },\n      collectTimer: null,\n      generateLinkDialogVisible: false,\n      generatedLink: '',\n      previewContent: '',\n      // 新增预览内容\n      currentLinkId: '',\n      scheduleDialogVisible: false,\n      isScheduled: false,\n      scheduleForm: {\n        scheduleType: 'daily',\n        executeTime: '09:00',\n        weekDay: '1'\n      },\n      scheduleRules: {\n        executeTime: [{\n          required: true,\n          message: '请选择执行时间',\n          trigger: 'change'\n        }],\n        weekDay: [{\n          required: true,\n          message: '请选择执行日期',\n          trigger: 'change'\n        }]\n      },\n      scheduleTimer: null,\n      nextScheduleTime: null,\n      stateKey: 'streamCheckState',\n      // 用于本地存储的key\n      hasActiveOperations: false,\n      // 添加标记表示是否有动作在执行\n      linkForm: {\n        format: 'txt' // 默认txt格式\n      },\n      searchDialogVisible: false,\n      searchForm: {\n        name: '',\n        group: '',\n        status: ''\n      },\n      filteredList: [],\n      // 用于存储搜索过滤后的列表\n      realIp: '',\n      // 存储真实IP地址\n      syncDialogVisible: false,\n      syncForm: {\n        token: localStorage.getItem('githubToken') || '',\n        repo: localStorage.getItem('githubRepo') || '',\n        txtPath: localStorage.getItem('githubTxtPath') || '',\n        m3uPath: localStorage.getItem('githubM3uPath') || '',\n        autoSync: localStorage.getItem('githubAutoSync') === 'true',\n        syncType: localStorage.getItem('githubSyncType') || 'daily',\n        executeTime: localStorage.getItem('githubExecuteTime') || '00:00',\n        weekDay: localStorage.getItem('githubWeekDay') || '1',\n        message: '更新直播源列表'\n      },\n      syncRules: {\n        token: [{\n          required: true,\n          message: '请输入GitHub Token',\n          trigger: 'blur'\n        }],\n        repo: [{\n          required: true,\n          message: '请输入仓库名称',\n          trigger: 'blur'\n        }, {\n          pattern: /^[\\w-]+\\/[\\w-]+$/,\n          message: '格式：用户名/仓库名',\n          trigger: 'blur'\n        }],\n        txtPath: [{\n          required: true,\n          message: '请输入文件路径',\n          trigger: 'blur'\n        }],\n        m3uPath: [{\n          required: true,\n          message: '请输入文件路径',\n          trigger: 'blur'\n        }],\n        message: [{\n          required: true,\n          message: '请输入提交消息',\n          trigger: 'blur'\n        }]\n      },\n      syncTimer: null,\n      messages: [],\n      // 用于存储消息\n      messageId: 0 // 用于生成唯一的消息ID\n    };\n  },\n  computed: {\n    paginatedData() {\n      // 使用过滤后的列表进行分页\n      const start = (this.currentPage - 1) * this.pageSize;\n      const end = start + this.pageSize;\n      return (this.filteredList.length > 0 ? this.filteredList : this.streamList).slice(start, end);\n    },\n    checkButtonText() {\n      if (!this.isChecking && !this.isPaused) {\n        return '批量检测';\n      }\n      return `检测中 ${this.checkedCount}/${this.totalCount}`;\n    },\n    mergedStreams() {\n      // 创建一个Map来存储合并后的直播源\n      const streamMap = new Map();\n\n      // 按照当前列表顺序处理每个直播源\n      this.streamList.forEach(stream => {\n        const key = stream.name; // 使用名称作为键\n\n        if (streamMap.has(key)) {\n          // 如果已存在相同名称的直播源，添加到URLs数组\n          const existing = streamMap.get(key);\n          if (!existing.urls.includes(stream.url)) {\n            existing.urls.push(stream.url);\n          }\n        } else {\n          // 如果是新的名称，创建新条目\n          streamMap.set(key, {\n            name: stream.name,\n            urls: [stream.url],\n            group: stream.group\n          });\n        }\n      });\n\n      // 转换回数组格式\n      return Array.from(streamMap.values());\n    },\n    groupOptions() {\n      return [...new Set(this.streamList.map(item => item.group))];\n    }\n  },\n  created() {\n    // 初始化时加载持久化的数据\n    if (localStorage.getItem('persistentData') === 'true') {\n      const savedList = localStorage.getItem('streamList');\n      if (savedList) {\n        this.streamList = JSON.parse(savedList);\n        // 初始化时检查多播源\n        this.$nextTick(() => {\n          this.checkMulticastStreams(); // 使用新方法\n        });\n      }\n    }\n\n    // 监听保存事件\n    this.$root.$on('save-stream-list', this.saveStreamList);\n\n    // 监听设置更新事件\n    this.$root.$on('settings-updated', this.handleSettingsUpdate);\n\n    // 从本地存储恢复状态\n    this.restoreState();\n\n    // 如果定时检测是开启状态，重新启动定时器\n    if (this.isScheduled) {\n      this.setupSchedule();\n    }\n    // 如果采集是开启状态，重新启动采集\n    if (this.isCollecting) {\n      this.startCollecting(true); // true表示是恢复状态\n    }\n    // 如果GitHub自动同步是开启状态，重新启动同步定时器\n    if (this.syncForm.autoSync) {\n      this.setupSyncSchedule();\n    }\n    this.filteredList = [];\n    this.getRealIp(); // 获取真实IP地址\n  },\n  beforeDestroy() {\n    // 移除事件监听\n    this.$root.$off('save-stream-list', this.saveStreamList);\n    this.$root.$off('settings-updated', this.handleSettingsUpdate);\n    // 组件销毁前清除定时器\n    if (this.collectTimer) {\n      clearInterval(this.collectTimer);\n    }\n    // 组件销毁时清理定时器\n    this.stopScheduleCheck();\n    // 在组件销毁前保存状态\n    this.saveState();\n    window.removeEventListener('beforeunload', this.handleBeforeUnload);\n  },\n  methods: {\n    // 添加处理设置更新的方法\n    handleSettingsUpdate(event) {\n      console.log('收到设置更新事件:', event);\n      if (event && event.type === 'settings-changed' && event.settings) {\n        console.log('设置已更新，当前设置:', event.settings);\n        // 重新检查所有多播源\n        this.$nextTick(() => {\n          this.checkMulticastStreams();\n        });\n      }\n    },\n    // 添加多播源检测的辅助方法\n    isMulticastStream(url) {\n      if (!url) return false;\n\n      // 更完整的多播源检测正则表达式\n      const patterns = [\n      // 标准格式\n      /[/](udp|rtp)[/]239\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /[/](udp|rtp)[/]225\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /[/](udp|rtp)[/]224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n      // 带@的格式\n      /^(udp|rtp):\\/\\/@239\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /^(udp|rtp):\\/\\/@225\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /^(udp|rtp):\\/\\/@224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n      // 不带@的格式\n      /^(udp|rtp):\\/\\/239\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /^(udp|rtp):\\/\\/225\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /^(udp|rtp):\\/\\/224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n      // IPv6格式\n      /^(udp|rtp):\\/\\/\\[239\\.\\d+\\.\\d+\\.\\d+\\]:\\d+/i, /^(udp|rtp):\\/\\/\\[225\\.\\d+\\.\\d+\\.\\d+\\]:\\d+/i, /^(udp|rtp):\\/\\/\\[224\\.\\d+\\.\\d+\\.\\d+\\]:\\d+/i,\n      // 其他常见格式\n      /^(udp|rtp):\\/\\/@?239\\.\\d+\\.\\d+\\.\\d+[/]\\d+/i, /^(udp|rtp):\\/\\/@?225\\.\\d+\\.\\d+\\.\\d+[/]\\d+/i, /^(udp|rtp):\\/\\/@?224\\.\\d+\\.\\d+\\.\\d+[/]\\d+/i,\n      // 简单格式\n      /^udp\\/@?239\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /^rtp\\/@?239\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /^udp\\/@?225\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /^rtp\\/@?225\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /^udp\\/@?224\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /^rtp\\/@?224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n      // 带端口的格式\n      /^(udp|rtp):\\/\\/@?239\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /^(udp|rtp):\\/\\/@?225\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /^(udp|rtp):\\/\\/@?224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n      // 特殊格式\n      /^(udp|rtp)[/](239|225|224)\\.\\d+\\.\\d+\\.\\d+[/]?(\\d+)?/i, /^(udp|rtp):\\/\\/(239|225|224)\\.\\d+\\.\\d+\\.\\d+[/]?(\\d+)?/i,\n      // HTTP代理的UDP/RTP多播源格式\n      /http:\\/\\/[^/]+[/](udp|rtp)[/]224\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /http:\\/\\/[^/]+[/](udp|rtp)[/]225\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /http:\\/\\/[^/]+[/](udp|rtp)[/]239\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n      // HTTPS代理的UDP/RTP多播源格式\n      /https:\\/\\/[^/]+[/](udp|rtp)[/]224\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /https:\\/\\/[^/]+[/](udp|rtp)[/]225\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /https:\\/\\/[^/]+[/](udp|rtp)[/]239\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n      // 任何包含 udp 或 rtp 的链接\n      /^(udp|rtp):\\/\\//i, /\\/(udp|rtp)\\//i, /^(udp|rtp)@/i];\n\n      // 先转换为小写进行检查\n      const lowerUrl = url.toLowerCase();\n      const isMulticast = patterns.some(pattern => pattern.test(lowerUrl));\n      if (isMulticast) {\n        console.log('检测到多播源:', url);\n      }\n      return isMulticast;\n    },\n    // 检查多播源的方法\n    checkMulticastStreams() {\n      try {\n        const appSettings = localStorage.getItem('appSettings');\n        if (!appSettings) {\n          console.log('未找到设置配置');\n          return;\n        }\n        let settings;\n        try {\n          settings = JSON.parse(appSettings);\n        } catch (e) {\n          console.error('解析设置失败:', e);\n          return;\n        }\n\n        // 如果启用了自动清除多播源\n        if (settings.autoRemoveMulticast === true) {\n          console.log('开始检查多播源...');\n          let removedCount = 0;\n          const toRemove = [];\n\n          // 检查所有流\n          this.streamList.forEach((stream, index) => {\n            if (this.isMulticastStream(stream.url)) {\n              toRemove.push(index);\n              removedCount++;\n              console.log('发现多播源:', stream.url);\n            }\n          });\n\n          // 从后向前删除\n          for (let i = toRemove.length - 1; i >= 0; i--) {\n            const index = toRemove[i];\n            const stream = this.streamList[index];\n            console.log('正在删除多播源:', stream.name, stream.url);\n            this.streamList.splice(index, 1);\n          }\n          if (removedCount > 0) {\n            console.log(`成功清除 ${removedCount} 个多播源`);\n            this.$message.warning(`已自动清除 ${removedCount} 个多播源`);\n            this.saveStreamList();\n\n            // 如果当前页没有数据，跳转到上一页\n            if (this.paginatedData.length === 0 && this.currentPage > 1) {\n              this.currentPage--;\n            }\n          }\n        }\n      } catch (error) {\n        console.error('检查多播源失败:', error);\n      }\n    },\n    async checkStream(stream) {\n      // 优先从 appSettings 中读取 FFprobe 路径\n      let ffprobePath = '';\n      try {\n        const appSettings = localStorage.getItem('appSettings');\n        if (appSettings) {\n          const settings = JSON.parse(appSettings);\n          ffprobePath = settings.ffprobePath;\n        }\n      } catch (error) {\n        console.error('读取 appSettings 失败:', error);\n      }\n\n      // 如果 appSettings 中没有，则从独立设置中读取\n      if (!ffprobePath) {\n        ffprobePath = localStorage.getItem('ffprobePath');\n      }\n      if (!ffprobePath) {\n        console.error('未找到 FFprobe 路径配置');\n        this.$message.error('请先在系统设置中配置FFprobe路径');\n        return false;\n      }\n\n      // 检查是否是多播源\n      if (this.isMulticastStream(stream.url)) {\n        // 直接返回false，不再设置状态\n        return false;\n      }\n      try {\n        const response = await fetch(`${this.getBaseUrl()}/api/check-stream`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            url: stream.url,\n            ffprobePath: ffprobePath\n          })\n        });\n        if (!response.ok) throw new Error('请求失败');\n        const result = await response.json();\n\n        // 更新流信息\n        stream.status = result.available ? '正常' : '异常';\n        stream.resolution = result.resolution || '-';\n        stream.responseTime = result.responseTime || '-';\n\n        // 检查是否需要自动清除\n        if (!result.available || this.shouldRemoveStream(stream)) {\n          let reason = '';\n          if (!result.available || stream.status === '异常') {\n            reason = '异常源';\n          } else if (stream.responseTime > 3000) {\n            reason = '响应时间过慢';\n          } else {\n            reason = '分辨率过低';\n          }\n\n          // 找到当前页的所有项\n          const currentPageItems = this.paginatedData;\n          // 找到要删除项在当前页的索引\n          const pageIndex = currentPageItems.indexOf(stream);\n          // 找到要删除项在整个列表中的索引\n          const listIndex = this.streamList.indexOf(stream);\n          if (listIndex > -1) {\n            this.streamList.splice(listIndex, 1);\n            // 如果删除的是当前页的最后一项，且不是第一页，则跳转到上一页\n            if (pageIndex === currentPageItems.length - 1 && this.currentPage > 1) {\n              this.currentPage--;\n            }\n            // 添加删除原因提示\n            console.log(`清除直播源: ${stream.name}, 原因: ${reason}`);\n            this.$message.warning(`已自动清除直播源：${reason}`);\n          }\n        }\n        this.saveStreamList();\n        return result.available;\n      } catch (error) {\n        console.error('检测错误:', error);\n        stream.status = '异常';\n\n        // 如果设置了自动清除异常源，在这里也进行清除\n        if (this.shouldRemoveStream(stream)) {\n          const currentPageItems = this.paginatedData;\n          const pageIndex = currentPageItems.indexOf(stream);\n          const listIndex = this.streamList.indexOf(stream);\n          if (listIndex > -1) {\n            this.streamList.splice(listIndex, 1);\n            if (pageIndex === currentPageItems.length - 1 && this.currentPage > 1) {\n              this.currentPage--;\n            }\n            console.log(`清除异常直播源: ${stream.name}, 原因: 检测失败`);\n            this.$message.warning('已自动清除直播源：检测失败');\n          }\n        }\n        this.saveStreamList();\n        return false;\n      }\n    },\n    shouldRemoveStream(stream) {\n      try {\n        // 获取设置\n        const appSettings = localStorage.getItem('appSettings');\n        let settings = {};\n        if (appSettings) {\n          settings = JSON.parse(appSettings);\n        }\n\n        // 检查是否需要清除异常源\n        if (settings.autoRemoveInvalid === true && (stream.status === '异常' || stream.status === '未知')) {\n          console.log(`应清除异常源: ${stream.name}, 状态: ${stream.status}`);\n          return true;\n        }\n\n        // 获取模式设置\n        const extremeMode = settings.extremeMode === true;\n        const strictMode = settings.strictMode === true;\n\n        // 检查是否需要清除低分辨率源\n        if (settings.autoRemoveLowRes === true && stream.resolution !== '未知' && stream.resolution !== '多播源' && stream.resolution !== '-') {\n          const [width, height] = stream.resolution.split('x').map(Number);\n          if (extremeMode ? width < 1920 || height < 1080 : strictMode ? width < 1920 || height < 1080 : width < 1280 || height < 720) {\n            console.log(`应清除低分辨率源: ${stream.name}, 分辨率: ${stream.resolution}`);\n            return true;\n          }\n        }\n\n        // 检查响应时间\n        if (settings.autoRemoveSlowResponse === true && stream.responseTime !== '-' && Number(stream.responseTime) > (extremeMode ? 1500 : strictMode ? 2000 : 3000)) {\n          console.log(`应清除慢速源: ${stream.name}, 响应时间: ${stream.responseTime}ms`);\n          return true;\n        }\n        return false;\n      } catch (error) {\n        console.error('检查是否应该移除流时出错:', error);\n        return false;\n      }\n    },\n    async handleBatchCheck() {\n      if (this.isChecking) return;\n      const uncheckedStreams = this.streamList.filter(s => !this.isPaused || this.streamList.indexOf(s) > this.pausedIndex);\n      if (uncheckedStreams.length === 0) {\n        this.showMessage('没有需要检测的直播源', 'info');\n        return;\n      }\n      this.isChecking = true;\n      this.shouldStop = false;\n      this.totalCount = uncheckedStreams.length;\n      this.checkedCount = this.isPaused ? this.checkedCount : 0;\n\n      // 显示检测进度消息\n      const progressMsgId = this.messageId++;\n      this.messages.push({\n        id: progressMsgId,\n        content: `检测进度：${this.checkedCount}/${this.totalCount}`,\n        type: 'progress'\n      });\n      try {\n        // 获取并发检测数量设置\n        const concurrentChecks = parseInt(localStorage.getItem('concurrentChecks')) || 3;\n\n        // 从暂停的位置或开始位置继续检测\n        const startIndex = this.isPaused ? this.pausedIndex + 1 : 0;\n\n        // 分批处理，每批次处理固定数量的流\n        const batchSize = Math.min(concurrentChecks, 10); // 限制最大并发数\n\n        for (let i = startIndex; i < uncheckedStreams.length; i += batchSize) {\n          if (this.shouldStop) break;\n\n          // 获取当前批次要检测的流\n          const batch = uncheckedStreams.slice(i, i + batchSize);\n\n          // 并发检测当前批次的所有流\n          await Promise.all(batch.map(async stream => {\n            if (this.shouldStop) return;\n            try {\n              stream.status = '检测中';\n              const success = await this.checkStream(stream);\n              this.checkedCount++;\n              if (success) {\n                this.saveState();\n              }\n            } catch (error) {\n              console.error('检测流失败:', error);\n              stream.status = '异常';\n              this.checkedCount++;\n            }\n          }));\n\n          // 更新暂停位置\n          this.pausedIndex = i + batchSize - 1;\n\n          // 每批次完成后保存状态\n          this.saveState();\n        }\n        if (!this.shouldStop) {\n          this.isChecking = false;\n          this.isPaused = false;\n          this.pausedIndex = -1;\n          this.showMessage('批量检测完成', 'success');\n          this.removeMessage(progressMsgId);\n\n          // 检查是否需要在批量检测完成后同步\n          if (this.syncForm.autoSync && this.syncForm.syncType === 'afterCheck') {\n            await this.syncToGithub(this.generateContent('txt'), this.syncForm.txtPath);\n            await this.syncToGithub(this.generateContent('m3u'), this.syncForm.m3uPath);\n            this.showMessage('已同步到GitHub', 'success');\n          }\n        }\n      } catch (error) {\n        console.error('批量检测错误:', error);\n        this.showMessage('批量检测失败', 'error');\n        this.removeMessage(progressMsgId);\n      } finally {\n        if (this.shouldStop) {\n          this.isChecking = false;\n          this.isPaused = true;\n          this.showMessage('检测已暂停', 'warning');\n          this.removeMessage(progressMsgId);\n        }\n      }\n    },\n    pauseCheck() {\n      this.shouldStop = true;\n    },\n    async resumeCheck() {\n      if (this.pausedIndex >= 0) {\n        this.isChecking = true;\n        this.isPaused = false;\n        this.shouldStop = false;\n        await this.batchCheck(this.pausedIndex);\n      }\n    },\n    async handleCheck(row) {\n      row.status = '检测中';\n      const success = await this.checkStream(row);\n      this.$message[success ? 'success' : 'error'](`检测${success ? '成功' : '失败'}: ${row.name}`);\n    },\n    handleDelete(row) {\n      this.$confirm('确认删除该直播源?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        const index = this.streamList.indexOf(row);\n        this.streamList.splice(index, 1);\n        const maxPage = Math.ceil(this.streamList.length / this.pageSize);\n        if (this.currentPage > maxPage) {\n          this.currentPage = Math.max(maxPage, 1);\n        }\n        this.saveStreamList(); // 保存更新后的列表\n        this.$message.success('删除成功');\n      }).catch(() => {});\n    },\n    async handleUrlImport() {\n      const valid = await this.$refs.importForm.validate();\n      if (!valid) return;\n      try {\n        const response = await fetch(`${this.getBaseUrl()}/api/import-url`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            url: this.importForm.url\n          })\n        });\n        if (!response.ok) throw new Error('导入失败');\n        const content = await response.text();\n        const newStreams = this.parseContent(content);\n        if (newStreams.length > 0) {\n          // 过滤重复的直播源\n          const existingUrls = new Set(this.streamList.map(s => s.url));\n          const uniqueStreams = newStreams.filter(s => !existingUrls.has(s.url));\n          if (uniqueStreams.length > 0) {\n            this.streamList.push(...uniqueStreams);\n            this.$message.success(`成功导入 ${uniqueStreams.length} 个直播源`);\n            this.importUrlDialogVisible = false;\n\n            // 导入后立即检查多播源\n            this.$nextTick(() => {\n              this.checkMulticastStreams();\n            });\n          } else {\n            this.$message.info('没有新的直播源可以导入');\n          }\n        } else {\n          this.$message.warning('未找到有效的直播源');\n        }\n      } catch (error) {\n        this.$message.error('导入失败：' + error.message);\n      }\n    },\n    readFile(file) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = e => resolve(e.target.result);\n        reader.onerror = () => reject(new Error('文件读取失败'));\n        reader.readAsText(file);\n      });\n    },\n    parseContent(content) {\n      const lines = content.split('\\n');\n      const streams = [];\n      let currentGroup = '未分组';\n\n      // 检测是否是 m3u 格式\n      if (content.includes('#EXTM3U')) {\n        let currentName = '';\n        let currentGroupTitle = '';\n        lines.forEach(line => {\n          line = line.trim();\n          if (!line) return;\n          if (line.startsWith('#EXTINF:')) {\n            // 尝试不同的名称提取方式\n            let name = '';\n\n            // 1. 尝试提取 tvg-name 属性\n            const tvgNameMatch = line.match(/tvg-name=\"([^\"]+)\"/i);\n            if (tvgNameMatch) {\n              name = tvgNameMatch[1].trim();\n            }\n\n            // 2. 如果没有 tvg-name，尝试提取最后的逗号后的名称\n            if (!name) {\n              const lastCommaIndex = line.lastIndexOf(',');\n              if (lastCommaIndex !== -1) {\n                name = line.substring(lastCommaIndex + 1).trim();\n              }\n            }\n\n            // 3. 如果还是没有名称，尝试提取 tvg-id\n            if (!name) {\n              const tvgIdMatch = line.match(/tvg-id=\"([^\"]+)\"/i);\n              if (tvgIdMatch) {\n                name = tvgIdMatch[1].trim();\n              } else {\n                // 3.1 尝试提取不带引号的 tvg-id\n                const tvgIdNoQuoteMatch = line.match(/tvg-id=([^,\\s]+)/i);\n                if (tvgIdNoQuoteMatch) {\n                  name = tvgIdNoQuoteMatch[1].trim();\n                }\n              }\n            }\n            currentName = name || '未命名';\n\n            // 提取分组信息\n            // 1. 先尝试带引号的 group-title\n            const groupMatch = line.match(/group-title=\"([^\"]+)\"/i);\n            if (groupMatch) {\n              currentGroupTitle = groupMatch[1].trim();\n            } else {\n              // 2. 尝试不带引号的 group-title\n              const groupNoQuoteMatch = line.match(/group-title=([^,\\s]+)/i);\n              if (groupNoQuoteMatch) {\n                currentGroupTitle = groupNoQuoteMatch[1].trim();\n              }\n            }\n          } else if (!line.startsWith('#') && line.trim()) {\n            // 这是一个媒体URL行\n            const url = line.trim();\n            // 在添加流之前先检查是否是多播源\n            if (currentName && !this.isMulticastStream(url)) {\n              streams.push({\n                name: currentName,\n                url: url,\n                group: currentGroupTitle || currentGroup,\n                status: '未检测',\n                resolution: '-',\n                responseTime: '-'\n              });\n            } else {\n              console.log('跳过多播源:', url);\n            }\n            currentName = ''; // 重置当前名称\n          }\n        });\n      } else {\n        // txt 格式处理\n        lines.forEach(line => {\n          line = line.trim();\n          if (!line) return;\n\n          // 检查是否是分组标记\n          if (line.endsWith(',#genre#')) {\n            currentGroup = line.replace(',#genre#', '');\n            return;\n          }\n\n          // 解析直播源行\n          const [name, urls] = line.split(',');\n          if (!name || !urls) return;\n\n          // 检查是否包含多个URL（用#分隔）\n          const urlList = urls.split('#');\n\n          // 为每个URL创建一个新的直播源条目，但排除多播源\n          urlList.forEach(url => {\n            url = url.trim();\n            if (url && !this.isMulticastStream(url)) {\n              streams.push({\n                name: name,\n                url: url,\n                group: currentGroup,\n                status: '未检测',\n                resolution: '-',\n                responseTime: '-'\n              });\n            } else if (url) {\n              console.log('跳过多播源:', url);\n            }\n          });\n        });\n      }\n      console.log(`解析完成: 共发现 ${streams.length} 个有效直播源`);\n      return streams;\n    },\n    addStreamsToList(streams) {\n      streams.forEach(stream => {\n        this.streamList.push(stream);\n      });\n      this.currentPage = 1;\n      this.saveStreamList(); // 保存更新后的列表\n    },\n    handleSizeChange(val) {\n      this.pageSize = val;\n      // 当每页条数改变时，重置当前页为第一页\n      this.currentPage = 1;\n    },\n    handleCurrentChange(val) {\n      this.currentPage = val;\n    },\n    async handleFileUpload(event) {\n      const file = event.target.files[0];\n      if (!file) return;\n      try {\n        const content = await this.readFile(file);\n        const newStreams = this.parseContent(content);\n        if (newStreams.length > 0) {\n          // 过滤重复的直播源\n          const existingUrls = new Set(this.streamList.map(s => s.url));\n          const uniqueStreams = newStreams.filter(s => !existingUrls.has(s.url));\n          if (uniqueStreams.length > 0) {\n            this.streamList.push(...uniqueStreams);\n            this.$message.success(`成功导入 ${uniqueStreams.length} 个直播源`);\n\n            // 导入后立即检查多播源\n            this.$nextTick(() => {\n              this.checkMulticastStreams();\n            });\n          } else {\n            this.$message.info('没有新的直播源可以导入');\n          }\n        } else {\n          this.$message.warning('未找到有效的直播源');\n        }\n      } catch (error) {\n        this.$message.error('文件读取失败：' + error.message);\n      } finally {\n        // 清除文件输入，允许重复选择同一文件\n        event.target.value = '';\n      }\n    },\n    getGroupFromFileName(filename) {\n      // 从文件名中提取可能的分组名\n      const name = filename.toLowerCase();\n      if (name.includes('cctv')) return 'CCTV';\n      if (name.includes('卫视')) return '卫视';\n      if (name.includes('地方')) return '地方台';\n      return '未分组';\n    },\n    handleClearList() {\n      this.$confirm('确认清空列表吗？', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        // 只重置批量检测相关的状态\n        this.streamList = [];\n        this.currentPage = 1;\n        this.isChecking = false;\n        this.isPaused = false;\n        this.checkIndex = 0;\n\n        // 更新链接内容和保存状态\n        this.updateLinkContent();\n        this.saveState();\n        this.$message({\n          type: 'success',\n          message: '列表已清空'\n        });\n      }).catch(() => {\n        this.$message({\n          type: 'info',\n          message: '已取消清空'\n        });\n      });\n    },\n    handleCopy(row) {\n      // 创建一个临时输入框来实现复制功能\n      const textarea = document.createElement('textarea');\n      textarea.value = row.url;\n      document.body.appendChild(textarea);\n      textarea.select();\n      try {\n        document.execCommand('copy');\n        this.$message.success('链接已复制到剪贴板');\n      } catch (err) {\n        this.$message.error('复制失败');\n      } finally {\n        document.body.removeChild(textarea);\n      }\n    },\n    saveStreamList() {\n      if (localStorage.getItem('persistentData') === 'true') {\n        localStorage.setItem('streamList', JSON.stringify(this.streamList));\n      }\n    },\n    handleCollectMode() {\n      if (this.isCollecting) {\n        this.stopCollecting();\n      } else {\n        this.collectDialogVisible = true;\n      }\n    },\n    async startCollecting(isRestore = false) {\n      if (!isRestore) {\n        // 确保 urls 是数组\n        if (!Array.isArray(this.collectForm.urls)) {\n          this.$set(this.collectForm, 'urls', ['']);\n          return;\n        }\n        const valid = await this.$refs.collectForm.validate();\n        if (!valid) return;\n      }\n      this.collectDialogVisible = false;\n      this.isCollecting = true;\n      this.saveState(); // 保存状态\n\n      // 立即执行一次采集\n      await this.collect();\n\n      // 如果开启了自动采集，设置定时器\n      if (this.collectForm.autoCollect) {\n        this.setupCollectSchedule();\n      } else {\n        // 单次采集完成后停止\n        this.isCollecting = false;\n        this.saveState();\n      }\n    },\n    stopCollecting() {\n      this.isCollecting = false;\n      if (this.collectTimer) {\n        clearInterval(this.collectTimer);\n        this.collectTimer = null;\n      }\n      this.saveState(); // 保存状态\n      // 只有在自动采集模式下才显示停止提示\n      if (this.collectForm.autoCollect) {\n        this.$message.success('已停止采集');\n      }\n    },\n    async collect() {\n      try {\n        // 检查是否有检测正在进行\n        if (this.isChecking) {\n          this.$message.warning('检测正在进行中，暂时跳过本次采集');\n          return;\n        }\n        this.$message.info('开始采集直播源...');\n\n        // 并发采集所有地址\n        const results = await Promise.allSettled(this.collectForm.urls.map(async url => {\n          try {\n            const response = await fetch(`${this.getBaseUrl()}/api/collect-url?url=${encodeURIComponent(url)}`, {\n              method: 'GET',\n              headers: {\n                'Accept': 'text/plain'\n              }\n            });\n            if (!response.ok) throw new Error(`采集失败: ${url}`);\n            const content = await response.text();\n            const newStreams = this.parseContent(content);\n\n            // 过滤重复的直播源，同时考虑正在检测的源\n            const existingUrls = new Set(this.streamList.map(s => s.url));\n            return newStreams.filter(s => {\n              // 如果源已存在且正在检测中，保留原有状态\n              const existingStream = this.streamList.find(es => es.url === s.url);\n              if (existingStream && existingStream.status === '检测中') {\n                return false;\n              }\n              return !existingUrls.has(s.url);\n            });\n          } catch (error) {\n            console.error(`采集地址 ${url} 失败:`, error);\n            return [];\n          }\n        }));\n\n        // 合并所有采集结果\n        const allNewStreams = results.filter(result => result.status === 'fulfilled').flatMap(result => result.value).filter((stream, index, self) => index === self.findIndex(s => s.url === stream.url));\n\n        // 添加新的直播源到列表\n        if (allNewStreams.length > 0) {\n          this.addStreamsToList(allNewStreams);\n          this.$message.success(`采集成功: 新增${allNewStreams.length}个直播源`);\n        } else {\n          this.$message.info('未发现新的直播源');\n        }\n\n        // 统计失败的地址\n        const failedUrls = results.filter(result => result.status === 'rejected').length;\n        if (failedUrls > 0) {\n          this.$message.warning(`${failedUrls}个地址采集失败`);\n        }\n      } catch (error) {\n        this.$message.error('采集失败：' + error.message);\n        if (!this.collectForm.autoCollect) {\n          this.stopCollecting();\n        }\n      }\n    },\n    async handleGenerateLink() {\n      this.generateLinkDialogVisible = true;\n      try {\n        // 先生成 TXT 格式链接\n        const txtResponse = await fetch(`${this.getBaseUrl()}/api/generate-link`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain',\n            'X-File-Format': 'txt'\n          },\n          body: this.generateContent('txt')\n        });\n\n        // 再生成 M3U 格式链接\n        const m3uResponse = await fetch(`${this.getBaseUrl()}/api/generate-link`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain',\n            'X-File-Format': 'm3u'\n          },\n          body: this.generateContent('m3u')\n        });\n        if (txtResponse.ok && m3uResponse.ok) {\n          const txtLink = await txtResponse.text();\n          const m3uLink = await m3uResponse.text();\n\n          // 根据当前选择的格式显示对应的链接\n          this.generatedLinks = {\n            txt: txtLink,\n            m3u: m3uLink\n          };\n          this.generatedLink = this.generatedLinks[this.linkForm.format];\n        }\n      } catch (error) {\n        console.error('生成链接失败：', error);\n        this.$message.error('生成链接失败');\n      }\n    },\n    generateContent(format) {\n      return format === 'txt' ? this.generateTxtContent() : this.generateM3uContent();\n    },\n    generateTxtContent() {\n      let content = '';\n      let currentGroup = '';\n\n      // 对每个分组内的直播源按响应速度排序\n      const sortedStreams = [...this.mergedStreams].sort((a, b) => {\n        if (a.group !== b.group) return 0; // 不同分组不改变顺序\n        const aTime = Number(a.responseTime) || Infinity;\n        const bTime = Number(b.responseTime) || Infinity;\n        return aTime - bTime;\n      });\n      sortedStreams.forEach(stream => {\n        if (stream.group !== currentGroup) {\n          currentGroup = stream.group;\n          content += `${currentGroup},#genre#\\n`;\n        }\n        content += `${stream.name},${stream.urls.join('#')}\\n`;\n      });\n      return content.trim();\n    },\n    generateM3uContent() {\n      let content = '#EXTM3U\\n';\n      let currentGroup = '';\n\n      // 对每个分组内的直播源按响应速度排序\n      const sortedStreams = [...this.mergedStreams].sort((a, b) => {\n        if (a.group !== b.group) return 0; // 不同分组不改变顺序\n        const aTime = Number(a.responseTime) || Infinity;\n        const bTime = Number(b.responseTime) || Infinity;\n        return aTime - bTime;\n      });\n      sortedStreams.forEach(stream => {\n        if (stream.group !== currentGroup) {\n          currentGroup = stream.group;\n          content += `\\n#EXTINF:-1 group-title=\"${currentGroup}\"\\n`;\n        }\n        stream.urls.forEach(url => {\n          content += `#EXTINF:-1,${stream.name}\\n${url}\\n`;\n        });\n      });\n      return content.trim();\n    },\n    copyGeneratedLink() {\n      const textarea = document.createElement('textarea');\n      textarea.value = this.generatedLink;\n      document.body.appendChild(textarea);\n      textarea.select();\n      try {\n        document.execCommand('copy');\n        this.$message.success('链接已复制到剪贴板');\n      } catch (err) {\n        this.$message.error('复制失败');\n      } finally {\n        document.body.removeChild(textarea);\n      }\n    },\n    downloadTxtFile() {\n      const blob = new Blob([this.generatedLink], {\n        type: 'text/plain;charset=utf-8'\n      });\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `直播源列表_${new Date().toLocaleDateString()}.txt`;\n      document.body.appendChild(link);\n      link.click();\n\n      // 清理\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(link);\n      this.$message.success('文件下载成功');\n    },\n    // 修改更新链接内容的方法\n    async updateLinkContent() {\n      try {\n        // 更新 TXT 格式内容\n        await fetch(`${this.getBaseUrl()}/api/update-content`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain',\n            'X-File-Format': 'txt'\n          },\n          body: this.generateContent('txt')\n        });\n\n        // 更新 M3U 格式内容\n        await fetch(`${this.getBaseUrl()}/api/update-content`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain',\n            'X-File-Format': 'm3u'\n          },\n          body: this.generateContent('m3u')\n        });\n      } catch (error) {\n        console.error('更新链接内容失败：', error);\n      }\n    },\n    handleScheduleCheck() {\n      if (this.isScheduled) {\n        this.stopScheduleCheck();\n      } else {\n        this.scheduleDialogVisible = true;\n      }\n    },\n    startScheduleCheck() {\n      this.$refs.scheduleForm.validate(valid => {\n        if (valid) {\n          this.scheduleDialogVisible = false;\n          this.isScheduled = true;\n          this.setupSchedule();\n          this.saveState(); // 保存状态\n          this.$message.success('定时检测已开启');\n        }\n      });\n    },\n    stopScheduleCheck() {\n      if (this.scheduleTimer) {\n        clearInterval(this.scheduleTimer);\n        this.scheduleTimer = null;\n      }\n      this.isScheduled = false;\n      this.nextScheduleTime = null;\n      this.saveState(); // 保存状态\n      this.$message.success('定时检测已停止');\n    },\n    setupSchedule() {\n      // 清除现有定时器\n      if (this.scheduleTimer) {\n        clearInterval(this.scheduleTimer);\n      }\n      const calculateNextExecutionTime = () => {\n        const now = new Date();\n        const [hours, minutes] = this.scheduleForm.executeTime.split(':').map(Number);\n        let nextTime = new Date(now);\n        nextTime.setHours(hours, minutes, 0, 0);\n\n        // 如果当前时间已经过了今天的执行时间，设置为明天\n        if (nextTime <= now) {\n          nextTime.setDate(nextTime.getDate() + 1);\n        }\n\n        // 如果是每周模式，调整到下一个符合条件的星期\n        if (this.scheduleForm.scheduleType === 'weekly') {\n          const targetDay = parseInt(this.scheduleForm.weekDay);\n          while (nextTime.getDay() !== targetDay) {\n            nextTime.setDate(nextTime.getDate() + 1);\n          }\n        }\n        return nextTime;\n      };\n      const scheduleNextExecution = () => {\n        const nextTime = calculateNextExecutionTime();\n        const delay = nextTime.getTime() - new Date().getTime();\n\n        // 更新下次执行时间显示\n        this.nextScheduleTime = nextTime;\n\n        // 设置下次执行的定时器\n        this.scheduleTimer = setTimeout(() => {\n          // 如果当前正在检测中，等待检测完成后再执行\n          if (!this.isChecking) {\n            this.handleBatchCheck();\n          }\n          // 设置下一次执行\n          scheduleNextExecution();\n        }, delay);\n      };\n\n      // 开始第一次调度\n      scheduleNextExecution();\n    },\n    // 保存当前状态到本地存储\n    saveState() {\n      try {\n        // 清除旧的分块数据\n        this.clearStorageData();\n\n        // 只保存必要的数据字段，减少数据量\n        const minimalStreamList = this.streamList.map(stream => ({\n          name: stream.name,\n          url: stream.url,\n          group: stream.group,\n          status: stream.status,\n          resolution: stream.resolution || '',\n          responseTime: stream.responseTime || 0\n        }));\n\n        // 将streamList分块存储，减小分块大小\n        const streamListStr = JSON.stringify(minimalStreamList);\n        const chunkSize = 100000; // 减小到100KB\n        const chunks = Math.ceil(streamListStr.length / chunkSize);\n\n        // 如果数据量太大，只保存基本信息\n        if (chunks > 10) {\n          console.warn('数据量过大，只保存基本状态信息');\n          const basicState = {\n            currentPage: this.currentPage,\n            pageSize: this.pageSize,\n            scheduleForm: this.scheduleForm,\n            collectForm: this.collectForm\n          };\n          localStorage.setItem(this.stateKey, JSON.stringify(basicState));\n          return;\n        }\n\n        // 分块存储\n        for (let i = 0; i < chunks; i++) {\n          const chunk = streamListStr.slice(i * chunkSize, (i + 1) * chunkSize);\n          try {\n            localStorage.setItem(`${this.stateKey}_streamList_${i}`, chunk);\n          } catch (e) {\n            console.error('存储分块失败:', e);\n            this.clearStorageData();\n            // 尝试只保存基本信息\n            const basicState = {\n              currentPage: this.currentPage,\n              pageSize: this.pageSize,\n              scheduleForm: this.scheduleForm,\n              collectForm: this.collectForm\n            };\n            localStorage.setItem(this.stateKey, JSON.stringify(basicState));\n            return;\n          }\n        }\n\n        // 存储其他状态数据\n        const state = {\n          currentPage: this.currentPage,\n          pageSize: this.pageSize,\n          scheduleForm: this.scheduleForm,\n          collectForm: this.collectForm,\n          streamListChunks: chunks\n        };\n        localStorage.setItem(this.stateKey, JSON.stringify(state));\n      } catch (error) {\n        console.error('保存状态失败:', error);\n        this.clearStorageData();\n        // 尝试只保存基本信息\n        try {\n          const basicState = {\n            currentPage: this.currentPage,\n            pageSize: this.pageSize\n          };\n          localStorage.setItem(this.stateKey, JSON.stringify(basicState));\n        } catch (e) {\n          console.error('保存基本状态也失败:', e);\n        }\n      }\n    },\n    // 从本地存储恢复状态\n    restoreState() {\n      try {\n        const savedState = localStorage.getItem(this.stateKey);\n        if (savedState) {\n          const state = JSON.parse(savedState);\n\n          // 恢复streamList\n          if (state.streamListChunks) {\n            try {\n              let streamListStr = '';\n              for (let i = 0; i < state.streamListChunks; i++) {\n                const chunk = localStorage.getItem(`${this.stateKey}_streamList_${i}`);\n                if (chunk) {\n                  streamListStr += chunk;\n                }\n              }\n              if (streamListStr) {\n                this.streamList = JSON.parse(streamListStr);\n              }\n            } catch (e) {\n              console.error('恢复streamList失败:', e);\n              this.streamList = [];\n            }\n          }\n\n          // 恢复其他状态\n          this.currentPage = state.currentPage || 1;\n          this.pageSize = state.pageSize || 5;\n          if (state.scheduleForm) this.scheduleForm = state.scheduleForm;\n          if (state.collectForm) this.collectForm = state.collectForm;\n        }\n\n        // 重置所有运行状态\n        this.isChecking = false;\n        this.isPaused = false;\n        this.isScheduled = false;\n        this.isCollecting = false;\n        this.checkedCount = 0;\n        this.totalCount = 0;\n        this.pausedIndex = -1;\n        this.nextScheduleTime = null;\n      } catch (error) {\n        console.error('恢复状态失败:', error);\n        this.clearStorageData();\n        this.streamList = [];\n      }\n    },\n    // 清理存储数据\n    clearStorageData() {\n      try {\n        localStorage.removeItem(this.stateKey);\n        for (let i = 0;; i++) {\n          const key = `${this.stateKey}_streamList_${i}`;\n          if (localStorage.getItem(key) === null) {\n            break;\n          }\n          localStorage.removeItem(key);\n        }\n      } catch (error) {\n        console.error('清理存储数据失败:', error);\n      }\n    },\n    // 添加重置所有运行状态的方法\n    resetAllStates() {\n      // 停止定时检测\n      if (this.isScheduled) {\n        this.stopScheduleCheck();\n      }\n\n      // 停止采集\n      if (this.isCollecting) {\n        this.stopCollecting();\n      }\n\n      // 停止批量检测\n      if (this.isChecking) {\n        this.shouldStop = true;\n        this.isChecking = false;\n        this.isPaused = false;\n      }\n\n      // 重置所有状态\n      this.isChecking = false;\n      this.isPaused = false;\n      this.isScheduled = false;\n      this.isCollecting = false;\n      this.checkedCount = 0;\n      this.totalCount = 0;\n      this.pausedIndex = -1;\n      this.nextScheduleTime = null;\n\n      // 清除所有定时器\n      if (this.scheduleTimer) {\n        clearInterval(this.scheduleTimer);\n        this.scheduleTimer = null;\n      }\n      if (this.collectTimer) {\n        clearInterval(this.collectTimer);\n        this.collectTimer = null;\n      }\n\n      // 保存重置后的状态\n      this.saveState();\n      this.$message.success('所有运行状态已重置');\n    },\n    // 更新活动状态\n    updateActiveStatus() {\n      const hasActive = this.isChecking || this.isCollecting || this.isScheduled;\n      if (this.hasActiveOperations !== hasActive) {\n        this.hasActiveOperations = hasActive;\n        if (hasActive) {\n          // 添加刷新拦截\n          window.addEventListener('beforeunload', this.handleBeforeUnload);\n        } else {\n          // 移除刷新拦截\n          window.removeEventListener('beforeunload', this.handleBeforeUnload);\n        }\n      }\n    },\n    // 处理页面刷新\n    handleBeforeUnload(e) {\n      if (this.hasActiveOperations) {\n        const message = '有正在执行的操作，确定要离开吗？';\n        e.preventDefault();\n        e.returnValue = message;\n        return message;\n      }\n    },\n    addCollectUrl() {\n      if (!Array.isArray(this.collectForm.urls)) {\n        // 如果 urls 不是数组，先初始化它\n        this.$set(this.collectForm, 'urls', ['']);\n      } else {\n        this.collectForm.urls.push('');\n      }\n    },\n    removeCollectUrl(index) {\n      if (Array.isArray(this.collectForm.urls) && this.collectForm.urls.length > 1) {\n        this.collectForm.urls.splice(index, 1);\n      }\n    },\n    // 添加判断分辨率标签类型的方法\n    getResolutionTagType(resolution) {\n      if (!resolution || resolution === '-') return 'info';\n      if (resolution === '多播源') return 'warning'; // 为多播源添加特殊样式\n      const [width] = resolution.split('x').map(Number);\n      if (width >= 1920) return 'success';\n      if (width >= 1280) return ''; // 默认类型\n      return 'warning';\n    },\n    // 添加判断响应时间标签类型的方法\n    getResponseTimeTagType(responseTime) {\n      if (!responseTime || responseTime === '-') return 'info';\n      const time = Number(responseTime);\n      if (time <= 1000) return 'success';\n      if (time <= 2000) return ''; // 默认类型\n      if (time <= 3000) return 'warning';\n      return 'danger';\n    },\n    setupCollectSchedule() {\n      // 清除现有定时器\n      if (this.collectTimer) {\n        clearInterval(this.collectTimer);\n      }\n      const calculateNextCollectTime = () => {\n        const now = new Date();\n        const [hours, minutes] = this.collectForm.executeTime.split(':').map(Number);\n        let nextTime = new Date(now);\n        nextTime.setHours(hours, minutes, 0, 0);\n\n        // 如果当前时间已经过了今天的执行时间，设置为明天\n        if (nextTime <= now) {\n          nextTime.setDate(nextTime.getDate() + 1);\n        }\n\n        // 如果是每周模式，调整到下一个符合条件的星期\n        if (this.collectForm.collectType === 'weekly') {\n          const targetDay = parseInt(this.collectForm.weekDay);\n          while (nextTime.getDay() !== targetDay) {\n            nextTime.setDate(nextTime.getDate() + 1);\n          }\n        }\n        return nextTime;\n      };\n      const scheduleNextCollection = () => {\n        const nextTime = calculateNextCollectTime();\n        const delay = nextTime.getTime() - new Date().getTime();\n\n        // 设置下次执行的定时器\n        this.collectTimer = setTimeout(() => {\n          // 执行采集\n          this.collect();\n          // 设置下一次执行\n          scheduleNextCollection();\n        }, delay);\n      };\n\n      // 开始第一次调度\n      scheduleNextCollection();\n    },\n    handleSearch() {\n      this.filteredList = this.streamList.filter(item => {\n        const nameMatch = !this.searchForm.name || item.name.toLowerCase().includes(this.searchForm.name.toLowerCase());\n        const groupMatch = !this.searchForm.group || item.group === this.searchForm.group;\n        const statusMatch = !this.searchForm.status || item.status === this.searchForm.status;\n        return nameMatch && groupMatch && statusMatch;\n      });\n\n      // 重置到第一页\n      this.currentPage = 1;\n      this.searchDialogVisible = false;\n    },\n    resetSearch() {\n      this.searchForm = {\n        name: '',\n        group: '',\n        status: ''\n      };\n      this.filteredList = [];\n      this.currentPage = 1;\n    },\n    // 获取真实IP地址\n    async getRealIp() {\n      try {\n        const response = await fetch(`${this.getBaseUrl()}/api/local-ip`);\n        if (response.ok) {\n          const data = await response.json();\n          this.realIp = data.ip;\n          localStorage.setItem('realIp', data.ip); // 保存真实IP到localStorage\n        }\n      } catch (error) {\n        console.error('获取IP失败:', error);\n      }\n    },\n    // 获取基础URL\n    getBaseUrl() {\n      const useRealIp = localStorage.getItem('useRealIp') === 'true';\n      return useRealIp && this.realIp ? `http://${this.realIp}:8080` : 'http://localhost:8080';\n    },\n    async saveGithubSettings() {\n      try {\n        await this.$refs.syncForm.validate();\n\n        // 保存设置到localStorage\n        localStorage.setItem('githubToken', this.syncForm.token);\n        localStorage.setItem('githubRepo', this.syncForm.repo);\n        localStorage.setItem('githubTxtPath', this.syncForm.txtPath);\n        localStorage.setItem('githubM3uPath', this.syncForm.m3uPath);\n        localStorage.setItem('githubAutoSync', this.syncForm.autoSync);\n        localStorage.setItem('githubSyncType', this.syncForm.syncType);\n        localStorage.setItem('githubExecuteTime', this.syncForm.executeTime);\n        localStorage.setItem('githubWeekDay', this.syncForm.weekDay);\n\n        // 如果开启了自动同步，重新设置定时器\n        if (this.syncForm.autoSync) {\n          this.setupSyncSchedule();\n        } else {\n          this.clearSyncSchedule();\n        }\n        this.$message.success('设置已保存');\n        this.syncDialogVisible = false;\n      } catch (error) {\n        this.$message.error(error.message || '保存失败');\n      }\n    },\n    async syncToGithub(content, path) {\n      const response = await fetch(`${this.getBaseUrl()}/api/sync-github`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          token: this.syncForm.token,\n          repo: this.syncForm.repo,\n          path: path,\n          content: content,\n          message: this.syncForm.message\n        })\n      });\n      if (!response.ok) {\n        throw new Error('同步失败');\n      }\n    },\n    handleAutoSyncChange(value) {\n      if (value) {\n        this.setupSyncSchedule();\n      } else {\n        this.clearSyncSchedule();\n      }\n    },\n    setupSyncSchedule() {\n      this.clearSyncSchedule();\n      const calculateNextSyncTime = () => {\n        const now = new Date();\n        const [hours, minutes] = this.syncForm.executeTime.split(':').map(Number);\n        let nextTime = new Date(now);\n        nextTime.setHours(hours, minutes, 0, 0);\n\n        // 如果当前时间已经过了今天的执行时间，设置为明天\n        if (nextTime <= now) {\n          nextTime.setDate(nextTime.getDate() + 1);\n        }\n\n        // 如果是每周模式，调整到下一个符合条件的星期\n        if (this.syncForm.syncType === 'weekly') {\n          const targetDay = parseInt(this.syncForm.weekDay);\n          while (nextTime.getDay() !== targetDay) {\n            nextTime.setDate(nextTime.getDate() + 1);\n          }\n        }\n        return nextTime;\n      };\n      const scheduleNextSync = () => {\n        const nextTime = calculateNextSyncTime();\n        const delay = nextTime.getTime() - new Date().getTime();\n\n        // 设置下次执行的定时器\n        this.syncTimer = setTimeout(async () => {\n          try {\n            // 执行同步\n            await this.syncToGithub(this.generateContent('txt'), this.syncForm.txtPath);\n            await this.syncToGithub(this.generateContent('m3u'), this.syncForm.m3uPath);\n            this.$message.success('已同步到GitHub');\n          } catch (error) {\n            this.$message.error('同步失败：' + error.message);\n          }\n          // 设置下一次执行\n          scheduleNextSync();\n        }, delay);\n      };\n\n      // 开始第一次调度\n      scheduleNextSync();\n    },\n    clearSyncSchedule() {\n      if (this.syncTimer) {\n        clearInterval(this.syncTimer);\n        this.syncTimer = null;\n      }\n    },\n    getStatusTagType(status) {\n      switch (status) {\n        case '正常':\n          return 'success';\n        case '异常':\n          return 'danger';\n        case '未知':\n          return 'warning';\n        case '未检测':\n          return 'info';\n        default:\n          return 'info';\n      }\n    },\n    // 添加显示消息的方法\n    showMessage(content, type = 'info', duration = 3000) {\n      const id = this.messageId++;\n      const message = {\n        id,\n        content,\n        type\n      };\n      this.messages.push(message);\n\n      // 如果不是检测进度消息，则自动移除\n      if (type !== 'progress') {\n        setTimeout(() => {\n          this.removeMessage(id);\n        }, duration);\n      }\n\n      // 最多显示5条消息\n      if (this.messages.length > 5) {\n        this.messages.shift();\n      }\n    },\n    // 移除消息\n    removeMessage(id) {\n      const index = this.messages.findIndex(msg => msg.id === id);\n      if (index !== -1) {\n        this.messages.splice(index, 1);\n      }\n    },\n    // 获取消息图标\n    getMessageIcon(type) {\n      switch (type) {\n        case 'success':\n          return 'el-icon-success';\n        case 'warning':\n          return 'el-icon-warning';\n        case 'error':\n          return 'el-icon-error';\n        case 'progress':\n          return 'el-icon-loading';\n        default:\n          return 'el-icon-info';\n      }\n    }\n  },\n  watch: {\n    // 只监听数据变化\n    streamList: {\n      handler() {\n        this.updateLinkContent();\n        this.saveState();\n      },\n      deep: true\n    },\n    currentPage() {\n      this.saveState();\n    },\n    pageSize() {\n      this.saveState();\n    },\n    // 监听所有可能的运行状态\n    isChecking() {\n      this.updateActiveStatus();\n    },\n    isCollecting() {\n      this.updateActiveStatus();\n    },\n    isScheduled() {\n      this.updateActiveStatus();\n    },\n    // 添加格式变化监听\n    'linkForm.format'() {\n      if (this.generateLinkDialogVisible) {\n        this.handleGenerateLink();\n      }\n    }\n  },\n  // 组件被激活时（重新显示）\n  activated() {\n    // 如果有定时任务，恢复定时器\n    if (this.isScheduled) {\n      this.setupSchedule();\n    }\n    // 如果有采集任务，恢复采集\n    if (this.isCollecting) {\n      this.startCollecting(true);\n    }\n    // 如果有GitHub自动同步，恢复同步定时器\n    if (this.syncForm.autoSync) {\n      this.setupSyncSchedule();\n    }\n  },\n  // 组件被停用时（离开但不销毁）\n  deactivated() {\n    // 暂停定时器，但保持状态标志\n    if (this.scheduleTimer) {\n      clearInterval(this.scheduleTimer);\n      this.scheduleTimer = null;\n    }\n    // 暂停采集定时器，但保持状态标志\n    if (this.collectTimer) {\n      clearInterval(this.collectTimer);\n      this.collectTimer = null;\n    }\n    // 暂停同步定时器，但保持状态标志\n    if (this.syncTimer) {\n      clearInterval(this.syncTimer);\n      this.syncTimer = null;\n    }\n  }\n};","map":{"version":3,"names":["name","data","loading","streamList","importUrlDialogVisible","importForm","url","group","importRules","required","message","trigger","type","currentPage","pageSize","isChecking","isPaused","checkedCount","totalCount","pausedIndex","shouldStop","isCollecting","collectDialogVisible","collectForm","urls","autoCollect","collectType","executeTime","weekDay","collectRules","validator","rule","value","callback","length","Error","errors","map","test","filter","error","collectTimer","generateLinkDialogVisible","generatedLink","previewContent","currentLinkId","scheduleDialogVisible","isScheduled","scheduleForm","scheduleType","scheduleRules","scheduleTimer","nextScheduleTime","stateKey","hasActiveOperations","linkForm","format","searchDialogVisible","searchForm","status","filteredList","realIp","syncDialogVisible","syncForm","token","localStorage","getItem","repo","txtPath","m3uPath","autoSync","syncType","syncRules","pattern","syncTimer","messages","messageId","computed","paginatedData","start","end","slice","checkButtonText","mergedStreams","streamMap","Map","forEach","stream","key","has","existing","get","includes","push","set","Array","from","values","groupOptions","Set","item","created","savedList","JSON","parse","$nextTick","checkMulticastStreams","$root","$on","saveStreamList","handleSettingsUpdate","restoreState","setupSchedule","startCollecting","setupSyncSchedule","getRealIp","beforeDestroy","$off","clearInterval","stopScheduleCheck","saveState","window","removeEventListener","handleBeforeUnload","methods","event","console","log","settings","isMulticastStream","patterns","lowerUrl","toLowerCase","isMulticast","some","appSettings","e","autoRemoveMulticast","removedCount","toRemove","index","i","splice","$message","warning","checkStream","ffprobePath","response","fetch","getBaseUrl","method","headers","body","stringify","ok","result","json","available","resolution","responseTime","shouldRemoveStream","reason","currentPageItems","pageIndex","indexOf","listIndex","autoRemoveInvalid","extremeMode","strictMode","autoRemoveLowRes","width","height","split","Number","autoRemoveSlowResponse","handleBatchCheck","uncheckedStreams","s","showMessage","progressMsgId","id","content","concurrentChecks","parseInt","startIndex","batchSize","Math","min","batch","Promise","all","success","removeMessage","syncToGithub","generateContent","pauseCheck","resumeCheck","batchCheck","handleCheck","row","handleDelete","$confirm","confirmButtonText","cancelButtonText","then","maxPage","ceil","max","catch","handleUrlImport","valid","$refs","validate","text","newStreams","parseContent","existingUrls","uniqueStreams","info","readFile","file","resolve","reject","reader","FileReader","onload","target","onerror","readAsText","lines","streams","currentGroup","currentName","currentGroupTitle","line","trim","startsWith","tvgNameMatch","match","lastCommaIndex","lastIndexOf","substring","tvgIdMatch","tvgIdNoQuoteMatch","groupMatch","groupNoQuoteMatch","endsWith","replace","urlList","addStreamsToList","handleSizeChange","val","handleCurrentChange","handleFileUpload","files","getGroupFromFileName","filename","handleClearList","checkIndex","updateLinkContent","handleCopy","textarea","document","createElement","appendChild","select","execCommand","err","removeChild","setItem","handleCollectMode","stopCollecting","isRestore","isArray","$set","collect","setupCollectSchedule","results","allSettled","encodeURIComponent","existingStream","find","es","allNewStreams","flatMap","self","findIndex","failedUrls","handleGenerateLink","txtResponse","m3uResponse","txtLink","m3uLink","generatedLinks","txt","m3u","generateTxtContent","generateM3uContent","sortedStreams","sort","a","b","aTime","Infinity","bTime","join","copyGeneratedLink","downloadTxtFile","blob","Blob","URL","createObjectURL","link","href","download","Date","toLocaleDateString","click","revokeObjectURL","handleScheduleCheck","startScheduleCheck","calculateNextExecutionTime","now","hours","minutes","nextTime","setHours","setDate","getDate","targetDay","getDay","scheduleNextExecution","delay","getTime","setTimeout","clearStorageData","minimalStreamList","streamListStr","chunkSize","chunks","warn","basicState","chunk","state","streamListChunks","savedState","removeItem","resetAllStates","updateActiveStatus","hasActive","addEventListener","preventDefault","returnValue","addCollectUrl","removeCollectUrl","getResolutionTagType","getResponseTimeTagType","time","calculateNextCollectTime","scheduleNextCollection","handleSearch","nameMatch","statusMatch","resetSearch","ip","useRealIp","saveGithubSettings","clearSyncSchedule","path","handleAutoSyncChange","calculateNextSyncTime","scheduleNextSync","getStatusTagType","duration","shift","msg","getMessageIcon","watch","handler","deep","linkForm.format","activated","deactivated"],"sources":["src/components/StreamCheck.vue"],"sourcesContent":["<template>\n  <div class=\"stream-check\">\n    <!-- 修改消息面板位置和样式 -->\n    <div class=\"message-panel\" :class=\"{ 'has-messages': messages.length > 0 }\">\n      <transition-group name=\"message-list\">\n        <div v-for=\"msg in messages\" :key=\"msg.id\" class=\"message-item\">\n          <i class=\"el-icon-delete\"></i>\n          <span class=\"message-content\">已自动清除直播源: {{ msg.content }}</span>\n        </div>\n      </transition-group>\n    </div>\n\n    <div class=\"table-operations\">\n      <div class=\"button-groups\">\n        <div class=\"button-group\">\n          <el-button-group>\n            <el-button\n                type=\"primary\"\n                icon=\"el-icon-upload2\"\n                @click=\"$refs.fileInput.click()\"\n                :disabled=\"isCollecting\">\n              导入本地文件\n            </el-button>\n            <el-button\n                type=\"primary\"\n                icon=\"el-icon-download\"\n                @click=\"importUrlDialogVisible = true\"\n                :disabled=\"isCollecting\">\n              导入网络文件\n            </el-button>\n          </el-button-group>\n        </div>\n\n        <div class=\"button-group\">\n          <el-button-group>\n            <el-button\n                type=\"success\"\n                icon=\"el-icon-refresh\"\n                @click=\"handleBatchCheck\"\n                :loading=\"isChecking\">\n              {{ checkButtonText }}\n            </el-button>\n            <el-button\n                v-if=\"isChecking\"\n                type=\"warning\"\n                icon=\"el-icon-video-pause\"\n                @click=\"pauseCheck\">\n              暂停检测\n            </el-button>\n            <el-button\n                v-if=\"isPaused\"\n                type=\"primary\"\n                icon=\"el-icon-video-play\"\n                @click=\"resumeCheck\">\n              继续检测\n            </el-button>\n            <el-button\n                type=\"danger\"\n                icon=\"el-icon-delete\"\n                @click=\"handleClearList\">\n              清空列表\n            </el-button>\n          </el-button-group>\n        </div>\n\n        <div class=\"button-group\">\n          <el-button-group>\n            <el-button\n                :type=\"isCollecting ? 'danger' : 'primary'\"\n                icon=\"el-icon-connection\"\n                @click=\"handleCollectMode\">\n              {{ isCollecting ? '停止采集' : '采集模式' }}\n            </el-button>\n          </el-button-group>\n        </div>\n\n        <div class=\"button-group\">\n          <el-button-group>\n            <el-button\n                type=\"primary\"\n                icon=\"el-icon-link\"\n                @click=\"handleGenerateLink\">\n              生成链接\n            </el-button>\n            <el-button\n                type=\"success\"\n                icon=\"el-icon-upload\"\n                @click=\"syncDialogVisible = true\">\n              同步到GitHub\n            </el-button>\n          </el-button-group>\n        </div>\n\n        <div class=\"button-group\">\n          <el-button-group>\n            <el-button\n                :type=\"isScheduled ? 'danger' : 'primary'\"\n                icon=\"el-icon-timer\"\n                @click=\"handleScheduleCheck\">\n              {{ isScheduled ? '停止定时' : '定时检测' }}\n            </el-button>\n          </el-button-group>\n        </div>\n\n        <div class=\"button-group\">\n          <el-button-group>\n            <el-button\n                :type=\"filteredList.length > 0 ? 'danger' : 'primary'\"\n                icon=\"el-icon-search\"\n                @click=\"filteredList.length > 0 ? resetSearch() : searchDialogVisible = true\">\n              {{ filteredList.length > 0 ? '重置' : '搜索' }}\n            </el-button>\n          </el-button-group>\n        </div>\n      </div>\n\n      <!-- 隐藏的文件输入框 -->\n      <input\n          type=\"file\"\n          ref=\"fileInput\"\n          style=\"display: none\"\n          accept=\".txt,.m3u,.m3u8\"\n          @change=\"handleFileUpload\"\n      >\n    </div>\n\n    <div class=\"el-table-wrapper\">\n      <el-table\n          :data=\"paginatedData\"\n          border\n          style=\"width: 100%\">\n        <el-table-column\n            prop=\"name\"\n            label=\"名称\"\n            min-width=\"120\"\n            align=\"center\">\n        </el-table-column>\n\n        <el-table-column\n            prop=\"url\"\n            label=\"链接\"\n            min-width=\"200\"\n            align=\"center\"\n            show-overflow-tooltip>\n        </el-table-column>\n\n        <el-table-column\n            prop=\"resolution\"\n            label=\"分辨率\"\n            width=\"120\"\n            align=\"center\">\n          <template slot-scope=\"scope\">\n            <el-tag\n                :type=\"getResolutionTagType(scope.row.resolution)\">\n              {{ scope.row.resolution || '未知' }}\n            </el-tag>\n          </template>\n        </el-table-column>\n\n        <el-table-column\n            prop=\"responseTime\"\n            label=\"响应速度\"\n            width=\"120\"\n            align=\"center\">\n          <template slot-scope=\"scope\">\n            <el-tag\n                :type=\"getResponseTimeTagType(scope.row.responseTime)\">\n              {{ scope.row.responseTime === '-' ? '-' : scope.row.responseTime + 'ms' }}\n            </el-tag>\n          </template>\n        </el-table-column>\n\n        <el-table-column\n            prop=\"group\"\n            label=\"分组\"\n            width=\"120\"\n            align=\"center\">\n          <template slot-scope=\"scope\">\n            <el-tag\n                type=\"info\">\n              {{ scope.row.group }}\n            </el-tag>\n          </template>\n        </el-table-column>\n\n        <el-table-column\n            prop=\"status\"\n            label=\"状态\"\n            width=\"100\"\n            align=\"center\">\n          <template slot-scope=\"scope\">\n            <el-tag :type=\"getStatusTagType(scope.row.status)\">\n              {{ scope.row.status }}\n            </el-tag>\n          </template>\n        </el-table-column>\n\n        <el-table-column\n            label=\"操作\"\n            width=\"120\"\n            align=\"center\"\n            fixed=\"right\">\n          <template slot-scope=\"scope\">\n            <el-tooltip content=\"复制链接\" placement=\"top\">\n              <el-button\n                  type=\"text\"\n                  icon=\"el-icon-document-copy\"\n                  @click=\"handleCopy(scope.row)\">\n              </el-button>\n            </el-tooltip>\n            <el-tooltip content=\"删除\" placement=\"top\">\n              <el-button\n                  type=\"text\"\n                  class=\"delete-btn\"\n                  icon=\"el-icon-delete\"\n                  @click=\"handleDelete(scope.row)\">\n              </el-button>\n            </el-tooltip>\n          </template>\n        </el-table-column>\n      </el-table>\n    </div>\n\n    <!-- 添加分页组件 -->\n    <div class=\"pagination-container\">\n      <el-pagination\n          @size-change=\"handleSizeChange\"\n          @current-change=\"handleCurrentChange\"\n          :current-page=\"currentPage\"\n          :page-sizes=\"[5, 10, 20, 50]\"\n          :page-size=\"pageSize\"\n          layout=\"total, sizes, prev, pager, next, jumper\"\n          :total=\"filteredList.length || streamList.length\">\n      </el-pagination>\n    </div>\n\n    <!-- 添加/编辑对话框 -->\n    <el-dialog\n        title=\"导入网络文件\"\n        :visible.sync=\"importUrlDialogVisible\"\n        width=\"500px\">\n      <el-form :model=\"importForm\" label-width=\"80px\" ref=\"importForm\" :rules=\"importRules\">\n        <el-form-item label=\"URL地址\" prop=\"url\">\n          <el-input\n              v-model=\"importForm.url\"\n              placeholder=\"请输入txt或m3u文件的网络地址\"\n          ></el-input>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\">\n        <el-button @click=\"importUrlDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"handleUrlImport\">导 入</el-button>\n      </div>\n    </el-dialog>\n\n    <!-- 采集模式设置对话框 -->\n    <el-dialog\n        title=\"采集模式设置\"\n        :visible.sync=\"collectDialogVisible\"\n        width=\"500px\">\n      <el-form :model=\"collectForm\" label-width=\"100px\" ref=\"collectForm\" :rules=\"collectRules\">\n        <!-- 采集地址列表 -->\n        <el-form-item\n            v-for=\"(url, index) in collectForm.urls\"\n            :key=\"index\"\n            :label=\"index === 0 ? '采集地址' : ''\"\n            :prop=\"'urls.' + index\">\n          <el-input\n              v-model=\"collectForm.urls[index]\"\n              placeholder=\"请输入需要采集的网络地址\">\n            <template slot=\"append\">\n              <el-button\n                  icon=\"el-icon-delete\"\n                  @click=\"removeCollectUrl(index)\"\n                  v-if=\"collectForm.urls.length > 1\">\n              </el-button>\n            </template>\n          </el-input>\n        </el-form-item>\n\n        <!-- 添加地址按钮 -->\n        <el-form-item>\n          <el-button\n              type=\"text\"\n              icon=\"el-icon-plus\"\n              @click=\"addCollectUrl\">\n            添加采集地址\n          </el-button>\n        </el-form-item>\n\n        <el-form-item label=\"自动采集\">\n          <el-switch v-model=\"collectForm.autoCollect\"></el-switch>\n        </el-form-item>\n\n        <!-- 采集时间设置 -->\n        <template v-if=\"collectForm.autoCollect\">\n          <el-form-item label=\"采集周期\" prop=\"collectType\">\n            <el-radio-group v-model=\"collectForm.collectType\">\n              <el-radio label=\"daily\">每天</el-radio>\n              <el-radio label=\"weekly\">每周</el-radio>\n            </el-radio-group>\n          </el-form-item>\n\n          <el-form-item label=\"执行时间\" prop=\"executeTime\">\n            <el-time-picker\n                v-model=\"collectForm.executeTime\"\n                format=\"HH:mm\"\n                value-format=\"HH:mm\"\n                placeholder=\"选择时间\">\n            </el-time-picker>\n          </el-form-item>\n\n          <el-form-item\n              label=\"执行日期\"\n              prop=\"weekDay\"\n              v-if=\"collectForm.collectType === 'weekly'\">\n            <el-select v-model=\"collectForm.weekDay\">\n              <el-option label=\"星期一\" value=\"1\"></el-option>\n              <el-option label=\"星期二\" value=\"2\"></el-option>\n              <el-option label=\"星期三\" value=\"3\"></el-option>\n              <el-option label=\"星期四\" value=\"4\"></el-option>\n              <el-option label=\"星期五\" value=\"5\"></el-option>\n              <el-option label=\"星期六\" value=\"6\"></el-option>\n              <el-option label=\"星期日\" value=\"0\"></el-option>\n            </el-select>\n          </el-form-item>\n        </template>\n      </el-form>\n      <div slot=\"footer\">\n        <el-button @click=\"collectDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"startCollecting\">开始采集</el-button>\n      </div>\n    </el-dialog>\n\n    <!-- 生成链接对话框 -->\n    <el-dialog\n        title=\"生成链接\"\n        :visible.sync=\"generateLinkDialogVisible\"\n        width=\"500px\"\n        custom-class=\"generate-link-dialog\">\n      <div class=\"link-container\">\n        <!-- 添加格式选择 -->\n        <el-form :model=\"linkForm\" label-width=\"80px\">\n          <el-form-item label=\"文件格式\">\n            <el-radio-group v-model=\"linkForm.format\">\n              <el-radio label=\"txt\">TXT格式</el-radio>\n              <el-radio label=\"m3u\">M3U格式</el-radio>\n            </el-radio-group>\n          </el-form-item>\n        </el-form>\n\n        <!-- 链接展示卡片 -->\n        <el-card class=\"link-card\">\n          <div class=\"link-content\">\n            <el-input\n                v-model=\"generatedLink\"\n                placeholder=\"正在生成链接...\"\n                readonly>\n              <template slot=\"prepend\">链接地址</template>\n              <el-button\n                  slot=\"append\"\n                  icon=\"el-icon-document-copy\"\n                  @click=\"copyGeneratedLink\">\n                复制\n              </el-button>\n            </el-input>\n          </div>\n        </el-card>\n\n        <!-- 使用说明 -->\n        <el-card class=\"tips-card\">\n          <div class=\"tips-content\">\n            <ul>\n              <li>生成的链接可以直接在支持网络导入的播放器中使用</li>\n              <li>链接内容会随列表更新而自动更新</li>\n              <li>TXT格式适用于大多数播放器</li>\n              <li>M3U格式提供更好的播放器兼容性</li>\n            </ul>\n          </div>\n        </el-card>\n      </div>\n    </el-dialog>\n\n    <!-- 添加定时检测设置对话框 -->\n    <el-dialog\n        title=\"定时检测设置\"\n        :visible.sync=\"scheduleDialogVisible\"\n        width=\"500px\">\n      <el-form :model=\"scheduleForm\" label-width=\"100px\" ref=\"scheduleForm\" :rules=\"scheduleRules\">\n        <el-form-item label=\"检测周期\" prop=\"scheduleType\">\n          <el-radio-group v-model=\"scheduleForm.scheduleType\">\n            <el-radio label=\"daily\">每天</el-radio>\n            <el-radio label=\"weekly\">每周</el-radio>\n          </el-radio-group>\n        </el-form-item>\n\n        <el-form-item label=\"执行时间\" prop=\"executeTime\">\n          <el-time-picker\n              v-model=\"scheduleForm.executeTime\"\n              format=\"HH:mm\"\n              value-format=\"HH:mm\"\n              placeholder=\"选择时间\">\n          </el-time-picker>\n        </el-form-item>\n\n        <el-form-item\n            label=\"执行日期\"\n            prop=\"weekDay\"\n            v-if=\"scheduleForm.scheduleType === 'weekly'\">\n          <el-select v-model=\"scheduleForm.weekDay\">\n            <el-option label=\"星期一\" value=\"1\"></el-option>\n            <el-option label=\"星期二\" value=\"2\"></el-option>\n            <el-option label=\"星期三\" value=\"3\"></el-option>\n            <el-option label=\"星期四\" value=\"4\"></el-option>\n            <el-option label=\"星期五\" value=\"5\"></el-option>\n            <el-option label=\"星期六\" value=\"6\"></el-option>\n            <el-option label=\"星期日\" value=\"0\"></el-option>\n          </el-select>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\">\n        <el-button @click=\"scheduleDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"startScheduleCheck\">开始定时</el-button>\n      </div>\n    </el-dialog>\n\n    <!-- 添加搜索对话框 -->\n    <el-dialog\n        title=\"搜索直播源\"\n        :visible.sync=\"searchDialogVisible\"\n        width=\"500px\">\n      <el-form :model=\"searchForm\" label-width=\"80px\">\n        <el-form-item label=\"名称\">\n          <el-input\n              v-model=\"searchForm.name\"\n              placeholder=\"支持模糊搜索\"\n              clearable>\n          </el-input>\n        </el-form-item>\n        <el-form-item label=\"分组\">\n          <el-select\n              v-model=\"searchForm.group\"\n              placeholder=\"请选择\"\n              clearable>\n            <el-option\n                v-for=\"group in groupOptions\"\n                :key=\"group\"\n                :label=\"group\"\n                :value=\"group\">\n            </el-option>\n          </el-select>\n        </el-form-item>\n        <el-form-item label=\"状态\">\n          <el-select\n              v-model=\"searchForm.status\"\n              placeholder=\"请选择\"\n              clearable>\n            <el-option label=\"正常\" value=\"正常\"></el-option>\n            <el-option label=\"异常\" value=\"异常\"></el-option>\n            <el-option label=\"未检测\" value=\"未检测\"></el-option>\n          </el-select>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\">\n        <el-button @click=\"searchDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"handleSearch\">搜 索</el-button>\n      </div>\n    </el-dialog>\n\n    <!-- GitHub同步设置对话框 -->\n    <el-dialog\n        title=\"GitHub同步设置\"\n        :visible.sync=\"syncDialogVisible\"\n        width=\"500px\">\n      <el-form :model=\"syncForm\" ref=\"syncForm\" label-width=\"120px\" :rules=\"syncRules\">\n        <el-form-item label=\"GitHub Token\" prop=\"token\">\n          <el-input\n              v-model=\"syncForm.token\"\n              type=\"password\"\n              placeholder=\"请输入GitHub Personal Access Token\"\n              show-password>\n          </el-input>\n        </el-form-item>\n        \n        <el-form-item label=\"仓库名称\" prop=\"repo\">\n          <el-input\n              v-model=\"syncForm.repo\"\n              placeholder=\"格式：用户名/仓库名\">\n          </el-input>\n        </el-form-item>\n        \n        <el-form-item label=\"TXT文件名\" prop=\"txtPath\">\n          <el-input\n              v-model=\"syncForm.txtPath\"\n              placeholder=\"例如：playlist.txt\">\n          </el-input>\n        </el-form-item>\n        \n        <el-form-item label=\"M3U文件名\" prop=\"m3uPath\">\n          <el-input\n              v-model=\"syncForm.m3uPath\"\n              placeholder=\"例如：playlist.m3u\">\n          </el-input>\n        </el-form-item>\n        \n        <el-form-item label=\"定时同步\">\n          <el-switch\n              v-model=\"syncForm.autoSync\"\n              @change=\"handleAutoSyncChange\">\n          </el-switch>\n        </el-form-item>\n        \n        <template v-if=\"syncForm.autoSync\">\n          <el-form-item label=\"同步周期\" prop=\"syncType\">\n            <el-radio-group v-model=\"syncForm.syncType\">\n              <el-radio label=\"daily\">每天</el-radio>\n              <el-radio label=\"weekly\">每周</el-radio>\n              <el-radio label=\"afterCheck\">批量检测完毕后</el-radio>\n            </el-radio-group>\n          </el-form-item>\n\n          <el-form-item\n              label=\"执行时间\"\n              prop=\"executeTime\"\n              v-if=\"syncForm.syncType !== 'afterCheck'\">\n            <el-time-picker\n                v-model=\"syncForm.executeTime\"\n                format=\"HH:mm\"\n                value-format=\"HH:mm\"\n                placeholder=\"选择时间\">\n            </el-time-picker>\n          </el-form-item>\n\n          <el-form-item\n              label=\"执行日期\"\n              prop=\"weekDay\"\n              v-if=\"syncForm.syncType === 'weekly'\">\n            <el-select v-model=\"syncForm.weekDay\">\n              <el-option label=\"星期一\" value=\"1\"></el-option>\n              <el-option label=\"星期二\" value=\"2\"></el-option>\n              <el-option label=\"星期三\" value=\"3\"></el-option>\n              <el-option label=\"星期四\" value=\"4\"></el-option>\n              <el-option label=\"星期五\" value=\"5\"></el-option>\n              <el-option label=\"星期六\" value=\"6\"></el-option>\n              <el-option label=\"星期日\" value=\"0\"></el-option>\n            </el-select>\n          </el-form-item>\n        </template>\n        \n        <el-form-item label=\"提交信息\" prop=\"message\">\n          <el-input\n              v-model=\"syncForm.message\"\n              placeholder=\"更新说明\">\n          </el-input>\n        </el-form-item>\n      </el-form>\n      \n      <div slot=\"footer\">\n        <el-button @click=\"syncDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"saveGithubSettings\">保 存</el-button>\n      </div>\n    </el-dialog>\n  </div>\n\n</template>\n\n<script>\nexport default {\n  name: 'StreamCheck',\n  data() {\n    return {\n      loading: false,\n      streamList: [],\n      importUrlDialogVisible: false,\n      importForm: {\n        url: '',\n        group: ''\n      },\n      importRules: {\n        url: [\n          { required: true, message: '请输入URL地址', trigger: 'blur' },\n          { type: 'url', message: '请输入正确的URL地址', trigger: ['blur', 'change'] }\n        ],\n        group: [\n          { required: true, message: '请选择分组', trigger: 'change' }\n        ]\n      },\n      currentPage: 1,\n      pageSize: 5,\n      isChecking: false,\n      isPaused: false,\n      checkedCount: 0,\n      totalCount: 0,\n      pausedIndex: -1,\n      shouldStop: false,\n      isCollecting: false,\n      collectDialogVisible: false,\n      collectForm: {\n        urls: [''],\n        autoCollect: false,\n        collectType: 'daily',\n        executeTime: '09:00',\n        weekDay: '1'\n      },\n      collectRules: {\n        urls: [\n          { \n            type: 'array',\n            validator: (rule, value, callback) => {\n              if (value.length === 0) {\n                callback(new Error('请至少添加一个采集地址'))\n              }\n              // 验证每个URL\n              const errors = value.map(url => {\n                if (!url) return '采集地址不能为空'\n                if (!/^https?:\\/\\/.+/.test(url)) return '请输入正确的URL地址'\n                return null\n              }).filter(error => error !== null)\n              \n              if (errors.length > 0) {\n                callback(new Error(errors[0]))\n              } else {\n                callback()\n              }\n            },\n            trigger: 'change'\n          }\n        ],\n        executeTime: [\n          { required: true, message: '请选择执行时间', trigger: 'change' }\n        ],\n        weekDay: [\n          { required: true, message: '请选择执行日期', trigger: 'change' }\n        ]\n      },\n      collectTimer: null,\n      generateLinkDialogVisible: false,\n      generatedLink: '',\n      previewContent: '',  // 新增预览内容\n      currentLinkId: '',\n      scheduleDialogVisible: false,\n      isScheduled: false,\n      scheduleForm: {\n        scheduleType: 'daily',\n        executeTime: '09:00',\n        weekDay: '1'\n      },\n      scheduleRules: {\n        executeTime: [\n          { required: true, message: '请选择执行时间', trigger: 'change' }\n        ],\n        weekDay: [\n          { required: true, message: '请选择执行日期', trigger: 'change' }\n        ]\n      },\n      scheduleTimer: null,\n      nextScheduleTime: null,\n      stateKey: 'streamCheckState', // 用于本地存储的key\n      hasActiveOperations: false,  // 添加标记表示是否有动作在执行\n      linkForm: {\n        format: 'txt' // 默认txt格式\n      },\n      searchDialogVisible: false,\n      searchForm: {\n        name: '',\n        group: '',\n        status: ''\n      },\n      filteredList: [], // 用于存储搜索过滤后的列表\n      realIp: '',  // 存储真实IP地址\n      syncDialogVisible: false,\n      syncForm: {\n        token: localStorage.getItem('githubToken') || '',\n        repo: localStorage.getItem('githubRepo') || '',\n        txtPath: localStorage.getItem('githubTxtPath') || '',\n        m3uPath: localStorage.getItem('githubM3uPath') || '',\n        autoSync: localStorage.getItem('githubAutoSync') === 'true',\n        syncType: localStorage.getItem('githubSyncType') || 'daily',\n        executeTime: localStorage.getItem('githubExecuteTime') || '00:00',\n        weekDay: localStorage.getItem('githubWeekDay') || '1',\n        message: '更新直播源列表'\n      },\n      syncRules: {\n        token: [\n          { required: true, message: '请输入GitHub Token', trigger: 'blur' }\n        ],\n        repo: [\n          { required: true, message: '请输入仓库名称', trigger: 'blur' },\n          { pattern: /^[\\w-]+\\/[\\w-]+$/, message: '格式：用户名/仓库名', trigger: 'blur' }\n        ],\n        txtPath: [\n          { required: true, message: '请输入文件路径', trigger: 'blur' }\n        ],\n        m3uPath: [\n          { required: true, message: '请输入文件路径', trigger: 'blur' }\n        ],\n        message: [\n          { required: true, message: '请输入提交消息', trigger: 'blur' }\n        ]\n      },\n      syncTimer: null,\n      messages: [], // 用于存储消息\n      messageId: 0, // 用于生成唯一的消息ID\n    }\n  },\n  computed: {\n    paginatedData() {\n      // 使用过滤后的列表进行分页\n      const start = (this.currentPage - 1) * this.pageSize\n      const end = start + this.pageSize\n      return (this.filteredList.length > 0 ? this.filteredList : this.streamList).slice(start, end)\n    },\n    checkButtonText() {\n      if (!this.isChecking && !this.isPaused) {\n        return '批量检测'\n      }\n      return `检测中 ${this.checkedCount}/${this.totalCount}`\n    },\n    mergedStreams() {\n      // 创建一个Map来存储合并后的直播源\n      const streamMap = new Map()\n      \n      // 按照当前列表顺序处理每个直播源\n      this.streamList.forEach(stream => {\n        const key = stream.name // 使用名称作为键\n        \n        if (streamMap.has(key)) {\n          // 如果已存在相同名称的直播源，添加到URLs数组\n          const existing = streamMap.get(key)\n          if (!existing.urls.includes(stream.url)) {\n            existing.urls.push(stream.url)\n          }\n        } else {\n          // 如果是新的名称，创建新条目\n          streamMap.set(key, {\n            name: stream.name,\n            urls: [stream.url],\n            group: stream.group\n          })\n        }\n      })\n      \n      // 转换回数组格式\n      return Array.from(streamMap.values())\n    },\n    groupOptions() {\n      return [...new Set(this.streamList.map(item => item.group))]\n    }\n  },\n  created() {\n    // 初始化时加载持久化的数据\n    if (localStorage.getItem('persistentData') === 'true') {\n      const savedList = localStorage.getItem('streamList')\n      if (savedList) {\n        this.streamList = JSON.parse(savedList)\n        // 初始化时检查多播源\n        this.$nextTick(() => {\n          this.checkMulticastStreams() // 使用新方法\n        })\n      }\n    }\n    \n    // 监听保存事件\n    this.$root.$on('save-stream-list', this.saveStreamList)\n    \n    // 监听设置更新事件\n    this.$root.$on('settings-updated', this.handleSettingsUpdate)\n\n    // 从本地存储恢复状态\n    this.restoreState()\n    \n    // 如果定时检测是开启状态，重新启动定时器\n    if (this.isScheduled) {\n      this.setupSchedule()\n    }\n    // 如果采集是开启状态，重新启动采集\n    if (this.isCollecting) {\n      this.startCollecting(true) // true表示是恢复状态\n    }\n    // 如果GitHub自动同步是开启状态，重新启动同步定时器\n    if (this.syncForm.autoSync) {\n      this.setupSyncSchedule()\n    }\n\n    this.filteredList = []\n    this.getRealIp()  // 获取真实IP地址\n  },\n  beforeDestroy() {\n    // 移除事件监听\n    this.$root.$off('save-stream-list', this.saveStreamList)\n    this.$root.$off('settings-updated', this.handleSettingsUpdate)\n    // 组件销毁前清除定时器\n    if (this.collectTimer) {\n      clearInterval(this.collectTimer)\n    }\n    // 组件销毁时清理定时器\n    this.stopScheduleCheck()\n    // 在组件销毁前保存状态\n    this.saveState()\n    window.removeEventListener('beforeunload', this.handleBeforeUnload)\n  },\n  methods: {\n    // 添加处理设置更新的方法\n    handleSettingsUpdate(event) {\n      console.log('收到设置更新事件:', event)\n      if (event && event.type === 'settings-changed' && event.settings) {\n        console.log('设置已更新，当前设置:', event.settings)\n        // 重新检查所有多播源\n        this.$nextTick(() => {\n          this.checkMulticastStreams()\n        })\n      }\n    },\n\n    // 添加多播源检测的辅助方法\n    isMulticastStream(url) {\n      if (!url) return false\n      \n      // 更完整的多播源检测正则表达式\n      const patterns = [\n        // 标准格式\n        /[/](udp|rtp)[/]239\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /[/](udp|rtp)[/]225\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /[/](udp|rtp)[/]224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        // 带@的格式\n        /^(udp|rtp):\\/\\/@239\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /^(udp|rtp):\\/\\/@225\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /^(udp|rtp):\\/\\/@224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        // 不带@的格式\n        /^(udp|rtp):\\/\\/239\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /^(udp|rtp):\\/\\/225\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /^(udp|rtp):\\/\\/224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        // IPv6格式\n        /^(udp|rtp):\\/\\/\\[239\\.\\d+\\.\\d+\\.\\d+\\]:\\d+/i,\n        /^(udp|rtp):\\/\\/\\[225\\.\\d+\\.\\d+\\.\\d+\\]:\\d+/i,\n        /^(udp|rtp):\\/\\/\\[224\\.\\d+\\.\\d+\\.\\d+\\]:\\d+/i,\n        // 其他常见格式\n        /^(udp|rtp):\\/\\/@?239\\.\\d+\\.\\d+\\.\\d+[/]\\d+/i,\n        /^(udp|rtp):\\/\\/@?225\\.\\d+\\.\\d+\\.\\d+[/]\\d+/i,\n        /^(udp|rtp):\\/\\/@?224\\.\\d+\\.\\d+\\.\\d+[/]\\d+/i,\n        // 简单格式\n        /^udp\\/@?239\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /^rtp\\/@?239\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /^udp\\/@?225\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /^rtp\\/@?225\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /^udp\\/@?224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /^rtp\\/@?224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        // 带端口的格式\n        /^(udp|rtp):\\/\\/@?239\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /^(udp|rtp):\\/\\/@?225\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /^(udp|rtp):\\/\\/@?224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        // 特殊格式\n        /^(udp|rtp)[/](239|225|224)\\.\\d+\\.\\d+\\.\\d+[/]?(\\d+)?/i,\n        /^(udp|rtp):\\/\\/(239|225|224)\\.\\d+\\.\\d+\\.\\d+[/]?(\\d+)?/i,\n        // HTTP代理的UDP/RTP多播源格式\n        /http:\\/\\/[^/]+[/](udp|rtp)[/]224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /http:\\/\\/[^/]+[/](udp|rtp)[/]225\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /http:\\/\\/[^/]+[/](udp|rtp)[/]239\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        // HTTPS代理的UDP/RTP多播源格式\n        /https:\\/\\/[^/]+[/](udp|rtp)[/]224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /https:\\/\\/[^/]+[/](udp|rtp)[/]225\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /https:\\/\\/[^/]+[/](udp|rtp)[/]239\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        // 任何包含 udp 或 rtp 的链接\n        /^(udp|rtp):\\/\\//i,\n        /\\/(udp|rtp)\\//i,\n        /^(udp|rtp)@/i\n      ]\n      \n      // 先转换为小写进行检查\n      const lowerUrl = url.toLowerCase()\n      const isMulticast = patterns.some(pattern => pattern.test(lowerUrl))\n      if (isMulticast) {\n        console.log('检测到多播源:', url)\n      }\n      return isMulticast\n    },\n\n    // 检查多播源的方法\n    checkMulticastStreams() {\n      try {\n        const appSettings = localStorage.getItem('appSettings')\n        if (!appSettings) {\n          console.log('未找到设置配置')\n          return\n        }\n\n        let settings\n        try {\n          settings = JSON.parse(appSettings)\n        } catch (e) {\n          console.error('解析设置失败:', e)\n          return\n        }\n\n        // 如果启用了自动清除多播源\n        if (settings.autoRemoveMulticast === true) {\n          console.log('开始检查多播源...')\n          let removedCount = 0\n          const toRemove = []\n\n          // 检查所有流\n          this.streamList.forEach((stream, index) => {\n            if (this.isMulticastStream(stream.url)) {\n              toRemove.push(index)\n              removedCount++\n              console.log('发现多播源:', stream.url)\n            }\n          })\n\n          // 从后向前删除\n          for (let i = toRemove.length - 1; i >= 0; i--) {\n            const index = toRemove[i]\n            const stream = this.streamList[index]\n            console.log('正在删除多播源:', stream.name, stream.url)\n            this.streamList.splice(index, 1)\n          }\n\n          if (removedCount > 0) {\n            console.log(`成功清除 ${removedCount} 个多播源`)\n            this.$message.warning(`已自动清除 ${removedCount} 个多播源`)\n            this.saveStreamList()\n\n            // 如果当前页没有数据，跳转到上一页\n            if (this.paginatedData.length === 0 && this.currentPage > 1) {\n              this.currentPage--\n            }\n          }\n        }\n      } catch (error) {\n        console.error('检查多播源失败:', error)\n      }\n    },\n\n    async checkStream(stream) {\n      // 优先从 appSettings 中读取 FFprobe 路径\n      let ffprobePath = ''\n      try {\n        const appSettings = localStorage.getItem('appSettings')\n        if (appSettings) {\n          const settings = JSON.parse(appSettings)\n          ffprobePath = settings.ffprobePath\n        }\n      } catch (error) {\n        console.error('读取 appSettings 失败:', error)\n      }\n\n      // 如果 appSettings 中没有，则从独立设置中读取\n      if (!ffprobePath) {\n        ffprobePath = localStorage.getItem('ffprobePath')\n      }\n\n      if (!ffprobePath) {\n        console.error('未找到 FFprobe 路径配置')\n        this.$message.error('请先在系统设置中配置FFprobe路径')\n        return false\n      }\n\n      // 检查是否是多播源\n      if (this.isMulticastStream(stream.url)) {\n        // 直接返回false，不再设置状态\n        return false\n      }\n\n      try {\n        const response = await fetch(`${this.getBaseUrl()}/api/check-stream`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            url: stream.url,\n            ffprobePath: ffprobePath\n          })\n        })\n\n        if (!response.ok) throw new Error('请求失败')\n        \n        const result = await response.json()\n        \n        // 更新流信息\n        stream.status = result.available ? '正常' : '异常'\n        stream.resolution = result.resolution || '-'\n        stream.responseTime = result.responseTime || '-'\n\n        // 检查是否需要自动清除\n        if (!result.available || this.shouldRemoveStream(stream)) {\n          let reason = ''\n          if (!result.available || stream.status === '异常') {\n            reason = '异常源'\n          } else if (stream.responseTime > 3000) {\n            reason = '响应时间过慢'\n          } else {\n            reason = '分辨率过低'\n          }\n\n          // 找到当前页的所有项\n          const currentPageItems = this.paginatedData\n          // 找到要删除项在当前页的索引\n          const pageIndex = currentPageItems.indexOf(stream)\n          // 找到要删除项在整个列表中的索引\n          const listIndex = this.streamList.indexOf(stream)\n          \n          if (listIndex > -1) {\n            this.streamList.splice(listIndex, 1)\n            // 如果删除的是当前页的最后一项，且不是第一页，则跳转到上一页\n            if (pageIndex === currentPageItems.length - 1 && this.currentPage > 1) {\n              this.currentPage--\n            }\n            // 添加删除原因提示\n            console.log(`清除直播源: ${stream.name}, 原因: ${reason}`)\n            this.$message.warning(`已自动清除直播源：${reason}`)\n          }\n        }\n        \n        this.saveStreamList()\n        return result.available\n      } catch (error) {\n        console.error('检测错误:', error)\n        stream.status = '异常'\n        \n        // 如果设置了自动清除异常源，在这里也进行清除\n        if (this.shouldRemoveStream(stream)) {\n          const currentPageItems = this.paginatedData\n          const pageIndex = currentPageItems.indexOf(stream)\n          const listIndex = this.streamList.indexOf(stream)\n          \n          if (listIndex > -1) {\n            this.streamList.splice(listIndex, 1)\n            if (pageIndex === currentPageItems.length - 1 && this.currentPage > 1) {\n              this.currentPage--\n            }\n            console.log(`清除异常直播源: ${stream.name}, 原因: 检测失败`)\n            this.$message.warning('已自动清除直播源：检测失败')\n          }\n        }\n        \n        this.saveStreamList()\n        return false\n      }\n    },\n\n    shouldRemoveStream(stream) {\n      try {\n        // 获取设置\n        const appSettings = localStorage.getItem('appSettings')\n        let settings = {}\n        if (appSettings) {\n          settings = JSON.parse(appSettings)\n        }\n\n        // 检查是否需要清除异常源\n        if (settings.autoRemoveInvalid === true && \n            (stream.status === '异常' || stream.status === '未知')) {\n          console.log(`应清除异常源: ${stream.name}, 状态: ${stream.status}`)\n          return true\n        }\n\n        // 获取模式设置\n        const extremeMode = settings.extremeMode === true\n        const strictMode = settings.strictMode === true\n\n        // 检查是否需要清除低分辨率源\n        if (settings.autoRemoveLowRes === true && \n            stream.resolution !== '未知' && \n            stream.resolution !== '多播源' && \n            stream.resolution !== '-') {\n          const [width, height] = stream.resolution.split('x').map(Number)\n          if (extremeMode ? (width < 1920 || height < 1080) : \n              (strictMode ? (width < 1920 || height < 1080) : (width < 1280 || height < 720))) {\n            console.log(`应清除低分辨率源: ${stream.name}, 分辨率: ${stream.resolution}`)\n            return true\n          }\n        }\n\n        // 检查响应时间\n        if (settings.autoRemoveSlowResponse === true && \n            stream.responseTime !== '-' &&\n            Number(stream.responseTime) > (extremeMode ? 1500 : (strictMode ? 2000 : 3000))) {\n          console.log(`应清除慢速源: ${stream.name}, 响应时间: ${stream.responseTime}ms`)\n          return true\n        }\n\n        return false\n      } catch (error) {\n        console.error('检查是否应该移除流时出错:', error)\n        return false\n      }\n    },\n\n    async handleBatchCheck() {\n      if (this.isChecking) return\n      \n      const uncheckedStreams = this.streamList.filter(s => !this.isPaused || this.streamList.indexOf(s) > this.pausedIndex)\n      if (uncheckedStreams.length === 0) {\n        this.showMessage('没有需要检测的直播源', 'info')\n        return\n      }\n\n      this.isChecking = true\n      this.shouldStop = false\n      this.totalCount = uncheckedStreams.length\n      this.checkedCount = this.isPaused ? this.checkedCount : 0\n      \n      // 显示检测进度消息\n      const progressMsgId = this.messageId++\n      this.messages.push({\n        id: progressMsgId,\n        content: `检测进度：${this.checkedCount}/${this.totalCount}`,\n        type: 'progress'\n      })\n\n      try {\n        // 获取并发检测数量设置\n        const concurrentChecks = parseInt(localStorage.getItem('concurrentChecks')) || 3\n        \n        // 从暂停的位置或开始位置继续检测\n        const startIndex = this.isPaused ? this.pausedIndex + 1 : 0\n        \n        // 分批处理，每批次处理固定数量的流\n        const batchSize = Math.min(concurrentChecks, 10) // 限制最大并发数\n        \n        for (let i = startIndex; i < uncheckedStreams.length; i += batchSize) {\n          if (this.shouldStop) break\n          \n          // 获取当前批次要检测的流\n          const batch = uncheckedStreams.slice(i, i + batchSize)\n          \n          // 并发检测当前批次的所有流\n          await Promise.all(\n            batch.map(async stream => {\n              if (this.shouldStop) return\n              \n              try {\n                stream.status = '检测中'\n                const success = await this.checkStream(stream)\n                this.checkedCount++\n                \n                if (success) {\n                  this.saveState()\n                }\n              } catch (error) {\n                console.error('检测流失败:', error)\n                stream.status = '异常'\n                this.checkedCount++\n              }\n            })\n          )\n          \n          // 更新暂停位置\n          this.pausedIndex = i + batchSize - 1\n          \n          // 每批次完成后保存状态\n          this.saveState()\n        }\n\n        if (!this.shouldStop) {\n          this.isChecking = false\n          this.isPaused = false\n          this.pausedIndex = -1\n          this.showMessage('批量检测完成', 'success')\n          this.removeMessage(progressMsgId)\n          \n          // 检查是否需要在批量检测完成后同步\n          if (this.syncForm.autoSync && this.syncForm.syncType === 'afterCheck') {\n            await this.syncToGithub(this.generateContent('txt'), this.syncForm.txtPath)\n            await this.syncToGithub(this.generateContent('m3u'), this.syncForm.m3uPath)\n            this.showMessage('已同步到GitHub', 'success')\n          }\n        }\n      } catch (error) {\n        console.error('批量检测错误:', error)\n        this.showMessage('批量检测失败', 'error')\n        this.removeMessage(progressMsgId)\n      } finally {\n        if (this.shouldStop) {\n          this.isChecking = false\n          this.isPaused = true\n          this.showMessage('检测已暂停', 'warning')\n          this.removeMessage(progressMsgId)\n        }\n      }\n    },\n\n    pauseCheck() {\n      this.shouldStop = true\n    },\n\n    async resumeCheck() {\n      if (this.pausedIndex >= 0) {\n        this.isChecking = true\n        this.isPaused = false\n        this.shouldStop = false\n        await this.batchCheck(this.pausedIndex)\n      }\n    },\n\n    async handleCheck(row) {\n      row.status = '检测中'\n      \n      const success = await this.checkStream(row)\n      this.$message[success ? 'success' : 'error'](`检测${success ? '成功' : '失败'}: ${row.name}`)\n    },\n    handleDelete(row) {\n      this.$confirm('确认删除该直播源?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        const index = this.streamList.indexOf(row)\n        this.streamList.splice(index, 1)\n        const maxPage = Math.ceil(this.streamList.length / this.pageSize)\n        if (this.currentPage > maxPage) {\n          this.currentPage = Math.max(maxPage, 1)\n        }\n        this.saveStreamList()  // 保存更新后的列表\n        this.$message.success('删除成功')\n      }).catch(() => {})\n    },\n    async handleUrlImport() {\n      const valid = await this.$refs.importForm.validate()\n      if (!valid) return\n\n      try {\n        const response = await fetch(`${this.getBaseUrl()}/api/import-url`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({ url: this.importForm.url })\n        })\n\n        if (!response.ok) throw new Error('导入失败')\n\n        const content = await response.text()\n        const newStreams = this.parseContent(content)\n\n        if (newStreams.length > 0) {\n          // 过滤重复的直播源\n          const existingUrls = new Set(this.streamList.map(s => s.url))\n          const uniqueStreams = newStreams.filter(s => !existingUrls.has(s.url))\n          \n          if (uniqueStreams.length > 0) {\n            this.streamList.push(...uniqueStreams)\n            this.$message.success(`成功导入 ${uniqueStreams.length} 个直播源`)\n            this.importUrlDialogVisible = false\n            \n            // 导入后立即检查多播源\n            this.$nextTick(() => {\n              this.checkMulticastStreams()\n            })\n          } else {\n            this.$message.info('没有新的直播源可以导入')\n          }\n        } else {\n          this.$message.warning('未找到有效的直播源')\n        }\n      } catch (error) {\n        this.$message.error('导入失败：' + error.message)\n      }\n    },\n    readFile(file) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader()\n        reader.onload = (e) => resolve(e.target.result)\n        reader.onerror = () => reject(new Error('文件读取失败'))\n        reader.readAsText(file)\n      })\n    },\n    parseContent(content) {\n      const lines = content.split('\\n')\n      const streams = []\n      let currentGroup = '未分组'\n\n      // 检测是否是 m3u 格式\n      if (content.includes('#EXTM3U')) {\n        let currentName = ''\n        let currentGroupTitle = ''\n\n        lines.forEach(line => {\n          line = line.trim()\n          if (!line) return\n\n          if (line.startsWith('#EXTINF:')) {\n            // 尝试不同的名称提取方式\n            let name = ''\n            \n            // 1. 尝试提取 tvg-name 属性\n            const tvgNameMatch = line.match(/tvg-name=\"([^\"]+)\"/i)\n            if (tvgNameMatch) {\n              name = tvgNameMatch[1].trim()\n            }\n            \n            // 2. 如果没有 tvg-name，尝试提取最后的逗号后的名称\n            if (!name) {\n              const lastCommaIndex = line.lastIndexOf(',')\n              if (lastCommaIndex !== -1) {\n                name = line.substring(lastCommaIndex + 1).trim()\n              }\n            }\n            \n            // 3. 如果还是没有名称，尝试提取 tvg-id\n            if (!name) {\n              const tvgIdMatch = line.match(/tvg-id=\"([^\"]+)\"/i)\n              if (tvgIdMatch) {\n                name = tvgIdMatch[1].trim()\n              } else {\n                // 3.1 尝试提取不带引号的 tvg-id\n                const tvgIdNoQuoteMatch = line.match(/tvg-id=([^,\\s]+)/i)\n                if (tvgIdNoQuoteMatch) {\n                  name = tvgIdNoQuoteMatch[1].trim()\n                }\n              }\n            }\n\n            currentName = name || '未命名'\n            \n            // 提取分组信息\n            // 1. 先尝试带引号的 group-title\n            const groupMatch = line.match(/group-title=\"([^\"]+)\"/i)\n            if (groupMatch) {\n              currentGroupTitle = groupMatch[1].trim()\n            } else {\n              // 2. 尝试不带引号的 group-title\n              const groupNoQuoteMatch = line.match(/group-title=([^,\\s]+)/i)\n              if (groupNoQuoteMatch) {\n                currentGroupTitle = groupNoQuoteMatch[1].trim()\n              }\n            }\n          } else if (!line.startsWith('#') && line.trim()) {\n            // 这是一个媒体URL行\n            const url = line.trim()\n            // 在添加流之前先检查是否是多播源\n            if (currentName && !this.isMulticastStream(url)) {\n              streams.push({\n                name: currentName,\n                url: url,\n                group: currentGroupTitle || currentGroup,\n                status: '未检测',\n                resolution: '-',\n                responseTime: '-'\n              })\n            } else {\n              console.log('跳过多播源:', url)\n            }\n            currentName = ''  // 重置当前名称\n          }\n        })\n      } else {\n        // txt 格式处理\n        lines.forEach(line => {\n          line = line.trim()\n          if (!line) return\n\n          // 检查是否是分组标记\n          if (line.endsWith(',#genre#')) {\n            currentGroup = line.replace(',#genre#', '')\n            return\n          }\n\n          // 解析直播源行\n          const [name, urls] = line.split(',')\n          if (!name || !urls) return\n\n          // 检查是否包含多个URL（用#分隔）\n          const urlList = urls.split('#')\n          \n          // 为每个URL创建一个新的直播源条目，但排除多播源\n          urlList.forEach(url => {\n            url = url.trim()\n            if (url && !this.isMulticastStream(url)) {\n              streams.push({\n                name: name,\n                url: url,\n                group: currentGroup,\n                status: '未检测',\n                resolution: '-',\n                responseTime: '-'\n              })\n            } else if (url) {\n              console.log('跳过多播源:', url)\n            }\n          })\n        })\n      }\n\n      console.log(`解析完成: 共发现 ${streams.length} 个有效直播源`)\n      return streams\n    },\n    addStreamsToList(streams) {\n      streams.forEach(stream => {\n        this.streamList.push(stream)\n      })\n      this.currentPage = 1\n      this.saveStreamList()  // 保存更新后的列表\n    },\n    handleSizeChange(val) {\n      this.pageSize = val\n      // 当每页条数改变时，重置当前页为第一页\n      this.currentPage = 1\n    },\n    handleCurrentChange(val) {\n      this.currentPage = val\n    },\n    async handleFileUpload(event) {\n      const file = event.target.files[0]\n      if (!file) return\n\n      try {\n        const content = await this.readFile(file)\n        const newStreams = this.parseContent(content)\n        \n        if (newStreams.length > 0) {\n          // 过滤重复的直播源\n          const existingUrls = new Set(this.streamList.map(s => s.url))\n          const uniqueStreams = newStreams.filter(s => !existingUrls.has(s.url))\n          \n          if (uniqueStreams.length > 0) {\n            this.streamList.push(...uniqueStreams)\n            this.$message.success(`成功导入 ${uniqueStreams.length} 个直播源`)\n            \n            // 导入后立即检查多播源\n            this.$nextTick(() => {\n              this.checkMulticastStreams()\n            })\n          } else {\n            this.$message.info('没有新的直播源可以导入')\n          }\n        } else {\n          this.$message.warning('未找到有效的直播源')\n        }\n      } catch (error) {\n        this.$message.error('文件读取失败：' + error.message)\n      } finally {\n        // 清除文件输入，允许重复选择同一文件\n        event.target.value = ''\n      }\n    },\n    getGroupFromFileName(filename) {\n      // 从文件名中提取可能的分组名\n      const name = filename.toLowerCase()\n      if (name.includes('cctv')) return 'CCTV'\n      if (name.includes('卫视')) return '卫视'\n      if (name.includes('地方')) return '地方台'\n      return '未分组'\n    },\n    handleClearList() {\n      this.$confirm('确认清空列表吗？', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        // 只重置批量检测相关的状态\n        this.streamList = []\n        this.currentPage = 1\n        this.isChecking = false\n        this.isPaused = false\n        this.checkIndex = 0\n        \n        // 更新链接内容和保存状态\n        this.updateLinkContent()\n        this.saveState()\n        \n        this.$message({\n          type: 'success',\n          message: '列表已清空'\n        })\n      }).catch(() => {\n        this.$message({\n          type: 'info',\n          message: '已取消清空'\n        })\n      })\n    },\n    handleCopy(row) {\n      // 创建一个临时输入框来实现复制功能\n      const textarea = document.createElement('textarea')\n      textarea.value = row.url\n      document.body.appendChild(textarea)\n      textarea.select()\n      \n      try {\n        document.execCommand('copy')\n        this.$message.success('链接已复制到剪贴板')\n      } catch (err) {\n        this.$message.error('复制失败')\n      } finally {\n        document.body.removeChild(textarea)\n      }\n    },\n    saveStreamList() {\n      if (localStorage.getItem('persistentData') === 'true') {\n        localStorage.setItem('streamList', JSON.stringify(this.streamList))\n      }\n    },\n    handleCollectMode() {\n      if (this.isCollecting) {\n        this.stopCollecting()\n      } else {\n        this.collectDialogVisible = true\n      }\n    },\n    async startCollecting(isRestore = false) {\n      if (!isRestore) {\n        // 确保 urls 是数组\n        if (!Array.isArray(this.collectForm.urls)) {\n          this.$set(this.collectForm, 'urls', [''])\n          return\n        }\n        \n        const valid = await this.$refs.collectForm.validate()\n        if (!valid) return\n      }\n\n      this.collectDialogVisible = false\n      this.isCollecting = true\n      this.saveState() // 保存状态\n      \n      // 立即执行一次采集\n      await this.collect()\n      \n      // 如果开启了自动采集，设置定时器\n      if (this.collectForm.autoCollect) {\n        this.setupCollectSchedule()\n      } else {\n        // 单次采集完成后停止\n        this.isCollecting = false\n        this.saveState()\n      }\n    },\n    stopCollecting() {\n      this.isCollecting = false\n      if (this.collectTimer) {\n        clearInterval(this.collectTimer)\n        this.collectTimer = null\n      }\n      this.saveState() // 保存状态\n      // 只有在自动采集模式下才显示停止提示\n      if (this.collectForm.autoCollect) {\n        this.$message.success('已停止采集')\n      }\n    },\n    async collect() {\n      try {\n        // 检查是否有检测正在进行\n        if (this.isChecking) {\n          this.$message.warning('检测正在进行中，暂时跳过本次采集')\n          return\n        }\n\n        this.$message.info('开始采集直播源...')\n\n        // 并发采集所有地址\n        const results = await Promise.allSettled(\n          this.collectForm.urls.map(async url => {\n            try {\n              const response = await fetch(`${this.getBaseUrl()}/api/collect-url?url=${encodeURIComponent(url)}`, {\n                method: 'GET',\n                headers: {\n                  'Accept': 'text/plain'\n                },\n              })\n              if (!response.ok) throw new Error(`采集失败: ${url}`)\n              \n              const content = await response.text()\n              const newStreams = this.parseContent(content)\n              \n              // 过滤重复的直播源，同时考虑正在检测的源\n              const existingUrls = new Set(this.streamList.map(s => s.url))\n              return newStreams.filter(s => {\n                // 如果源已存在且正在检测中，保留原有状态\n                const existingStream = this.streamList.find(es => es.url === s.url)\n                if (existingStream && existingStream.status === '检测中') {\n                  return false\n                }\n                return !existingUrls.has(s.url)\n              })\n            } catch (error) {\n              console.error(`采集地址 ${url} 失败:`, error)\n              return []\n            }\n          })\n        )\n\n        // 合并所有采集结果\n        const allNewStreams = results\n          .filter(result => result.status === 'fulfilled')\n          .flatMap(result => result.value)\n          .filter((stream, index, self) => \n            index === self.findIndex(s => s.url === stream.url)\n          )\n\n        // 添加新的直播源到列表\n        if (allNewStreams.length > 0) {\n          this.addStreamsToList(allNewStreams)\n          this.$message.success(`采集成功: 新增${allNewStreams.length}个直播源`)\n        } else {\n          this.$message.info('未发现新的直播源')\n        }\n\n        // 统计失败的地址\n        const failedUrls = results\n          .filter(result => result.status === 'rejected')\n          .length\n\n        if (failedUrls > 0) {\n          this.$message.warning(`${failedUrls}个地址采集失败`)\n        }\n\n      } catch (error) {\n        this.$message.error('采集失败：' + error.message)\n        if (!this.collectForm.autoCollect) {\n          this.stopCollecting()\n        }\n      }\n    },\n    async handleGenerateLink() {\n      this.generateLinkDialogVisible = true\n      try {\n        // 先生成 TXT 格式链接\n        const txtResponse = await fetch(`${this.getBaseUrl()}/api/generate-link`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain',\n            'X-File-Format': 'txt'\n          },\n          body: this.generateContent('txt')\n        })\n        \n        // 再生成 M3U 格式链接\n        const m3uResponse = await fetch(`${this.getBaseUrl()}/api/generate-link`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain',\n            'X-File-Format': 'm3u'\n          },\n          body: this.generateContent('m3u')\n        })\n        \n        if (txtResponse.ok && m3uResponse.ok) {\n          const txtLink = await txtResponse.text()\n          const m3uLink = await m3uResponse.text()\n          \n          // 根据当前选择的格式显示对应的链接\n          this.generatedLinks = {\n            txt: txtLink,\n            m3u: m3uLink\n          }\n          this.generatedLink = this.generatedLinks[this.linkForm.format]\n        }\n      } catch (error) {\n        console.error('生成链接失败：', error)\n        this.$message.error('生成链接失败')\n      }\n    },\n    generateContent(format) {\n      return format === 'txt' ? this.generateTxtContent() : this.generateM3uContent()\n    },\n    generateTxtContent() {\n      let content = ''\n      let currentGroup = ''\n      \n      // 对每个分组内的直播源按响应速度排序\n      const sortedStreams = [...this.mergedStreams].sort((a, b) => {\n        if (a.group !== b.group) return 0  // 不同分组不改变顺序\n        const aTime = Number(a.responseTime) || Infinity\n        const bTime = Number(b.responseTime) || Infinity\n        return aTime - bTime\n      })\n      \n      sortedStreams.forEach(stream => {\n        if (stream.group !== currentGroup) {\n          currentGroup = stream.group\n          content += `${currentGroup},#genre#\\n`\n        }\n        content += `${stream.name},${stream.urls.join('#')}\\n`\n      })\n      \n      return content.trim()\n    },\n    generateM3uContent() {\n      let content = '#EXTM3U\\n'\n      let currentGroup = ''\n      \n      // 对每个分组内的直播源按响应速度排序\n      const sortedStreams = [...this.mergedStreams].sort((a, b) => {\n        if (a.group !== b.group) return 0  // 不同分组不改变顺序\n        const aTime = Number(a.responseTime) || Infinity\n        const bTime = Number(b.responseTime) || Infinity\n        return aTime - bTime\n      })\n      \n      sortedStreams.forEach(stream => {\n        if (stream.group !== currentGroup) {\n          currentGroup = stream.group\n          content += `\\n#EXTINF:-1 group-title=\"${currentGroup}\"\\n`\n        }\n        stream.urls.forEach(url => {\n          content += `#EXTINF:-1,${stream.name}\\n${url}\\n`\n        })\n      })\n      \n      return content.trim()\n    },\n    copyGeneratedLink() {\n      const textarea = document.createElement('textarea')\n      textarea.value = this.generatedLink\n      document.body.appendChild(textarea)\n      textarea.select()\n      \n      try {\n        document.execCommand('copy')\n        this.$message.success('链接已复制到剪贴板')\n      } catch (err) {\n        this.$message.error('复制失败')\n      } finally {\n        document.body.removeChild(textarea)\n      }\n    },\n    downloadTxtFile() {\n      const blob = new Blob([this.generatedLink], { type: 'text/plain;charset=utf-8' })\n      const url = window.URL.createObjectURL(blob)\n      const link = document.createElement('a')\n      link.href = url\n      link.download = `直播源列表_${new Date().toLocaleDateString()}.txt`\n      \n      document.body.appendChild(link)\n      link.click()\n      \n      // 清理\n      window.URL.revokeObjectURL(url)\n      document.body.removeChild(link)\n      this.$message.success('文件下载成功')\n    },\n    // 修改更新链接内容的方法\n    async updateLinkContent() {\n      try {\n        // 更新 TXT 格式内容\n        await fetch(`${this.getBaseUrl()}/api/update-content`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain',\n            'X-File-Format': 'txt'\n          },\n          body: this.generateContent('txt')\n        })\n        \n        // 更新 M3U 格式内容\n        await fetch(`${this.getBaseUrl()}/api/update-content`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain',\n            'X-File-Format': 'm3u'\n          },\n          body: this.generateContent('m3u')\n        })\n      } catch (error) {\n        console.error('更新链接内容失败：', error)\n      }\n    },\n    handleScheduleCheck() {\n      if (this.isScheduled) {\n        this.stopScheduleCheck()\n      } else {\n        this.scheduleDialogVisible = true\n      }\n    },\n    startScheduleCheck() {\n      this.$refs.scheduleForm.validate(valid => {\n        if (valid) {\n          this.scheduleDialogVisible = false\n          this.isScheduled = true\n          this.setupSchedule()\n          this.saveState() // 保存状态\n          this.$message.success('定时检测已开启')\n        }\n      })\n    },\n    stopScheduleCheck() {\n      if (this.scheduleTimer) {\n        clearInterval(this.scheduleTimer)\n        this.scheduleTimer = null\n      }\n      this.isScheduled = false\n      this.nextScheduleTime = null\n      this.saveState() // 保存状态\n      this.$message.success('定时检测已停止')\n    },\n    setupSchedule() {\n      // 清除现有定时器\n      if (this.scheduleTimer) {\n        clearInterval(this.scheduleTimer)\n      }\n\n      const calculateNextExecutionTime = () => {\n        const now = new Date()\n        const [hours, minutes] = this.scheduleForm.executeTime.split(':').map(Number)\n        let nextTime = new Date(now)\n        nextTime.setHours(hours, minutes, 0, 0)\n\n        // 如果当前时间已经过了今天的执行时间，设置为明天\n        if (nextTime <= now) {\n          nextTime.setDate(nextTime.getDate() + 1)\n        }\n\n        // 如果是每周模式，调整到下一个符合条件的星期\n        if (this.scheduleForm.scheduleType === 'weekly') {\n          const targetDay = parseInt(this.scheduleForm.weekDay)\n          while (nextTime.getDay() !== targetDay) {\n            nextTime.setDate(nextTime.getDate() + 1)\n          }\n        }\n\n        return nextTime\n      }\n\n      const scheduleNextExecution = () => {\n        const nextTime = calculateNextExecutionTime()\n        const delay = nextTime.getTime() - new Date().getTime()\n\n        // 更新下次执行时间显示\n        this.nextScheduleTime = nextTime\n\n        // 设置下次执行的定时器\n        this.scheduleTimer = setTimeout(() => {\n          // 如果当前正在检测中，等待检测完成后再执行\n          if (!this.isChecking) {\n            this.handleBatchCheck()\n          }\n          // 设置下一次执行\n          scheduleNextExecution()\n        }, delay)\n      }\n\n      // 开始第一次调度\n      scheduleNextExecution()\n    },\n    // 保存当前状态到本地存储\n    saveState() {\n      try {\n        // 清除旧的分块数据\n        this.clearStorageData()\n\n        // 只保存必要的数据字段，减少数据量\n        const minimalStreamList = this.streamList.map(stream => ({\n          name: stream.name,\n          url: stream.url,\n          group: stream.group,\n          status: stream.status,\n          resolution: stream.resolution || '',\n          responseTime: stream.responseTime || 0\n        }))\n\n        // 将streamList分块存储，减小分块大小\n        const streamListStr = JSON.stringify(minimalStreamList)\n        const chunkSize = 100000 // 减小到100KB\n        const chunks = Math.ceil(streamListStr.length / chunkSize)\n        \n        // 如果数据量太大，只保存基本信息\n        if (chunks > 10) {\n          console.warn('数据量过大，只保存基本状态信息')\n          const basicState = {\n            currentPage: this.currentPage,\n            pageSize: this.pageSize,\n            scheduleForm: this.scheduleForm,\n            collectForm: this.collectForm\n          }\n          localStorage.setItem(this.stateKey, JSON.stringify(basicState))\n          return\n        }\n\n        // 分块存储\n        for (let i = 0; i < chunks; i++) {\n          const chunk = streamListStr.slice(i * chunkSize, (i + 1) * chunkSize)\n          try {\n            localStorage.setItem(`${this.stateKey}_streamList_${i}`, chunk)\n          } catch (e) {\n            console.error('存储分块失败:', e)\n            this.clearStorageData()\n            // 尝试只保存基本信息\n            const basicState = {\n              currentPage: this.currentPage,\n              pageSize: this.pageSize,\n              scheduleForm: this.scheduleForm,\n              collectForm: this.collectForm\n            }\n            localStorage.setItem(this.stateKey, JSON.stringify(basicState))\n            return\n          }\n        }\n\n        // 存储其他状态数据\n        const state = {\n          currentPage: this.currentPage,\n          pageSize: this.pageSize,\n          scheduleForm: this.scheduleForm,\n          collectForm: this.collectForm,\n          streamListChunks: chunks\n        }\n        localStorage.setItem(this.stateKey, JSON.stringify(state))\n      } catch (error) {\n        console.error('保存状态失败:', error)\n        this.clearStorageData()\n        // 尝试只保存基本信息\n        try {\n          const basicState = {\n            currentPage: this.currentPage,\n            pageSize: this.pageSize\n          }\n          localStorage.setItem(this.stateKey, JSON.stringify(basicState))\n        } catch (e) {\n          console.error('保存基本状态也失败:', e)\n        }\n      }\n    },\n\n    // 从本地存储恢复状态\n    restoreState() {\n      try {\n        const savedState = localStorage.getItem(this.stateKey)\n        if (savedState) {\n          const state = JSON.parse(savedState)\n          \n          // 恢复streamList\n          if (state.streamListChunks) {\n            try {\n              let streamListStr = ''\n              for (let i = 0; i < state.streamListChunks; i++) {\n                const chunk = localStorage.getItem(`${this.stateKey}_streamList_${i}`)\n                if (chunk) {\n                  streamListStr += chunk\n                }\n              }\n              if (streamListStr) {\n                this.streamList = JSON.parse(streamListStr)\n              }\n            } catch (e) {\n              console.error('恢复streamList失败:', e)\n              this.streamList = []\n            }\n          }\n          \n          // 恢复其他状态\n          this.currentPage = state.currentPage || 1\n          this.pageSize = state.pageSize || 5\n          if (state.scheduleForm) this.scheduleForm = state.scheduleForm\n          if (state.collectForm) this.collectForm = state.collectForm\n        }\n\n        // 重置所有运行状态\n        this.isChecking = false\n        this.isPaused = false\n        this.isScheduled = false\n        this.isCollecting = false\n        this.checkedCount = 0\n        this.totalCount = 0\n        this.pausedIndex = -1\n        this.nextScheduleTime = null\n      } catch (error) {\n        console.error('恢复状态失败:', error)\n        this.clearStorageData()\n        this.streamList = []\n      }\n    },\n\n    // 清理存储数据\n    clearStorageData() {\n      try {\n        localStorage.removeItem(this.stateKey)\n        for (let i = 0; ; i++) {\n          const key = `${this.stateKey}_streamList_${i}`\n          if (localStorage.getItem(key) === null) {\n            break\n          }\n          localStorage.removeItem(key)\n        }\n      } catch (error) {\n        console.error('清理存储数据失败:', error)\n      }\n    },\n    // 添加重置所有运行状态的方法\n    resetAllStates() {\n      // 停止定时检测\n      if (this.isScheduled) {\n        this.stopScheduleCheck()\n      }\n      \n      // 停止采集\n      if (this.isCollecting) {\n        this.stopCollecting()\n      }\n      \n      // 停止批量检测\n      if (this.isChecking) {\n        this.shouldStop = true\n        this.isChecking = false\n        this.isPaused = false\n      }\n      \n      // 重置所有状态\n      this.isChecking = false\n      this.isPaused = false\n      this.isScheduled = false\n      this.isCollecting = false\n      this.checkedCount = 0\n      this.totalCount = 0\n      this.pausedIndex = -1\n      this.nextScheduleTime = null\n      \n      // 清除所有定时器\n      if (this.scheduleTimer) {\n        clearInterval(this.scheduleTimer)\n        this.scheduleTimer = null\n      }\n      if (this.collectTimer) {\n        clearInterval(this.collectTimer)\n        this.collectTimer = null\n      }\n      \n      // 保存重置后的状态\n      this.saveState()\n      \n      this.$message.success('所有运行状态已重置')\n    },\n    // 更新活动状态\n    updateActiveStatus() {\n      const hasActive = this.isChecking || this.isCollecting || this.isScheduled\n      \n      if (this.hasActiveOperations !== hasActive) {\n        this.hasActiveOperations = hasActive\n        if (hasActive) {\n          // 添加刷新拦截\n          window.addEventListener('beforeunload', this.handleBeforeUnload)\n        } else {\n          // 移除刷新拦截\n          window.removeEventListener('beforeunload', this.handleBeforeUnload)\n        }\n      }\n    },\n    // 处理页面刷新\n    handleBeforeUnload(e) {\n      if (this.hasActiveOperations) {\n        const message = '有正在执行的操作，确定要离开吗？'\n        e.preventDefault()\n        e.returnValue = message\n        return message\n      }\n    },\n    addCollectUrl() {\n      if (!Array.isArray(this.collectForm.urls)) {\n        // 如果 urls 不是数组，先初始化它\n        this.$set(this.collectForm, 'urls', [''])\n      } else {\n        this.collectForm.urls.push('')\n      }\n    },\n    removeCollectUrl(index) {\n      if (Array.isArray(this.collectForm.urls) && this.collectForm.urls.length > 1) {\n        this.collectForm.urls.splice(index, 1)\n      }\n    },\n    // 添加判断分辨率标签类型的方法\n    getResolutionTagType(resolution) {\n      if (!resolution || resolution === '-') return 'info'\n      if (resolution === '多播源') return 'warning'  // 为多播源添加特殊样式\n      const [width] = resolution.split('x').map(Number)\n      if (width >= 1920) return 'success'\n      if (width >= 1280) return ''  // 默认类型\n      return 'warning'\n    },\n    // 添加判断响应时间标签类型的方法\n    getResponseTimeTagType(responseTime) {\n      if (!responseTime || responseTime === '-') return 'info'\n      const time = Number(responseTime)\n      if (time <= 1000) return 'success'\n      if (time <= 2000) return ''  // 默认类型\n      if (time <= 3000) return 'warning'\n      return 'danger'\n    },\n    setupCollectSchedule() {\n      // 清除现有定时器\n      if (this.collectTimer) {\n        clearInterval(this.collectTimer)\n      }\n\n      const calculateNextCollectTime = () => {\n        const now = new Date()\n        const [hours, minutes] = this.collectForm.executeTime.split(':').map(Number)\n        let nextTime = new Date(now)\n        nextTime.setHours(hours, minutes, 0, 0)\n\n        // 如果当前时间已经过了今天的执行时间，设置为明天\n        if (nextTime <= now) {\n          nextTime.setDate(nextTime.getDate() + 1)\n        }\n\n        // 如果是每周模式，调整到下一个符合条件的星期\n        if (this.collectForm.collectType === 'weekly') {\n          const targetDay = parseInt(this.collectForm.weekDay)\n          while (nextTime.getDay() !== targetDay) {\n            nextTime.setDate(nextTime.getDate() + 1)\n          }\n        }\n\n        return nextTime\n      }\n\n      const scheduleNextCollection = () => {\n        const nextTime = calculateNextCollectTime()\n        const delay = nextTime.getTime() - new Date().getTime()\n\n        // 设置下次执行的定时器\n        this.collectTimer = setTimeout(() => {\n          // 执行采集\n          this.collect()\n          // 设置下一次执行\n          scheduleNextCollection()\n        }, delay)\n      }\n\n      // 开始第一次调度\n      scheduleNextCollection()\n    },\n    handleSearch() {\n      this.filteredList = this.streamList.filter(item => {\n        const nameMatch = !this.searchForm.name || \n          item.name.toLowerCase().includes(this.searchForm.name.toLowerCase())\n        \n        const groupMatch = !this.searchForm.group || \n          item.group === this.searchForm.group\n        \n        const statusMatch = !this.searchForm.status || \n          item.status === this.searchForm.status\n        \n        return nameMatch && groupMatch && statusMatch\n      })\n      \n      // 重置到第一页\n      this.currentPage = 1\n      this.searchDialogVisible = false\n    },\n    resetSearch() {\n      this.searchForm = {\n        name: '',\n        group: '',\n        status: ''\n      }\n      this.filteredList = []\n      this.currentPage = 1\n    },\n    // 获取真实IP地址\n    async getRealIp() {\n      try {\n        const response = await fetch(`${this.getBaseUrl()}/api/local-ip`)\n        if (response.ok) {\n          const data = await response.json()\n          this.realIp = data.ip\n          localStorage.setItem('realIp', data.ip)  // 保存真实IP到localStorage\n        }\n      } catch (error) {\n        console.error('获取IP失败:', error)\n      }\n    },\n    // 获取基础URL\n    getBaseUrl() {\n      const useRealIp = localStorage.getItem('useRealIp') === 'true'\n      return useRealIp && this.realIp ? `http://${this.realIp}:8080` : 'http://localhost:8080'\n    },\n    async saveGithubSettings() {\n      try {\n        await this.$refs.syncForm.validate()\n\n        // 保存设置到localStorage\n        localStorage.setItem('githubToken', this.syncForm.token)\n        localStorage.setItem('githubRepo', this.syncForm.repo)\n        localStorage.setItem('githubTxtPath', this.syncForm.txtPath)\n        localStorage.setItem('githubM3uPath', this.syncForm.m3uPath)\n        localStorage.setItem('githubAutoSync', this.syncForm.autoSync)\n        localStorage.setItem('githubSyncType', this.syncForm.syncType)\n        localStorage.setItem('githubExecuteTime', this.syncForm.executeTime)\n        localStorage.setItem('githubWeekDay', this.syncForm.weekDay)\n\n        // 如果开启了自动同步，重新设置定时器\n        if (this.syncForm.autoSync) {\n          this.setupSyncSchedule()\n        } else {\n          this.clearSyncSchedule()\n        }\n\n        this.$message.success('设置已保存')\n        this.syncDialogVisible = false\n      } catch (error) {\n        this.$message.error(error.message || '保存失败')\n      }\n    },\n    async syncToGithub(content, path) {\n      const response = await fetch(`${this.getBaseUrl()}/api/sync-github`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          token: this.syncForm.token,\n          repo: this.syncForm.repo,\n          path: path,\n          content: content,\n          message: this.syncForm.message\n        })\n      })\n      \n      if (!response.ok) {\n        throw new Error('同步失败')\n      }\n    },\n    handleAutoSyncChange(value) {\n      if (value) {\n        this.setupSyncSchedule()\n      } else {\n        this.clearSyncSchedule()\n      }\n    },\n    setupSyncSchedule() {\n      this.clearSyncSchedule()\n      const calculateNextSyncTime = () => {\n        const now = new Date()\n        const [hours, minutes] = this.syncForm.executeTime.split(':').map(Number)\n        let nextTime = new Date(now)\n        nextTime.setHours(hours, minutes, 0, 0)\n\n        // 如果当前时间已经过了今天的执行时间，设置为明天\n        if (nextTime <= now) {\n          nextTime.setDate(nextTime.getDate() + 1)\n        }\n\n        // 如果是每周模式，调整到下一个符合条件的星期\n        if (this.syncForm.syncType === 'weekly') {\n          const targetDay = parseInt(this.syncForm.weekDay)\n          while (nextTime.getDay() !== targetDay) {\n            nextTime.setDate(nextTime.getDate() + 1)\n          }\n        }\n\n        return nextTime\n      }\n\n      const scheduleNextSync = () => {\n        const nextTime = calculateNextSyncTime()\n        const delay = nextTime.getTime() - new Date().getTime()\n\n        // 设置下次执行的定时器\n        this.syncTimer = setTimeout(async () => {\n          try {\n            // 执行同步\n            await this.syncToGithub(this.generateContent('txt'), this.syncForm.txtPath)\n            await this.syncToGithub(this.generateContent('m3u'), this.syncForm.m3uPath)\n            this.$message.success('已同步到GitHub')\n          } catch (error) {\n            this.$message.error('同步失败：' + error.message)\n          }\n          // 设置下一次执行\n          scheduleNextSync()\n        }, delay)\n      }\n\n      // 开始第一次调度\n      scheduleNextSync()\n    },\n    clearSyncSchedule() {\n      if (this.syncTimer) {\n        clearInterval(this.syncTimer)\n        this.syncTimer = null\n      }\n    },\n    getStatusTagType(status) {\n      switch (status) {\n        case '正常':\n          return 'success'\n        case '异常':\n          return 'danger'\n        case '未知':\n          return 'warning'\n        case '未检测':\n          return 'info'\n        default:\n          return 'info'\n      }\n    },\n    // 添加显示消息的方法\n    showMessage(content, type = 'info', duration = 3000) {\n      const id = this.messageId++\n      const message = {\n        id,\n        content,\n        type\n      }\n      this.messages.push(message)\n      \n      // 如果不是检测进度消息，则自动移除\n      if (type !== 'progress') {\n        setTimeout(() => {\n          this.removeMessage(id)\n        }, duration)\n      }\n      \n      // 最多显示5条消息\n      if (this.messages.length > 5) {\n        this.messages.shift()\n      }\n    },\n    \n    // 移除消息\n    removeMessage(id) {\n      const index = this.messages.findIndex(msg => msg.id === id)\n      if (index !== -1) {\n        this.messages.splice(index, 1)\n      }\n    },\n    \n    // 获取消息图标\n    getMessageIcon(type) {\n      switch (type) {\n        case 'success':\n          return 'el-icon-success'\n        case 'warning':\n          return 'el-icon-warning'\n        case 'error':\n          return 'el-icon-error'\n        case 'progress':\n          return 'el-icon-loading'\n        default:\n          return 'el-icon-info'\n      }\n    },\n  },\n  watch: {\n    // 只监听数据变化\n    streamList: {\n      handler() {\n        this.updateLinkContent()\n        this.saveState()\n      },\n      deep: true\n    },\n    currentPage() {\n      this.saveState()\n    },\n    pageSize() {\n      this.saveState()\n    },\n    // 监听所有可能的运行状态\n    isChecking() {\n      this.updateActiveStatus()\n    },\n    isCollecting() {\n      this.updateActiveStatus()\n    },\n    isScheduled() {\n      this.updateActiveStatus()\n    },\n    // 添加格式变化监听\n    'linkForm.format'() {\n      if (this.generateLinkDialogVisible) {\n        this.handleGenerateLink()\n      }\n    }\n  },\n  // 组件被激活时（重新显示）\n  activated() {\n    // 如果有定时任务，恢复定时器\n    if (this.isScheduled) {\n      this.setupSchedule()\n    }\n    // 如果有采集任务，恢复采集\n    if (this.isCollecting) {\n      this.startCollecting(true)\n    }\n    // 如果有GitHub自动同步，恢复同步定时器\n    if (this.syncForm.autoSync) {\n      this.setupSyncSchedule()\n    }\n  },\n  // 组件被停用时（离开但不销毁）\n  deactivated() {\n    // 暂停定时器，但保持状态标志\n    if (this.scheduleTimer) {\n      clearInterval(this.scheduleTimer)\n      this.scheduleTimer = null\n    }\n    // 暂停采集定时器，但保持状态标志\n    if (this.collectTimer) {\n      clearInterval(this.collectTimer)\n      this.collectTimer = null\n    }\n    // 暂停同步定时器，但保持状态标志\n    if (this.syncTimer) {\n      clearInterval(this.syncTimer)\n      this.syncTimer = null\n    }\n  }\n}\n</script>\n\n<style scoped>\n.stream-check {\n  padding: 25px;\n  background-color: #fff;\n  border-radius: 4px;\n  height: calc(100vh - 130px);\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  position: relative;\n}\n\n.table-operations {\n  margin-bottom: 20px;\n  flex-shrink: 0;\n}\n\n.button-groups {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  align-items: center;\n}\n\n.button-group {\n  display: flex;\n  align-items: center;\n}\n\n/* 确保按钮组在小屏幕上不会被压缩 */\n:deep(.el-button-group) {\n  white-space: nowrap;\n  margin: 0;\n}\n\n/* 确保按钮内容不会换行 */\n:deep(.el-button) {\n  white-space: nowrap;\n}\n\n/* 在较小屏幕上调整按钮大小 */\n@media screen and (max-width: 768px) {\n  :deep(.el-button) {\n    padding: 8px 15px;\n    font-size: 12px;\n  }\n  \n  :deep(.el-button [class*=\"el-icon-\"]) {\n    font-size: 14px;\n  }\n}\n\n/* 在更小的屏幕上进一步调整 */\n@media screen and (max-width: 576px) {\n  .button-groups {\n    gap: 5px;\n  }\n  \n  :deep(.el-button) {\n    padding: 6px 10px;\n    font-size: 12px;\n  }\n}\n\n/* 添加表格容器样式 */\n.el-table-wrapper {\n  flex: 1;\n  position: relative; /* 添加相对定位 */\n  min-height: 200px; /* 设置最小高度 */\n}\n\n/* 覆盖 element-ui 的表格样式 */\n:deep(.el-table) {\n  position: absolute; /* 绝对定位 */\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  height: 100%;\n  max-height: 100%;\n}\n\n:deep(.el-table__body-wrapper) {\n  height: calc(100% - 40px) !important; /* 减去表头高度 */\n  overflow-y: auto !important;\n}\n\n:deep(.el-table__fixed-right) {\n  height: 100% !important; /* 修复固定列的高度 */\n  bottom: 0px;\n}\n\n:deep(.el-table__fixed-right .el-table__fixed-body-wrapper) {\n  height: calc(100% - 40px) !important; /* 减去表头高度 */\n}\n\n.pagination-container {\n  margin-top: 20px;\n  display: flex;\n  justify-content: center;\n  flex-shrink: 0; /* 防止分页被压缩 */\n  padding-bottom: 10px; /* 添加底部间距 */\n  background-color: #fff; /* 确保分页器背景色 */\n  position: relative; /* 添加相对定位 */\n  z-index: 1; /* 确保分页器在最上层 */\n}\n\n.el-button [class*=\"el-icon-\"] {\n  font-size: 18px;\n}\n\n.delete-btn {\n  color: #F56C6C;\n}\n\n.delete-btn:hover {\n  color: #ff4d4d;\n}\n\n.setting-tip {\n  margin-left: 10px;\n  color: #909399;\n  font-size: 13px;\n}\n\n.link-info {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.link-info p {\n  margin: 0;\n  color: #606266;\n}\n\n.link-actions {\n  display: flex;\n  gap: 10px;\n  justify-content: flex-end;\n  margin-top: 10px;\n}\n\n/* 生成链接对话框样式 */\n.generate-link-dialog {\n  max-width: 600px;\n}\n\n.link-container {\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n}\n\n.link-card, .tips-card {\n  margin: 0;\n  border: 1px solid #EBEEF5;\n}\n\n.link-content {\n  padding: 10px;\n}\n\n.tips-content {\n  color: #606266;\n  font-size: 14px;\n  padding: 10px;\n}\n\n.tips-content ul {\n  margin: 0;\n  padding-left: 20px;\n  line-height: 1.8;\n}\n\n/* 覆盖 element-ui 的一些默认样式 */\n:deep(.el-dialog__body) {\n  padding: 20px;\n}\n\n:deep(.el-card__header) {\n  padding: 12px 20px;\n  font-weight: 500;\n}\n\n:deep(.el-card__body) {\n  padding: 15px;\n}\n\n/* 可以添加一些自定义样式 */\n.el-tag {\n  width: 90px;  /* 统一标签宽度 */\n}\n\n.el-tag + .el-tag {\n  margin-left: 4px;\n}\n\n/* 添加消息面板样式 */\n.message-panel {\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  width: 300px;\n  z-index: 9999;\n  pointer-events: none; /* 允许点击穿透 */\n  opacity: 0;\n  transition: opacity 0.3s;\n}\n\n.message-panel.has-messages {\n  opacity: 1;\n}\n\n.message-item {\n  background: rgba(255, 255, 255, 0.95);\n  border-radius: 4px;\n  padding: 10px 15px;\n  margin-bottom: 8px;\n  box-shadow: 0 2px 12px 0 rgba(0,0,0,.1);\n  display: flex;\n  align-items: center;\n  font-size: 14px;\n  transition: all 0.3s;\n}\n\n.message-item i {\n  margin-right: 8px;\n  font-size: 16px;\n}\n\n.message-item.success {\n  background: rgba(103, 194, 58, 0.95);\n  color: white;\n}\n\n.message-item.warning {\n  background: rgba(230, 162, 60, 0.95);\n  color: white;\n}\n\n.message-item.error {\n  background: rgba(245, 108, 108, 0.95);\n  color: white;\n}\n\n.message-item.progress {\n  background: rgba(64, 158, 255, 0.95);\n  color: white;\n}\n\n.message-content {\n  flex: 1;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n/* 消息动画 */\n.message-list-enter-active, .message-list-leave-active {\n  transition: all 0.3s;\n}\n\n.message-list-enter {\n  transform: translateX(100%);\n  opacity: 0;\n}\n\n.message-list-leave-to {\n  transform: translateX(100%);\n  opacity: 0;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}