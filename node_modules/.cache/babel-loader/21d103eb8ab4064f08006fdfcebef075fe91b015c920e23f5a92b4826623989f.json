{"ast":null,"code":"export default {\n  name: 'StreamCheck',\n  data() {\n    return {\n      // No changes to data section\n    };\n  },\n  computed: {\n    // No changes to computed section\n  },\n  created() {\n    // No changes to created section\n  },\n  beforeDestroy() {\n    // No changes to beforeDestroy section\n  },\n  methods: {\n    async collectUrls() {\n      if (!this.isCollecting) return;\n      const promises = this.collectForm.urls.map(async url => {\n        try {\n          const response = await fetch(`${this.getBaseUrl()}/api/collect-url`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              url: url\n            })\n          });\n          if (!response.ok) throw new Error(`采集失败: ${url}`);\n          const content = await response.text();\n          // 解析采集到的内容\n          this.parseCollectedContent(content);\n        } catch (error) {\n          console.error('采集失败:', error);\n          this.$message.error(`采集失败: ${url}`);\n        }\n      });\n      try {\n        await Promise.all(promises);\n      } catch (error) {\n        console.error('批量采集失败:', error);\n      }\n    }\n  },\n  watch: {\n    // No changes to watch section\n  }\n  // No changes to other sections\n};","map":{"version":3,"names":["name","data","computed","created","beforeDestroy","methods","collectUrls","isCollecting","promises","collectForm","urls","map","url","response","fetch","getBaseUrl","method","headers","body","JSON","stringify","ok","Error","content","text","parseCollectedContent","error","console","$message","Promise","all","watch"],"sources":["src/components/StreamCheck.vue"],"sourcesContent":["<template>\n  <!-- No changes to template section -->\n</template>\n\n<script>\nexport default {\n  name: 'StreamCheck',\n  data() {\n    return {\n      // No changes to data section\n    }\n  },\n  computed: {\n    // No changes to computed section\n  },\n  created() {\n    // No changes to created section\n  },\n  beforeDestroy() {\n    // No changes to beforeDestroy section\n  },\n  methods: {\n    async collectUrls() {\n      if (!this.isCollecting) return\n      \n      const promises = this.collectForm.urls.map(async url => {\n        try {\n          const response = await fetch(`${this.getBaseUrl()}/api/collect-url`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n            body: JSON.stringify({ url: url })\n              })\n              if (!response.ok) throw new Error(`采集失败: ${url}`)\n              \n              const content = await response.text()\n          // 解析采集到的内容\n          this.parseCollectedContent(content)\n            } catch (error) {\n          console.error('采集失败:', error)\n          this.$message.error(`采集失败: ${url}`)\n        }\n      })\n\n      try {\n        await Promise.all(promises)\n      } catch (error) {\n        console.error('批量采集失败:', error)\n      }\n    }\n  },\n  watch: {\n    // No changes to watch section\n  },\n  // No changes to other sections\n}\n</script>\n\n<style scoped>\n/* No changes to style section */\n</style> "],"mappings":"AAKA;EACAA,IAAA;EACAC,KAAA;IACA;MACA;IAAA,CACA;EACA;EACAC,QAAA;IACA;EAAA,CACA;EACAC,QAAA;IACA;EAAA,CACA;EACAC,cAAA;IACA;EAAA,CACA;EACAC,OAAA;IACA,MAAAC,YAAA;MACA,UAAAC,YAAA;MAEA,MAAAC,QAAA,QAAAC,WAAA,CAAAC,IAAA,CAAAC,GAAA,OAAAC,GAAA;QACA;UACA,MAAAC,QAAA,SAAAC,KAAA,SAAAC,UAAA;YACAC,MAAA;YACAC,OAAA;cACA;YACA;YACAC,IAAA,EAAAC,IAAA,CAAAC,SAAA;cAAAR,GAAA,EAAAA;YAAA;UACA;UACA,KAAAC,QAAA,CAAAQ,EAAA,YAAAC,KAAA,UAAAV,GAAA;UAEA,MAAAW,OAAA,SAAAV,QAAA,CAAAW,IAAA;UACA;UACA,KAAAC,qBAAA,CAAAF,OAAA;QACA,SAAAG,KAAA;UACAC,OAAA,CAAAD,KAAA,UAAAA,KAAA;UACA,KAAAE,QAAA,CAAAF,KAAA,UAAAd,GAAA;QACA;MACA;MAEA;QACA,MAAAiB,OAAA,CAAAC,GAAA,CAAAtB,QAAA;MACA,SAAAkB,KAAA;QACAC,OAAA,CAAAD,KAAA,YAAAA,KAAA;MACA;IACA;EACA;EACAK,KAAA;IACA;EAAA;EAEA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}