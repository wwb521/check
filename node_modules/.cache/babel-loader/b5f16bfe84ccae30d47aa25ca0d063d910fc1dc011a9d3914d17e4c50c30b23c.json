{"ast":null,"code":"import { ipcRenderer } from 'electron';\nexport default {\n  name: 'SettingsPage',\n  data() {\n    return {\n      settings: {\n        ffprobePath: localStorage.getItem('ffprobePath') || '',\n        autoRemoveInvalid: localStorage.getItem('autoRemoveInvalid') === 'true',\n        autoRemoveLowRes: localStorage.getItem('autoRemoveLowRes') === 'true',\n        autoRemoveSlowResponse: localStorage.getItem('autoRemoveSlowResponse') === 'true'\n      }\n    };\n  },\n  methods: {\n    async testFfprobe() {\n      if (!this.settings.ffprobePath) {\n        this.$message.warning('请先输入FFprobe路径');\n        return;\n      }\n      this.$message.info('正在测试FFprobe...');\n      try {\n        const response = await fetch('http://localhost:8080/api/test-ffprobe', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            path: this.settings.ffprobePath\n          })\n        });\n        if (!response.ok) throw new Error('请求失败');\n        const result = await response.json();\n        if (result.success) {\n          this.$message.success('FFprobe测试成功');\n        } else {\n          throw new Error(result.message);\n        }\n      } catch (error) {\n        this.$message.error('FFprobe测试失败: ' + error.message);\n      }\n    },\n    handleSettingChange() {\n      this.updateLocalStorage();\n    },\n    saveSettings() {\n      this.$refs.settingsForm.validate(valid => {\n        if (valid) {\n          this.updateLocalStorage();\n          this.$message.success('设置保存成功');\n        }\n      });\n    },\n    updateLocalStorage() {\n      localStorage.setItem('ffprobePath', this.settings.ffprobePath);\n      localStorage.setItem('autoRemoveInvalid', this.settings.autoRemoveInvalid);\n      localStorage.setItem('autoRemoveLowRes', this.settings.autoRemoveLowRes);\n      localStorage.setItem('autoRemoveSlowResponse', this.settings.autoRemoveSlowResponse);\n    },\n    async selectFfprobePath() {\n      try {\n        const filePath = await ipcRenderer.invoke('select-ffprobe');\n        if (filePath) {\n          this.settings.ffprobePath = filePath;\n          this.updateLocalStorage();\n        }\n      } catch (error) {\n        this.$message.error('选择文件失败：' + error.message);\n      }\n    }\n  }\n};","map":{"version":3,"names":["ipcRenderer","name","data","settings","ffprobePath","localStorage","getItem","autoRemoveInvalid","autoRemoveLowRes","autoRemoveSlowResponse","methods","testFfprobe","$message","warning","info","response","fetch","method","headers","body","JSON","stringify","path","ok","Error","result","json","success","message","error","handleSettingChange","updateLocalStorage","saveSettings","$refs","settingsForm","validate","valid","setItem","selectFfprobePath","filePath","invoke"],"sources":["src/views/Settings.vue"],"sourcesContent":["<template>\n  <div class=\"settings\">\n    <el-card class=\"settings-card\">\n      <div slot=\"header\">\n        <span>系统设置</span>\n      </div>\n      \n      <el-form :model=\"settings\" ref=\"settingsForm\" label-width=\"180px\">\n        <el-form-item \n          label=\"FFprobe路径\" \n          prop=\"ffprobePath\"\n          :rules=\"[\n            { required: true, message: '请输入FFprobe路径', trigger: 'blur' }\n          ]\">\n          <el-input \n            v-model=\"settings.ffprobePath\" \n            placeholder=\"请输入FFprobe可执行文件的完整路径\">\n            <template slot=\"append\">\n              <el-button @click=\"testFfprobe\">测试</el-button>\n              <el-button @click=\"selectFfprobePath\">选择</el-button>\n            </template>\n          </el-input>\n        </el-form-item>\n\n        <el-form-item label=\"自动清除异常源\">\n          <el-switch\n            v-model=\"settings.autoRemoveInvalid\"\n            @change=\"handleSettingChange\">\n          </el-switch>\n          <span class=\"setting-tip\">开启后将自动清除检测失败的直播源</span>\n        </el-form-item>\n\n        <el-form-item label=\"自动清除低分辨率\">\n          <el-switch\n            v-model=\"settings.autoRemoveLowRes\"\n            @change=\"handleSettingChange\">\n          </el-switch>\n          <span class=\"setting-tip\">开启后将自动清除分辨率低于1280x720的直播源</span>\n        </el-form-item>\n\n        <el-form-item label=\"自动清除慢速源\">\n          <el-switch\n            v-model=\"settings.autoRemoveSlowResponse\"\n            @change=\"handleSettingChange\">\n          </el-switch>\n          <span class=\"setting-tip\">开启后将自动清除响应时间超过3000ms的直播源</span>\n        </el-form-item>\n        \n        <el-form-item>\n          <el-button type=\"primary\" @click=\"saveSettings\">保存设置</el-button>\n        </el-form-item>\n      </el-form>\n    </el-card>\n  </div>\n</template>\n\n<script>\nimport { ipcRenderer } from 'electron'\n\nexport default {\n  name: 'SettingsPage',\n  data() {\n    return {\n      settings: {\n        ffprobePath: localStorage.getItem('ffprobePath') || '',\n        autoRemoveInvalid: localStorage.getItem('autoRemoveInvalid') === 'true',\n        autoRemoveLowRes: localStorage.getItem('autoRemoveLowRes') === 'true',\n        autoRemoveSlowResponse: localStorage.getItem('autoRemoveSlowResponse') === 'true'\n      }\n    }\n  },\n  methods: {\n    async testFfprobe() {\n      if (!this.settings.ffprobePath) {\n        this.$message.warning('请先输入FFprobe路径')\n        return\n      }\n\n      this.$message.info('正在测试FFprobe...')\n      try {\n        const response = await fetch('http://localhost:8080/api/test-ffprobe', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({ path: this.settings.ffprobePath })\n        })\n        \n        if (!response.ok) throw new Error('请求失败')\n        \n        const result = await response.json()\n        if (result.success) {\n          this.$message.success('FFprobe测试成功')\n        } else {\n          throw new Error(result.message)\n        }\n      } catch (error) {\n        this.$message.error('FFprobe测试失败: ' + error.message)\n      }\n    },\n    \n    handleSettingChange() {\n      this.updateLocalStorage()\n    },\n    \n    saveSettings() {\n      this.$refs.settingsForm.validate(valid => {\n        if (valid) {\n          this.updateLocalStorage()\n          this.$message.success('设置保存成功')\n        }\n      })\n    },\n\n    updateLocalStorage() {\n      localStorage.setItem('ffprobePath', this.settings.ffprobePath)\n      localStorage.setItem('autoRemoveInvalid', this.settings.autoRemoveInvalid)\n      localStorage.setItem('autoRemoveLowRes', this.settings.autoRemoveLowRes)\n      localStorage.setItem('autoRemoveSlowResponse', this.settings.autoRemoveSlowResponse)\n    },\n\n    async selectFfprobePath() {\n      try {\n        const filePath = await ipcRenderer.invoke('select-ffprobe')\n        if (filePath) {\n          this.settings.ffprobePath = filePath\n          this.updateLocalStorage()\n        }\n      } catch (error) {\n        this.$message.error('选择文件失败：' + error.message)\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.settings {\n  padding: 20px;\n}\n\n.settings-card {\n  max-width: 800px;\n  margin: 0 auto;\n}\n\n.setting-tip {\n  margin-left: 10px;\n  color: #909399;\n  font-size: 13px;\n}\n\n.el-input-group__append {\n  display: flex;\n  padding: 0;\n}\n\n.el-input-group__append .el-button {\n  margin: 0;\n  border: none;\n  border-radius: 0;\n  border-left: 1px solid #DCDFE6;\n}\n\n.el-input-group__append .el-button:first-child {\n  border-left: none;\n}\n</style> "],"mappings":"AAyDA,SAAAA,WAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,QAAA;QACAC,WAAA,EAAAC,YAAA,CAAAC,OAAA;QACAC,iBAAA,EAAAF,YAAA,CAAAC,OAAA;QACAE,gBAAA,EAAAH,YAAA,CAAAC,OAAA;QACAG,sBAAA,EAAAJ,YAAA,CAAAC,OAAA;MACA;IACA;EACA;EACAI,OAAA;IACA,MAAAC,YAAA;MACA,UAAAR,QAAA,CAAAC,WAAA;QACA,KAAAQ,QAAA,CAAAC,OAAA;QACA;MACA;MAEA,KAAAD,QAAA,CAAAE,IAAA;MACA;QACA,MAAAC,QAAA,SAAAC,KAAA;UACAC,MAAA;UACAC,OAAA;YACA;UACA;UACAC,IAAA,EAAAC,IAAA,CAAAC,SAAA;YAAAC,IAAA,OAAAnB,QAAA,CAAAC;UAAA;QACA;QAEA,KAAAW,QAAA,CAAAQ,EAAA,YAAAC,KAAA;QAEA,MAAAC,MAAA,SAAAV,QAAA,CAAAW,IAAA;QACA,IAAAD,MAAA,CAAAE,OAAA;UACA,KAAAf,QAAA,CAAAe,OAAA;QACA;UACA,UAAAH,KAAA,CAAAC,MAAA,CAAAG,OAAA;QACA;MACA,SAAAC,KAAA;QACA,KAAAjB,QAAA,CAAAiB,KAAA,mBAAAA,KAAA,CAAAD,OAAA;MACA;IACA;IAEAE,oBAAA;MACA,KAAAC,kBAAA;IACA;IAEAC,aAAA;MACA,KAAAC,KAAA,CAAAC,YAAA,CAAAC,QAAA,CAAAC,KAAA;QACA,IAAAA,KAAA;UACA,KAAAL,kBAAA;UACA,KAAAnB,QAAA,CAAAe,OAAA;QACA;MACA;IACA;IAEAI,mBAAA;MACA1B,YAAA,CAAAgC,OAAA,qBAAAlC,QAAA,CAAAC,WAAA;MACAC,YAAA,CAAAgC,OAAA,2BAAAlC,QAAA,CAAAI,iBAAA;MACAF,YAAA,CAAAgC,OAAA,0BAAAlC,QAAA,CAAAK,gBAAA;MACAH,YAAA,CAAAgC,OAAA,gCAAAlC,QAAA,CAAAM,sBAAA;IACA;IAEA,MAAA6B,kBAAA;MACA;QACA,MAAAC,QAAA,SAAAvC,WAAA,CAAAwC,MAAA;QACA,IAAAD,QAAA;UACA,KAAApC,QAAA,CAAAC,WAAA,GAAAmC,QAAA;UACA,KAAAR,kBAAA;QACA;MACA,SAAAF,KAAA;QACA,KAAAjB,QAAA,CAAAiB,KAAA,aAAAA,KAAA,CAAAD,OAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}