{"ast":null,"code":"export default {\n  name: 'StreamCheck',\n  data() {\n    return {\n      realIp: '',\n      // 存储真实IP地址\n      loading: false,\n      streamList: [],\n      importUrlDialogVisible: false,\n      importForm: {\n        url: '',\n        group: ''\n      },\n      importRules: {\n        url: [{\n          required: true,\n          message: '请输入URL地址',\n          trigger: 'blur'\n        }, {\n          type: 'url',\n          message: '请输入正确的URL地址',\n          trigger: 'blur'\n        }],\n        group: [{\n          required: true,\n          message: '请选择分组',\n          trigger: 'change'\n        }]\n      },\n      currentPage: 1,\n      pageSize: 5,\n      isChecking: false,\n      isPaused: false,\n      checkedCount: 0,\n      totalCount: 0,\n      pausedIndex: -1,\n      shouldStop: false,\n      isCollecting: false,\n      collectDialogVisible: false,\n      collectForm: {\n        urls: [''],\n        autoCollect: false,\n        collectType: 'daily',\n        executeTime: '09:00',\n        weekDay: '1'\n      },\n      collectRules: {\n        urls: [{\n          type: 'array',\n          validator: (rule, value, callback) => {\n            if (value.length === 0) {\n              callback(new Error('请至少添加一个采集地址'));\n            }\n            // 验证每个URL\n            const errors = value.map(url => {\n              if (!url) return '采集地址不能为空';\n              if (!/^https?:\\/\\/.+/.test(url)) return '请输入正确的URL地址';\n              return null;\n            }).filter(error => error !== null);\n            if (errors.length > 0) {\n              callback(new Error(errors[0]));\n            } else {\n              callback();\n            }\n          },\n          trigger: 'change'\n        }],\n        executeTime: [{\n          required: true,\n          message: '请选择执行时间',\n          trigger: 'change'\n        }],\n        weekDay: [{\n          required: true,\n          message: '请选择执行日期',\n          trigger: 'change'\n        }]\n      },\n      collectTimer: null,\n      generateLinkDialogVisible: false,\n      generatedLink: '',\n      previewContent: '',\n      // 新增预览内容\n      currentLinkId: '',\n      scheduleDialogVisible: false,\n      isScheduled: false,\n      scheduleForm: {\n        scheduleType: 'daily',\n        executeTime: '09:00',\n        weekDay: '1'\n      },\n      scheduleRules: {\n        executeTime: [{\n          required: true,\n          message: '请选择执行时间',\n          trigger: 'change'\n        }],\n        weekDay: [{\n          required: true,\n          message: '请选择执行日期',\n          trigger: 'change'\n        }]\n      },\n      scheduleTimer: null,\n      nextScheduleTime: null,\n      stateKey: 'streamCheckState',\n      // 用于本地存储的key\n      hasActiveOperations: false,\n      // 添加标记表示是否有动作在执行\n      linkForm: {\n        format: 'txt' // 默认txt格式\n      },\n      searchDialogVisible: false,\n      searchForm: {\n        name: '',\n        group: '',\n        status: ''\n      },\n      filteredList: [] // 用于存储搜索过滤后的列表\n    };\n  },\n  computed: {\n    paginatedData() {\n      // 使用过滤后的列表进行分页\n      const start = (this.currentPage - 1) * this.pageSize;\n      const end = start + this.pageSize;\n      return (this.filteredList.length > 0 ? this.filteredList : this.streamList).slice(start, end);\n    },\n    checkButtonText() {\n      if (!this.isChecking && !this.isPaused) {\n        return '批量检测';\n      }\n      return `检测中 ${this.checkedCount}/${this.totalCount}`;\n    },\n    mergedStreams() {\n      // 创建一个Map来存储合并后的直播源\n      const streamMap = new Map();\n\n      // 按照当前列表顺序处理每个直播源\n      this.streamList.forEach(stream => {\n        const key = stream.name; // 使用名称作为键\n\n        if (streamMap.has(key)) {\n          // 如果已存在相同名称的直播源，添加到URLs数组\n          const existing = streamMap.get(key);\n          if (!existing.urls.includes(stream.url)) {\n            existing.urls.push(stream.url);\n          }\n        } else {\n          // 如果是新的名称，创建新条目\n          streamMap.set(key, {\n            name: stream.name,\n            urls: [stream.url],\n            group: stream.group\n          });\n        }\n      });\n\n      // 转换回数组格式\n      return Array.from(streamMap.values());\n    },\n    groupOptions() {\n      return [...new Set(this.streamList.map(item => item.group))];\n    }\n  },\n  created() {\n    // 初始化时加载持久化的数据\n    if (localStorage.getItem('persistentData') === 'true') {\n      const savedList = localStorage.getItem('streamList');\n      if (savedList) {\n        this.streamList = JSON.parse(savedList);\n      }\n    }\n\n    // 监听保存事件\n    this.$root.$on('save-stream-list', this.saveStreamList);\n\n    // 从本地存储恢复状态\n    this.restoreState();\n    // 如果定时检测是开启状态，重新启动定时器\n    if (this.isScheduled) {\n      this.setupSchedule();\n    }\n    // 如果采集是开启状态，重新启动采集\n    if (this.isCollecting) {\n      this.startCollecting(true); // true表示是恢复状态\n    }\n    this.filteredList = [];\n  },\n  beforeDestroy() {\n    // 移除事件监听\n    this.$root.$off('save-stream-list', this.saveStreamList);\n    // 组件销毁前清除定时器\n    if (this.collectTimer) {\n      clearInterval(this.collectTimer);\n    }\n    // 组件销毁时清理定时器\n    this.stopScheduleCheck();\n    // 在组件销毁前保存状态\n    this.saveState();\n    window.removeEventListener('beforeunload', this.handleBeforeUnload);\n  },\n  async mounted() {\n    try {\n      const response = await fetch('http://localhost:8080/api/local-ip');\n      if (response.ok) {\n        const data = await response.json();\n        this.realIp = data.ip;\n      }\n    } catch (error) {\n      console.error('获取IP失败:', error);\n    }\n  },\n  methods: {\n    async checkStream(stream) {\n      const ffprobePath = localStorage.getItem('ffprobePath');\n      if (!ffprobePath) {\n        this.$message.error('请先在系统设置中配置FFprobe路径');\n        return false;\n      }\n      try {\n        const response = await fetch('http://localhost:8080/api/check-stream', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            url: stream.url,\n            ffprobePath: ffprobePath\n          })\n        });\n        if (!response.ok) throw new Error('请求失败');\n        const result = await response.json();\n\n        // 更新流信息\n        stream.status = result.available ? '正常' : '异常';\n        stream.resolution = result.resolution || '';\n        stream.responseTime = result.responseTime || 0;\n\n        // 检查是否需要自动清除\n        if (this.shouldRemoveStream(stream)) {\n          let reason = '';\n          if (stream.status === '异常') {\n            reason = '异常源';\n          } else if (stream.responseTime > 3000) {\n            reason = '响应时间过慢';\n          } else {\n            reason = '分辨率过低';\n          }\n\n          // 找到当前页的所有项\n          const currentPageItems = this.paginatedData;\n          // 找到要删除项在当前页的索引\n          const pageIndex = currentPageItems.indexOf(stream);\n          // 找到要删除项在整个列表中的索引\n          const listIndex = this.streamList.indexOf(stream);\n          if (listIndex > -1) {\n            this.streamList.splice(listIndex, 1);\n            // 如果删除的是当前页的最后一项，且不是第一页，则跳转到上一页\n            if (pageIndex === currentPageItems.length - 1 && this.currentPage > 1) {\n              this.currentPage--;\n            }\n            // 添加删除原因提示\n            this.$message.warning(`已自动清除直播源：${reason}`);\n          }\n        }\n        this.saveStreamList();\n        return result.available;\n      } catch (error) {\n        console.error('检测错误:', error);\n        stream.status = '异常';\n        return false;\n      }\n    },\n    async handleBatchCheck() {\n      if (this.isChecking) return;\n      const uncheckedStreams = this.streamList.filter(s => !this.isPaused || this.streamList.indexOf(s) > this.pausedIndex);\n      if (uncheckedStreams.length === 0) {\n        this.$message.info('没有需要检测的直播源');\n        return;\n      }\n      this.isChecking = true;\n      this.shouldStop = false;\n      this.totalCount = uncheckedStreams.length;\n      this.checkedCount = this.isPaused ? this.checkedCount : 0;\n\n      // 获取并发检测数量设置\n      const concurrentChecks = parseInt(localStorage.getItem('concurrentChecks')) || 3;\n      try {\n        // 从暂停的位置或开始位置继续检测\n        const startIndex = this.isPaused ? this.pausedIndex + 1 : 0;\n\n        // 使用并发检测\n        for (let i = startIndex; i < uncheckedStreams.length; i += concurrentChecks) {\n          if (this.shouldStop) break;\n\n          // 获取当前批次要检测的流\n          const batch = uncheckedStreams.slice(i, i + concurrentChecks);\n\n          // 并发检测当前批次的所有流\n          await Promise.all(batch.map(async stream => {\n            if (this.shouldStop) return;\n            stream.status = '检测中';\n            const success = await this.checkStream(stream);\n            this.checkedCount++;\n            if (success) {\n              this.saveState();\n            }\n          }));\n\n          // 更新暂停位置\n          this.pausedIndex = i + concurrentChecks - 1;\n        }\n        if (!this.shouldStop) {\n          this.isChecking = false;\n          this.isPaused = false;\n          this.pausedIndex = -1;\n          this.$message.success('批量检测完成');\n        }\n      } catch (error) {\n        console.error('批量检测错误:', error);\n        this.$message.error('批量检测失败');\n      } finally {\n        if (this.shouldStop) {\n          this.isChecking = false;\n          this.isPaused = true;\n          this.$message.info('检测已暂停');\n        }\n      }\n    },\n    pauseCheck() {\n      this.shouldStop = true;\n    },\n    async resumeCheck() {\n      if (this.pausedIndex >= 0) {\n        this.isChecking = true;\n        this.isPaused = false;\n        this.shouldStop = false;\n        await this.batchCheck(this.pausedIndex);\n      }\n    },\n    async handleCheck(row) {\n      row.status = '检测中';\n      const success = await this.checkStream(row);\n      this.$message[success ? 'success' : 'error'](`检测${success ? '成功' : '失败'}: ${row.name}`);\n    },\n    handleDelete(row) {\n      this.$confirm('确认删除该直播源?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        const index = this.streamList.indexOf(row);\n        this.streamList.splice(index, 1);\n        const maxPage = Math.ceil(this.streamList.length / this.pageSize);\n        if (this.currentPage > maxPage) {\n          this.currentPage = Math.max(maxPage, 1);\n        }\n        this.saveStreamList(); // 保存更新后的列表\n        this.$message.success('删除成功');\n      }).catch(() => {});\n    },\n    async handleUrlImport() {\n      const valid = await this.$refs.importForm.validate();\n      if (!valid) return;\n      try {\n        // 先发送请求到后端，让后端去获取文件内容\n        const response = await fetch('http://localhost:8080/api/import-url', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            url: this.importForm.url\n          })\n        });\n        if (!response.ok) throw new Error('导入失败');\n        const content = await response.text();\n        const newStreams = this.parseContent(content);\n        if (newStreams.length > 0) {\n          // 过滤重复的直播源\n          const existingUrls = new Set(this.streamList.map(s => s.url));\n          const uniqueStreams = newStreams.filter(s => !existingUrls.has(s.url));\n          if (uniqueStreams.length > 0) {\n            this.streamList.push(...uniqueStreams);\n            this.$message.success(`成功导入 ${uniqueStreams.length} 个直播源`);\n            this.importUrlDialogVisible = false;\n          } else {\n            this.$message.info('没有新的直播源可以导入');\n          }\n        } else {\n          this.$message.warning('未找到有效的直播源');\n        }\n      } catch (error) {\n        this.$message.error('导入失败：' + error.message);\n      }\n    },\n    readFile(file) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = e => resolve(e.target.result);\n        reader.onerror = () => reject(new Error('文件读取失败'));\n        reader.readAsText(file);\n      });\n    },\n    parseContent(content) {\n      const lines = content.split('\\n');\n      const streams = [];\n      let currentGroup = '未分组';\n\n      // 检测是否是 m3u 格式\n      if (content.includes('#EXTM3U')) {\n        let currentName = '';\n        let currentGroupTitle = '';\n        lines.forEach(line => {\n          line = line.trim();\n          if (!line) return;\n          if (line.startsWith('#EXTINF:')) {\n            // 尝试不同的名称提取方式\n            let name = '';\n\n            // 1. 尝试提取 tvg-name 属性\n            const tvgNameMatch = line.match(/tvg-name=\"([^\"]+)\"/i);\n            if (tvgNameMatch) {\n              name = tvgNameMatch[1].trim();\n            }\n\n            // 2. 如果没有 tvg-name，尝试提取最后的逗号后的名称\n            if (!name) {\n              const lastCommaIndex = line.lastIndexOf(',');\n              if (lastCommaIndex !== -1) {\n                name = line.substring(lastCommaIndex + 1).trim();\n              }\n            }\n\n            // 3. 如果还是没有名称，尝试提取 tvg-id\n            if (!name) {\n              const tvgIdMatch = line.match(/tvg-id=\"([^\"]+)\"/i);\n              if (tvgIdMatch) {\n                name = tvgIdMatch[1].trim();\n              } else {\n                // 3.1 尝试提取不带引号的 tvg-id\n                const tvgIdNoQuoteMatch = line.match(/tvg-id=([^,\\s]+)/i);\n                if (tvgIdNoQuoteMatch) {\n                  name = tvgIdNoQuoteMatch[1].trim();\n                }\n              }\n            }\n            currentName = name || '未命名';\n\n            // 提取分组信息\n            // 1. 先尝试带引号的 group-title\n            const groupMatch = line.match(/group-title=\"([^\"]+)\"/i);\n            if (groupMatch) {\n              currentGroupTitle = groupMatch[1].trim();\n            } else {\n              // 2. 尝试不带引号的 group-title\n              const groupNoQuoteMatch = line.match(/group-title=([^,\\s]+)/i);\n              if (groupNoQuoteMatch) {\n                currentGroupTitle = groupNoQuoteMatch[1].trim();\n              }\n            }\n          } else if (!line.startsWith('#') && line.trim()) {\n            // 这是一个媒体URL行\n            if (currentName) {\n              streams.push({\n                name: currentName,\n                url: line.trim(),\n                group: currentGroupTitle || currentGroup,\n                status: '未检测',\n                resolution: '',\n                responseTime: 0\n              });\n            }\n            currentName = ''; // 重置当前名称\n          }\n        });\n      } else {\n        // txt 格式处理\n        lines.forEach(line => {\n          line = line.trim();\n          if (!line) return;\n\n          // 检查是否是分组标记\n          if (line.endsWith(',#genre#')) {\n            currentGroup = line.replace(',#genre#', '');\n            return;\n          }\n\n          // 解析直播源行\n          const [name, urls] = line.split(',');\n          if (!name || !urls) return;\n\n          // 检查是否包含多个URL（用#分隔）\n          const urlList = urls.split('#');\n\n          // 为每个URL创建一个新的直播源条目\n          urlList.forEach(url => {\n            if (url && url.trim()) {\n              streams.push({\n                name: name,\n                url: url.trim(),\n                group: currentGroup,\n                status: '未检测',\n                resolution: '',\n                responseTime: 0\n              });\n            }\n          });\n        });\n      }\n      return streams;\n    },\n    addStreamsToList(streams) {\n      streams.forEach(stream => {\n        this.streamList.push(stream);\n      });\n      this.currentPage = 1;\n      this.saveStreamList(); // 保存更新后的列表\n    },\n    handleSizeChange(val) {\n      this.pageSize = val;\n      // 当每页条数改变时，重置当前页为第一页\n      this.currentPage = 1;\n    },\n    handleCurrentChange(val) {\n      this.currentPage = val;\n    },\n    async handleFileUpload(event) {\n      const file = event.target.files[0];\n      if (!file) return;\n      try {\n        const content = await this.readFile(file);\n        const newStreams = this.parseContent(content);\n        if (newStreams.length > 0) {\n          // 过滤重复的直播源\n          const existingUrls = new Set(this.streamList.map(s => s.url));\n          const uniqueStreams = newStreams.filter(s => !existingUrls.has(s.url));\n          if (uniqueStreams.length > 0) {\n            this.streamList.push(...uniqueStreams);\n            this.$message.success(`成功导入 ${uniqueStreams.length} 个直播源`);\n          } else {\n            this.$message.info('没有新的直播源可以导入');\n          }\n        } else {\n          this.$message.warning('未找到有效的直播源');\n        }\n      } catch (error) {\n        this.$message.error('文件读取失败：' + error.message);\n      } finally {\n        // 清除文件输入，允许重复选择同一文件\n        event.target.value = '';\n      }\n    },\n    getGroupFromFileName(filename) {\n      // 从文件名中提取可能的分组名\n      const name = filename.toLowerCase();\n      if (name.includes('cctv')) return 'CCTV';\n      if (name.includes('卫视')) return '卫视';\n      if (name.includes('地方')) return '地方台';\n      return '未分组';\n    },\n    handleClearList() {\n      if (this.streamList.length === 0) {\n        this.$message.warning('列表已经为空');\n        return;\n      }\n      this.$confirm('确认清空所有直播源?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        this.streamList = [];\n        this.currentPage = 1;\n        this.saveStreamList(); // 保存更新后的列表\n        this.$message.success('列表已清空');\n      }).catch(() => {});\n    },\n    handleCopy(row) {\n      // 创建一个临时输入框来实现复制功能\n      const textarea = document.createElement('textarea');\n      textarea.value = row.url;\n      document.body.appendChild(textarea);\n      textarea.select();\n      try {\n        document.execCommand('copy');\n        this.$message.success('链接已复制到剪贴板');\n      } catch (err) {\n        this.$message.error('复制失败');\n      } finally {\n        document.body.removeChild(textarea);\n      }\n    },\n    shouldRemoveStream(stream) {\n      // 检查是否需要清除异常源\n      if (localStorage.getItem('autoRemoveInvalid') === 'true' && stream.status === '异常') {\n        return true;\n      }\n\n      // 获取模式设置\n      const extremeMode = localStorage.getItem('extremeMode') === 'true';\n      const strictMode = localStorage.getItem('strictMode') === 'true';\n\n      // 检查是否需要清除低分辨率源\n      if (localStorage.getItem('autoRemoveLowRes') === 'true' && stream.resolution !== '未知') {\n        const [width, height] = stream.resolution.split('x').map(Number);\n        if (extremeMode ? width < 1920 || height < 1080 : strictMode ? width < 1920 || height < 1080 : width < 1280 || height < 720) {\n          return true;\n        }\n      }\n\n      // 检查响应时间\n      if (localStorage.getItem('autoRemoveSlowResponse') === 'true' && stream.responseTime > (extremeMode ? 1500 : strictMode ? 2000 : 3000)) {\n        return true;\n      }\n      return false;\n    },\n    saveStreamList() {\n      if (localStorage.getItem('persistentData') === 'true') {\n        localStorage.setItem('streamList', JSON.stringify(this.streamList));\n      }\n    },\n    handleCollectMode() {\n      if (this.isCollecting) {\n        this.stopCollecting();\n      } else {\n        this.collectDialogVisible = true;\n      }\n    },\n    async startCollecting(isRestore = false) {\n      if (!isRestore) {\n        // 确保 urls 是数组\n        if (!Array.isArray(this.collectForm.urls)) {\n          this.$set(this.collectForm, 'urls', ['']);\n          return;\n        }\n        const valid = await this.$refs.collectForm.validate();\n        if (!valid) return;\n      }\n      this.collectDialogVisible = false;\n      this.isCollecting = true;\n      this.saveState(); // 保存状态\n\n      // 立即执行一次采集\n      await this.collect();\n\n      // 如果开启了自动采集，设置定时器\n      if (this.collectForm.autoCollect) {\n        this.setupCollectSchedule();\n      } else {\n        // 单次采集完成后停止\n        this.isCollecting = false;\n        this.saveState();\n      }\n    },\n    stopCollecting() {\n      this.isCollecting = false;\n      if (this.collectTimer) {\n        clearInterval(this.collectTimer);\n        this.collectTimer = null;\n      }\n      this.saveState(); // 保存状态\n      // 只有在自动采集模式下才显示停止提示\n      if (this.collectForm.autoCollect) {\n        this.$message.success('已停止采集');\n      }\n    },\n    async collect() {\n      try {\n        // 检查是否有检测正在进行\n        if (this.isChecking) {\n          this.$message.warning('检测正在进行中，暂时跳过本次采集');\n          return;\n        }\n        this.$message.info('开始采集直播源...');\n\n        // 并发采集所有地址\n        const results = await Promise.allSettled(this.collectForm.urls.map(async url => {\n          try {\n            const response = await fetch(url);\n            if (!response.ok) throw new Error(`采集失败: ${url}`);\n            const content = await response.text();\n            const newStreams = this.parseContent(content);\n\n            // 过滤重复的直播源，同时考虑正在检测的源\n            const existingUrls = new Set(this.streamList.map(s => s.url));\n            return newStreams.filter(s => {\n              // 如果源已存在且正在检测中，保留原有状态\n              const existingStream = this.streamList.find(es => es.url === s.url);\n              if (existingStream && existingStream.status === '检测中') {\n                return false;\n              }\n              return !existingUrls.has(s.url);\n            });\n          } catch (error) {\n            console.error(`采集地址 ${url} 失败:`, error);\n            return [];\n          }\n        }));\n\n        // 合并所有采集结果\n        const allNewStreams = results.filter(result => result.status === 'fulfilled').flatMap(result => result.value).filter((stream, index, self) => index === self.findIndex(s => s.url === stream.url));\n\n        // 添加新的直播源到列表\n        if (allNewStreams.length > 0) {\n          this.addStreamsToList(allNewStreams);\n          this.$message.success(`采集成功: 新增${allNewStreams.length}个直播源`);\n        } else {\n          this.$message.info('未发现新的直播源');\n        }\n\n        // 统计失败的地址\n        const failedUrls = results.filter(result => result.status === 'rejected').length;\n        if (failedUrls > 0) {\n          this.$message.warning(`${failedUrls}个地址采集失败`);\n        }\n      } catch (error) {\n        this.$message.error('采集失败：' + error.message);\n        if (!this.collectForm.autoCollect) {\n          this.stopCollecting();\n        }\n      }\n    },\n    async handleGenerateLink() {\n      this.generateLinkDialogVisible = true;\n      try {\n        // 先生成 TXT 格式链接\n        const txtResponse = await fetch('http://localhost:8080/api/generate-link', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain',\n            'X-File-Format': 'txt'\n          },\n          body: this.generateContent('txt')\n        });\n\n        // 再生成 M3U 格式链接\n        const m3uResponse = await fetch('http://localhost:8080/api/generate-link', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain',\n            'X-File-Format': 'm3u'\n          },\n          body: this.generateContent('m3u')\n        });\n        if (txtResponse.ok && m3uResponse.ok) {\n          const txtLink = await txtResponse.text();\n          const m3uLink = await m3uResponse.text();\n\n          // 根据当前选择的格式显示对应的链接\n          this.generatedLinks = {\n            txt: txtLink,\n            m3u: m3uLink\n          };\n          this.generatedLink = this.generatedLinks[this.linkForm.format];\n        }\n      } catch (error) {\n        console.error('生成链接失败：', error);\n        this.$message.error('生成链接失败');\n      }\n    },\n    generateContent(format) {\n      return format === 'txt' ? this.generateTxtContent() : this.generateM3uContent();\n    },\n    generateTxtContent() {\n      let content = '';\n      let currentGroup = '';\n      this.mergedStreams.forEach(stream => {\n        if (stream.group !== currentGroup) {\n          currentGroup = stream.group;\n          content += `${currentGroup},#genre#\\n`;\n        }\n        content += `${stream.name},${stream.urls.join('#')}\\n`;\n      });\n      return content.trim();\n    },\n    generateM3uContent() {\n      let content = '#EXTM3U\\n';\n      let currentGroup = '';\n      this.mergedStreams.forEach(stream => {\n        if (stream.group !== currentGroup) {\n          currentGroup = stream.group;\n          content += `\\n#EXTINF:-1 group-title=\"${currentGroup}\"\\n`;\n        }\n        // 对于多个URL，创建多个条目\n        stream.urls.forEach(url => {\n          content += `#EXTINF:-1,${stream.name}\\n${url}\\n`;\n        });\n      });\n      return content.trim();\n    },\n    copyGeneratedLink() {\n      const textarea = document.createElement('textarea');\n      textarea.value = this.generatedLink;\n      document.body.appendChild(textarea);\n      textarea.select();\n      try {\n        document.execCommand('copy');\n        this.$message.success('链接已复制到剪贴板');\n      } catch (err) {\n        this.$message.error('复制失败');\n      } finally {\n        document.body.removeChild(textarea);\n      }\n    },\n    downloadTxtFile() {\n      const blob = new Blob([this.generatedLink], {\n        type: 'text/plain;charset=utf-8'\n      });\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `直播源列表_${new Date().toLocaleDateString()}.txt`;\n      document.body.appendChild(link);\n      link.click();\n\n      // 清理\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(link);\n      this.$message.success('文件下载成功');\n    },\n    // 修改更新链接内容的方法\n    async updateLinkContent() {\n      try {\n        // 更新 TXT 格式内容\n        await fetch('http://localhost:8080/api/update-content', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain',\n            'X-File-Format': 'txt'\n          },\n          body: this.generateContent('txt')\n        });\n\n        // 更新 M3U 格式内容\n        await fetch('http://localhost:8080/api/update-content', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain',\n            'X-File-Format': 'm3u'\n          },\n          body: this.generateContent('m3u')\n        });\n      } catch (error) {\n        console.error('更新链接内容失败：', error);\n      }\n    },\n    handleScheduleCheck() {\n      if (this.isScheduled) {\n        this.stopScheduleCheck();\n      } else {\n        this.scheduleDialogVisible = true;\n      }\n    },\n    startScheduleCheck() {\n      this.$refs.scheduleForm.validate(valid => {\n        if (valid) {\n          this.scheduleDialogVisible = false;\n          this.isScheduled = true;\n          this.setupSchedule();\n          this.saveState(); // 保存状态\n          this.$message.success('定时检测已开启');\n        }\n      });\n    },\n    stopScheduleCheck() {\n      if (this.scheduleTimer) {\n        clearInterval(this.scheduleTimer);\n        this.scheduleTimer = null;\n      }\n      this.isScheduled = false;\n      this.nextScheduleTime = null;\n      this.saveState(); // 保存状态\n      this.$message.success('定时检测已停止');\n    },\n    setupSchedule() {\n      // 清除现有定时器\n      if (this.scheduleTimer) {\n        clearInterval(this.scheduleTimer);\n      }\n\n      // 设置每分钟检查一次\n      this.scheduleTimer = setInterval(() => {\n        const now = new Date();\n        const [hours, minutes] = this.scheduleForm.executeTime.split(':').map(Number);\n\n        // 如果当前正在检测中，跳过这次执行\n        if (this.isChecking) {\n          return;\n        }\n\n        // 检查是否到达执行时间\n        const currentHours = now.getHours();\n        const currentMinutes = now.getMinutes();\n        const currentSeconds = now.getSeconds();\n\n        // 只在每分钟的第0秒执行\n        if (currentHours === hours && currentMinutes === minutes && currentSeconds === 0) {\n          // 如果是每周模式，还需要检查是否是指定的星期几\n          if (this.scheduleForm.scheduleType === 'weekly') {\n            if (now.getDay().toString() === this.scheduleForm.weekDay) {\n              this.handleBatchCheck();\n            }\n          } else {\n            // 每天模式，直接执行\n            this.handleBatchCheck();\n          }\n        }\n      }, 1000); // 每秒检查一次\n    },\n    // 保存当前状态到本地存储\n    saveState() {\n      // 只保存基础数据和设置，不保存运行状态\n      const state = {\n        streamList: this.streamList,\n        currentPage: this.currentPage,\n        pageSize: this.pageSize,\n        scheduleForm: this.scheduleForm,\n        collectForm: this.collectForm\n      };\n      localStorage.setItem(this.stateKey, JSON.stringify(state));\n    },\n    // 从本地存储恢复状态\n    restoreState() {\n      try {\n        const savedState = localStorage.getItem(this.stateKey);\n        if (savedState) {\n          const state = JSON.parse(savedState);\n\n          // 只恢复基础数据和设置\n          this.streamList = state.streamList || [];\n          this.currentPage = state.currentPage || 1;\n          this.pageSize = state.pageSize || 5;\n          this.scheduleForm = state.scheduleForm || this.scheduleForm;\n          this.collectForm = state.collectForm || this.collectForm;\n\n          // 重置所有运行状态\n          this.isChecking = false;\n          this.isPaused = false;\n          this.isScheduled = false;\n          this.isCollecting = false;\n          this.checkedCount = 0;\n          this.totalCount = 0;\n          this.pausedIndex = -1;\n          this.nextScheduleTime = null;\n        }\n      } catch (error) {\n        console.error('恢复状态失败：', error);\n      }\n    },\n    // 添加重置所有运行状态的方法\n    resetAllStates() {\n      // 停止定时检测\n      if (this.isScheduled) {\n        this.stopScheduleCheck();\n      }\n\n      // 停止采集\n      if (this.isCollecting) {\n        this.stopCollecting();\n      }\n\n      // 停止批量检测\n      if (this.isChecking) {\n        this.shouldStop = true;\n        this.isChecking = false;\n        this.isPaused = false;\n      }\n\n      // 重置所有状态\n      this.isChecking = false;\n      this.isPaused = false;\n      this.isScheduled = false;\n      this.isCollecting = false;\n      this.checkedCount = 0;\n      this.totalCount = 0;\n      this.pausedIndex = -1;\n      this.nextScheduleTime = null;\n\n      // 清除所有定时器\n      if (this.scheduleTimer) {\n        clearInterval(this.scheduleTimer);\n        this.scheduleTimer = null;\n      }\n      if (this.collectTimer) {\n        clearInterval(this.collectTimer);\n        this.collectTimer = null;\n      }\n\n      // 保存重置后的状态\n      this.saveState();\n      this.$message.success('所有运行状态已重置');\n    },\n    // 更新活动状态\n    updateActiveStatus() {\n      const hasActive = this.isChecking || this.isCollecting || this.isScheduled;\n      if (this.hasActiveOperations !== hasActive) {\n        this.hasActiveOperations = hasActive;\n        if (hasActive) {\n          // 添加刷新拦截\n          window.addEventListener('beforeunload', this.handleBeforeUnload);\n        } else {\n          // 移除刷新拦截\n          window.removeEventListener('beforeunload', this.handleBeforeUnload);\n        }\n      }\n    },\n    // 处理页面刷新\n    handleBeforeUnload(e) {\n      if (this.hasActiveOperations) {\n        const message = '有正在执行的操作，确定要离开吗？';\n        e.preventDefault();\n        e.returnValue = message;\n        return message;\n      }\n    },\n    addCollectUrl() {\n      if (!Array.isArray(this.collectForm.urls)) {\n        // 如果 urls 不是数组，先初始化它\n        this.$set(this.collectForm, 'urls', ['']);\n      } else {\n        this.collectForm.urls.push('');\n      }\n    },\n    removeCollectUrl(index) {\n      if (Array.isArray(this.collectForm.urls) && this.collectForm.urls.length > 1) {\n        this.collectForm.urls.splice(index, 1);\n      }\n    },\n    // 添加判断分辨率标签类型的方法\n    getResolutionTagType(resolution) {\n      if (!resolution || resolution === '未知') return 'info';\n      const [width] = resolution.split('x').map(Number);\n      if (width >= 1920) return 'success';\n      if (width >= 1280) return ''; // 默认类型\n      return 'warning';\n    },\n    // 添加判断响应时间标签类型的方法\n    getResponseTimeTagType(responseTime) {\n      if (!responseTime) return 'info';\n      if (responseTime <= 1000) return 'success';\n      if (responseTime <= 2000) return ''; // 默认类型\n      if (responseTime <= 3000) return 'warning';\n      return 'danger';\n    },\n    setupCollectSchedule() {\n      // 清除现有定时器\n      if (this.collectTimer) {\n        clearInterval(this.collectTimer);\n      }\n\n      // 设置每分钟检查一次\n      this.collectTimer = setInterval(() => {\n        const now = new Date();\n        const [hours, minutes] = this.collectForm.executeTime.split(':').map(Number);\n\n        // 检查是否到达执行时间\n        const currentHours = now.getHours();\n        const currentMinutes = now.getMinutes();\n        const currentSeconds = now.getSeconds();\n\n        // 只在每分钟的第0秒执行\n        if (currentHours === hours && currentMinutes === minutes && currentSeconds === 0) {\n          // 如果是每周模式，还需要检查是否是指定的星期几\n          if (this.collectForm.collectType === 'weekly') {\n            if (now.getDay().toString() === this.collectForm.weekDay) {\n              this.collect();\n            }\n          } else {\n            // 每天模式，直接执行\n            this.collect();\n          }\n        }\n      }, 1000); // 每秒检查一次\n    },\n    handleSearch() {\n      this.filteredList = this.streamList.filter(item => {\n        const nameMatch = !this.searchForm.name || item.name.toLowerCase().includes(this.searchForm.name.toLowerCase());\n        const groupMatch = !this.searchForm.group || item.group === this.searchForm.group;\n        const statusMatch = !this.searchForm.status || item.status === this.searchForm.status;\n        return nameMatch && groupMatch && statusMatch;\n      });\n\n      // 重置到第一页\n      this.currentPage = 1;\n      this.searchDialogVisible = false;\n    },\n    resetSearch() {\n      this.searchForm = {\n        name: '',\n        group: '',\n        status: ''\n      };\n      this.filteredList = [];\n      this.currentPage = 1;\n    }\n  },\n  watch: {\n    // 只监听数据变化\n    streamList: {\n      handler() {\n        this.updateLinkContent();\n        this.saveState();\n      },\n      deep: true\n    },\n    currentPage() {\n      this.saveState();\n    },\n    pageSize() {\n      this.saveState();\n    },\n    // 监听所有可能的运行状态\n    isChecking() {\n      this.updateActiveStatus();\n    },\n    isCollecting() {\n      this.updateActiveStatus();\n    },\n    isScheduled() {\n      this.updateActiveStatus();\n    },\n    // 添加格式变化监听\n    'linkForm.format'() {\n      if (this.generateLinkDialogVisible) {\n        this.handleGenerateLink();\n      }\n    }\n  },\n  // 组件被激活时（重新显示）\n  activated() {\n    // 如果有定时任务，恢复定时器\n    if (this.isScheduled) {\n      this.setupSchedule();\n    }\n    // 如果有采集任务，恢复采集\n    if (this.isCollecting) {\n      this.startCollecting(true);\n    }\n  },\n  // 组件被停用时（离开但不销毁）\n  deactivated() {\n    // 暂停定时器，但保持状态标志\n    if (this.scheduleTimer) {\n      clearInterval(this.scheduleTimer);\n      this.scheduleTimer = null;\n    }\n    // 暂停采集定时器，但保持状态标志\n    if (this.collectTimer) {\n      clearInterval(this.collectTimer);\n      this.collectTimer = null;\n    }\n  }\n};","map":{"version":3,"names":["name","data","realIp","loading","streamList","importUrlDialogVisible","importForm","url","group","importRules","required","message","trigger","type","currentPage","pageSize","isChecking","isPaused","checkedCount","totalCount","pausedIndex","shouldStop","isCollecting","collectDialogVisible","collectForm","urls","autoCollect","collectType","executeTime","weekDay","collectRules","validator","rule","value","callback","length","Error","errors","map","test","filter","error","collectTimer","generateLinkDialogVisible","generatedLink","previewContent","currentLinkId","scheduleDialogVisible","isScheduled","scheduleForm","scheduleType","scheduleRules","scheduleTimer","nextScheduleTime","stateKey","hasActiveOperations","linkForm","format","searchDialogVisible","searchForm","status","filteredList","computed","paginatedData","start","end","slice","checkButtonText","mergedStreams","streamMap","Map","forEach","stream","key","has","existing","get","includes","push","set","Array","from","values","groupOptions","Set","item","created","localStorage","getItem","savedList","JSON","parse","$root","$on","saveStreamList","restoreState","setupSchedule","startCollecting","beforeDestroy","$off","clearInterval","stopScheduleCheck","saveState","window","removeEventListener","handleBeforeUnload","mounted","response","fetch","ok","json","ip","console","methods","checkStream","ffprobePath","$message","method","headers","body","stringify","result","available","resolution","responseTime","shouldRemoveStream","reason","currentPageItems","pageIndex","indexOf","listIndex","splice","warning","handleBatchCheck","uncheckedStreams","s","info","concurrentChecks","parseInt","startIndex","i","batch","Promise","all","success","pauseCheck","resumeCheck","batchCheck","handleCheck","row","handleDelete","$confirm","confirmButtonText","cancelButtonText","then","index","maxPage","Math","ceil","max","catch","handleUrlImport","valid","$refs","validate","content","text","newStreams","parseContent","existingUrls","uniqueStreams","readFile","file","resolve","reject","reader","FileReader","onload","e","target","onerror","readAsText","lines","split","streams","currentGroup","currentName","currentGroupTitle","line","trim","startsWith","tvgNameMatch","match","lastCommaIndex","lastIndexOf","substring","tvgIdMatch","tvgIdNoQuoteMatch","groupMatch","groupNoQuoteMatch","endsWith","replace","urlList","addStreamsToList","handleSizeChange","val","handleCurrentChange","handleFileUpload","event","files","getGroupFromFileName","filename","toLowerCase","handleClearList","handleCopy","textarea","document","createElement","appendChild","select","execCommand","err","removeChild","extremeMode","strictMode","width","height","Number","setItem","handleCollectMode","stopCollecting","isRestore","isArray","$set","collect","setupCollectSchedule","results","allSettled","existingStream","find","es","allNewStreams","flatMap","self","findIndex","failedUrls","handleGenerateLink","txtResponse","generateContent","m3uResponse","txtLink","m3uLink","generatedLinks","txt","m3u","generateTxtContent","generateM3uContent","join","copyGeneratedLink","downloadTxtFile","blob","Blob","URL","createObjectURL","link","href","download","Date","toLocaleDateString","click","revokeObjectURL","updateLinkContent","handleScheduleCheck","startScheduleCheck","setInterval","now","hours","minutes","currentHours","getHours","currentMinutes","getMinutes","currentSeconds","getSeconds","getDay","toString","state","savedState","resetAllStates","updateActiveStatus","hasActive","addEventListener","preventDefault","returnValue","addCollectUrl","removeCollectUrl","getResolutionTagType","getResponseTimeTagType","handleSearch","nameMatch","statusMatch","resetSearch","watch","handler","deep","linkForm.format","activated","deactivated"],"sources":["src/components/StreamCheck.vue"],"sourcesContent":["<template>\n  <div class=\"stream-check\">\n\n    <div class=\"table-operations\">\n      <el-button-group>\n        <el-button\n            type=\"primary\"\n            icon=\"el-icon-upload2\"\n            @click=\"$refs.fileInput.click()\"\n            :disabled=\"isCollecting\">\n          导入本地文件\n        </el-button>\n        <el-button\n            type=\"primary\"\n            icon=\"el-icon-download\"\n            @click=\"importUrlDialogVisible = true\"\n            :disabled=\"isCollecting\">\n          导入网络文件\n        </el-button>\n      </el-button-group>\n\n      <el-button-group>\n        <el-button\n            type=\"success\"\n            icon=\"el-icon-refresh\"\n            @click=\"handleBatchCheck\"\n            :loading=\"isChecking\">\n          {{ checkButtonText }}\n        </el-button>\n        <el-button\n            v-if=\"isChecking\"\n            type=\"warning\"\n            icon=\"el-icon-video-pause\"\n            @click=\"pauseCheck\">\n          暂停检测\n        </el-button>\n        <el-button\n            v-if=\"isPaused\"\n            type=\"primary\"\n            icon=\"el-icon-video-play\"\n            @click=\"resumeCheck\">\n          继续检测\n        </el-button>\n        <el-button\n            type=\"danger\"\n            icon=\"el-icon-delete\"\n            @click=\"handleClearList\">\n          清空列表\n        </el-button>\n      </el-button-group>\n\n      <el-button-group>\n        <el-button\n            :type=\"isCollecting ? 'danger' : 'primary'\"\n            icon=\"el-icon-connection\"\n            @click=\"handleCollectMode\">\n          {{ isCollecting ? '停止采集' : '采集模式' }}\n        </el-button>\n      </el-button-group>\n\n      <el-button-group>\n        <el-button\n            type=\"primary\"\n            icon=\"el-icon-link\"\n            @click=\"handleGenerateLink\">\n          生成链接\n        </el-button>\n      </el-button-group>\n\n      <el-button-group>\n        <el-button\n            :type=\"isScheduled ? 'danger' : 'primary'\"\n            icon=\"el-icon-timer\"\n            @click=\"handleScheduleCheck\">\n          {{ isScheduled ? '停止定时' : '定时检测' }}\n        </el-button>\n      </el-button-group>\n\n      <el-button-group>\n        <el-button\n            :type=\"filteredList.length > 0 ? 'danger' : 'primary'\"\n            icon=\"el-icon-search\"\n            @click=\"filteredList.length > 0 ? resetSearch() : searchDialogVisible = true\">\n          {{ filteredList.length > 0 ? '重置' : '搜索' }}\n        </el-button>\n      </el-button-group>\n\n      <!-- 隐藏的文件输入框 -->\n      <input\n          type=\"file\"\n          ref=\"fileInput\"\n          style=\"display: none\"\n          accept=\".txt,.m3u,.m3u8\"\n          @change=\"handleFileUpload\"\n      >\n    </div>\n\n    <el-table\n        :data=\"paginatedData\"\n        border\n        style=\"width: 100%\">\n      <el-table-column\n          prop=\"name\"\n          label=\"名称\"\n          min-width=\"120\"\n          align=\"center\">\n      </el-table-column>\n\n      <el-table-column\n          prop=\"url\"\n          label=\"链接\"\n          min-width=\"200\"\n          align=\"center\"\n          show-overflow-tooltip>\n      </el-table-column>\n\n      <el-table-column\n          prop=\"resolution\"\n          label=\"分辨率\"\n          width=\"120\"\n          align=\"center\">\n        <template slot-scope=\"scope\">\n          <el-tag\n              :type=\"getResolutionTagType(scope.row.resolution)\">\n            {{ scope.row.resolution || '未知' }}\n          </el-tag>\n        </template>\n      </el-table-column>\n\n      <el-table-column\n          prop=\"responseTime\"\n          label=\"响应速度\"\n          width=\"120\"\n          align=\"center\">\n        <template slot-scope=\"scope\">\n          <el-tag\n              :type=\"getResponseTimeTagType(scope.row.responseTime)\">\n            {{ scope.row.responseTime }}ms\n          </el-tag>\n        </template>\n      </el-table-column>\n\n      <el-table-column\n          prop=\"group\"\n          label=\"分组\"\n          width=\"120\"\n          align=\"center\">\n        <template slot-scope=\"scope\">\n          <el-tag\n              type=\"info\">\n            {{ scope.row.group }}\n          </el-tag>\n        </template>\n      </el-table-column>\n\n      <el-table-column\n          prop=\"status\"\n          label=\"状态\"\n          width=\"100\"\n          align=\"center\">\n        <template slot-scope=\"scope\">\n          <el-tag :type=\"scope.row.status === '正常' ? 'success' : 'danger'\">\n            {{ scope.row.status }}\n          </el-tag>\n        </template>\n      </el-table-column>\n\n      <el-table-column\n          label=\"操作\"\n          width=\"120\"\n          align=\"center\"\n          fixed=\"right\">\n        <template slot-scope=\"scope\">\n          <el-tooltip content=\"复制链接\" placement=\"top\">\n            <el-button\n                type=\"text\"\n                icon=\"el-icon-document-copy\"\n                @click=\"handleCopy(scope.row)\">\n            </el-button>\n          </el-tooltip>\n          <el-tooltip content=\"删除\" placement=\"top\">\n            <el-button\n                type=\"text\"\n                class=\"delete-btn\"\n                icon=\"el-icon-delete\"\n                @click=\"handleDelete(scope.row)\">\n            </el-button>\n          </el-tooltip>\n        </template>\n      </el-table-column>\n    </el-table>\n\n    <!-- 添加分页组件 -->\n    <div class=\"pagination-container\">\n      <el-pagination\n          @size-change=\"handleSizeChange\"\n          @current-change=\"handleCurrentChange\"\n          :current-page=\"currentPage\"\n          :page-sizes=\"[5, 10, 20, 50]\"\n          :page-size=\"pageSize\"\n          layout=\"total, sizes, prev, pager, next, jumper\"\n          :total=\"filteredList.length || streamList.length\">\n      </el-pagination>\n    </div>\n\n    <!-- 添加/编辑对话框 -->\n    <el-dialog\n        title=\"导入网络文件\"\n        :visible.sync=\"importUrlDialogVisible\"\n        width=\"500px\">\n      <el-form :model=\"importForm\" label-width=\"80px\" ref=\"importForm\" :rules=\"importRules\">\n        <el-form-item label=\"URL地址\" prop=\"url\">\n          <el-input\n              v-model=\"importForm.url\"\n              placeholder=\"请输入txt或m3u文件的网络地址\"\n          ></el-input>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\">\n        <el-button @click=\"importUrlDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"handleUrlImport\">导 入</el-button>\n      </div>\n    </el-dialog>\n\n    <!-- 采集模式设置对话框 -->\n    <el-dialog\n        title=\"采集模式设置\"\n        :visible.sync=\"collectDialogVisible\"\n        width=\"500px\">\n      <el-form :model=\"collectForm\" label-width=\"100px\" ref=\"collectForm\" :rules=\"collectRules\">\n        <!-- 采集地址列表 -->\n        <el-form-item\n            v-for=\"(url, index) in collectForm.urls\"\n            :key=\"index\"\n            :label=\"index === 0 ? '采集地址' : ''\"\n            :prop=\"'urls.' + index\">\n          <el-input\n              v-model=\"collectForm.urls[index]\"\n              placeholder=\"请输入需要采集的网络地址\">\n            <template slot=\"append\">\n              <el-button\n                  icon=\"el-icon-delete\"\n                  @click=\"removeCollectUrl(index)\"\n                  v-if=\"collectForm.urls.length > 1\">\n              </el-button>\n            </template>\n          </el-input>\n        </el-form-item>\n\n        <!-- 添加地址按钮 -->\n        <el-form-item>\n          <el-button\n              type=\"text\"\n              icon=\"el-icon-plus\"\n              @click=\"addCollectUrl\">\n            添加采集地址\n          </el-button>\n        </el-form-item>\n\n        <el-form-item label=\"自动采集\">\n          <el-switch v-model=\"collectForm.autoCollect\"></el-switch>\n        </el-form-item>\n\n        <!-- 采集时间设置 -->\n        <template v-if=\"collectForm.autoCollect\">\n          <el-form-item label=\"采集周期\" prop=\"collectType\">\n            <el-radio-group v-model=\"collectForm.collectType\">\n              <el-radio label=\"daily\">每天</el-radio>\n              <el-radio label=\"weekly\">每周</el-radio>\n            </el-radio-group>\n          </el-form-item>\n          \n          <el-form-item label=\"执行时间\" prop=\"executeTime\">\n            <el-time-picker\n              v-model=\"collectForm.executeTime\"\n              format=\"HH:mm\"\n              value-format=\"HH:mm\"\n              placeholder=\"选择时间\">\n            </el-time-picker>\n          </el-form-item>\n          \n          <el-form-item \n            label=\"执行日期\" \n            prop=\"weekDay\"\n            v-if=\"collectForm.collectType === 'weekly'\">\n            <el-select v-model=\"collectForm.weekDay\">\n              <el-option label=\"星期一\" value=\"1\"></el-option>\n              <el-option label=\"星期二\" value=\"2\"></el-option>\n              <el-option label=\"星期三\" value=\"3\"></el-option>\n              <el-option label=\"星期四\" value=\"4\"></el-option>\n              <el-option label=\"星期五\" value=\"5\"></el-option>\n              <el-option label=\"星期六\" value=\"6\"></el-option>\n              <el-option label=\"星期日\" value=\"0\"></el-option>\n            </el-select>\n          </el-form-item>\n        </template>\n      </el-form>\n      <div slot=\"footer\">\n        <el-button @click=\"collectDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"startCollecting\">开始采集</el-button>\n      </div>\n    </el-dialog>\n\n    <!-- 生成链接对话框 -->\n    <el-dialog\n        title=\"生成链接\"\n        :visible.sync=\"generateLinkDialogVisible\"\n        width=\"500px\"\n        custom-class=\"generate-link-dialog\">\n      <div class=\"link-container\">\n        <!-- 添加格式选择 -->\n        <el-form :model=\"linkForm\" label-width=\"80px\">\n          <el-form-item label=\"文件格式\">\n            <el-radio-group v-model=\"linkForm.format\">\n              <el-radio label=\"txt\">TXT格式</el-radio>\n              <el-radio label=\"m3u\">M3U格式</el-radio>\n            </el-radio-group>\n          </el-form-item>\n        </el-form>\n\n        <!-- 链接展示卡片 -->\n        <el-card class=\"link-card\">\n          <div class=\"link-content\">\n            <el-input\n                v-model=\"generatedLink\"\n                placeholder=\"正在生成链接...\"\n                readonly>\n              <template slot=\"prepend\">链接地址</template>\n              <el-button\n                  slot=\"append\"\n                  icon=\"el-icon-document-copy\"\n                  @click=\"copyGeneratedLink\">\n                复制\n              </el-button>\n            </el-input>\n          </div>\n        </el-card>\n\n        <!-- 使用说明 -->\n        <el-card class=\"tips-card\">\n          <div class=\"tips-content\">\n            <ul>\n              <li>生成的链接可以直接在支持网络导入的播放器中使用</li>\n              <li>链接内容会随列表更新而自动更新</li>\n              <li>TXT格式适用于大多数播放器</li>\n              <li>M3U格式提供更好的播放器兼容性</li>\n            </ul>\n          </div>\n        </el-card>\n      </div>\n    </el-dialog>\n\n    <!-- 添加定时检测设置对话框 -->\n    <el-dialog\n        title=\"定时检测设置\"\n        :visible.sync=\"scheduleDialogVisible\"\n        width=\"500px\">\n      <el-form :model=\"scheduleForm\" label-width=\"100px\" ref=\"scheduleForm\" :rules=\"scheduleRules\">\n        <el-form-item label=\"检测周期\" prop=\"scheduleType\">\n          <el-radio-group v-model=\"scheduleForm.scheduleType\">\n            <el-radio label=\"daily\">每天</el-radio>\n            <el-radio label=\"weekly\">每周</el-radio>\n          </el-radio-group>\n        </el-form-item>\n        \n        <el-form-item label=\"执行时间\" prop=\"executeTime\">\n          <el-time-picker\n            v-model=\"scheduleForm.executeTime\"\n            format=\"HH:mm\"\n            value-format=\"HH:mm\"\n            placeholder=\"选择时间\">\n          </el-time-picker>\n        </el-form-item>\n        \n        <el-form-item \n          label=\"执行日期\" \n          prop=\"weekDay\"\n          v-if=\"scheduleForm.scheduleType === 'weekly'\">\n          <el-select v-model=\"scheduleForm.weekDay\">\n            <el-option label=\"星期一\" value=\"1\"></el-option>\n            <el-option label=\"星期二\" value=\"2\"></el-option>\n            <el-option label=\"星期三\" value=\"3\"></el-option>\n            <el-option label=\"星期四\" value=\"4\"></el-option>\n            <el-option label=\"星期五\" value=\"5\"></el-option>\n            <el-option label=\"星期六\" value=\"6\"></el-option>\n            <el-option label=\"星期日\" value=\"0\"></el-option>\n          </el-select>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\">\n        <el-button @click=\"scheduleDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"startScheduleCheck\">开始定时</el-button>\n      </div>\n    </el-dialog>\n\n    <!-- 添加搜索对话框 -->\n    <el-dialog\n        title=\"搜索直播源\"\n        :visible.sync=\"searchDialogVisible\"\n        width=\"500px\">\n      <el-form :model=\"searchForm\" label-width=\"80px\">\n        <el-form-item label=\"名称\">\n          <el-input\n            v-model=\"searchForm.name\"\n            placeholder=\"支持模糊搜索\"\n            clearable>\n          </el-input>\n        </el-form-item>\n        <el-form-item label=\"分组\">\n          <el-select\n            v-model=\"searchForm.group\"\n            placeholder=\"请选择\"\n            clearable>\n            <el-option\n              v-for=\"group in groupOptions\"\n              :key=\"group\"\n              :label=\"group\"\n              :value=\"group\">\n            </el-option>\n          </el-select>\n        </el-form-item>\n        <el-form-item label=\"状态\">\n          <el-select\n            v-model=\"searchForm.status\"\n            placeholder=\"请选择\"\n            clearable>\n            <el-option label=\"正常\" value=\"正常\"></el-option>\n            <el-option label=\"异常\" value=\"异常\"></el-option>\n            <el-option label=\"未检测\" value=\"未检测\"></el-option>\n          </el-select>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\">\n        <el-button @click=\"searchDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"handleSearch\">搜 索</el-button>\n      </div>\n    </el-dialog>\n  </div>\n\n</template>\n\n<script>\nexport default {\n  name: 'StreamCheck',\n  data() {\n    return {\n      realIp: '',  // 存储真实IP地址\n      loading: false,\n      streamList: [],\n      importUrlDialogVisible: false,\n      importForm: {\n        url: '',\n        group: ''\n      },\n      importRules: {\n        url: [\n          { required: true, message: '请输入URL地址', trigger: 'blur' },\n          { type: 'url', message: '请输入正确的URL地址', trigger: 'blur' }\n        ],\n        group: [\n          { required: true, message: '请选择分组', trigger: 'change' }\n        ]\n      },\n      currentPage: 1,\n      pageSize: 5,\n      isChecking: false,\n      isPaused: false,\n      checkedCount: 0,\n      totalCount: 0,\n      pausedIndex: -1,\n      shouldStop: false,\n      isCollecting: false,\n      collectDialogVisible: false,\n      collectForm: {\n        urls: [''],\n        autoCollect: false,\n        collectType: 'daily',\n        executeTime: '09:00',\n        weekDay: '1'\n      },\n      collectRules: {\n        urls: [\n          { \n            type: 'array',\n            validator: (rule, value, callback) => {\n              if (value.length === 0) {\n                callback(new Error('请至少添加一个采集地址'))\n              }\n              // 验证每个URL\n              const errors = value.map(url => {\n                if (!url) return '采集地址不能为空'\n                if (!/^https?:\\/\\/.+/.test(url)) return '请输入正确的URL地址'\n                return null\n              }).filter(error => error !== null)\n              \n              if (errors.length > 0) {\n                callback(new Error(errors[0]))\n              } else {\n                callback()\n              }\n            },\n            trigger: 'change'\n          }\n        ],\n        executeTime: [\n          { required: true, message: '请选择执行时间', trigger: 'change' }\n        ],\n        weekDay: [\n          { required: true, message: '请选择执行日期', trigger: 'change' }\n        ]\n      },\n      collectTimer: null,\n      generateLinkDialogVisible: false,\n      generatedLink: '',\n      previewContent: '',  // 新增预览内容\n      currentLinkId: '',\n      scheduleDialogVisible: false,\n      isScheduled: false,\n      scheduleForm: {\n        scheduleType: 'daily',\n        executeTime: '09:00',\n        weekDay: '1'\n      },\n      scheduleRules: {\n        executeTime: [\n          { required: true, message: '请选择执行时间', trigger: 'change' }\n        ],\n        weekDay: [\n          { required: true, message: '请选择执行日期', trigger: 'change' }\n        ]\n      },\n      scheduleTimer: null,\n      nextScheduleTime: null,\n      stateKey: 'streamCheckState', // 用于本地存储的key\n      hasActiveOperations: false,  // 添加标记表示是否有动作在执行\n      linkForm: {\n        format: 'txt' // 默认txt格式\n      },\n      searchDialogVisible: false,\n      searchForm: {\n        name: '',\n        group: '',\n        status: ''\n      },\n      filteredList: [], // 用于存储搜索过滤后的列表\n    }\n  },\n  computed: {\n    paginatedData() {\n      // 使用过滤后的列表进行分页\n      const start = (this.currentPage - 1) * this.pageSize\n      const end = start + this.pageSize\n      return (this.filteredList.length > 0 ? this.filteredList : this.streamList).slice(start, end)\n    },\n    checkButtonText() {\n      if (!this.isChecking && !this.isPaused) {\n        return '批量检测'\n      }\n      return `检测中 ${this.checkedCount}/${this.totalCount}`\n    },\n    mergedStreams() {\n      // 创建一个Map来存储合并后的直播源\n      const streamMap = new Map()\n      \n      // 按照当前列表顺序处理每个直播源\n      this.streamList.forEach(stream => {\n        const key = stream.name // 使用名称作为键\n        \n        if (streamMap.has(key)) {\n          // 如果已存在相同名称的直播源，添加到URLs数组\n          const existing = streamMap.get(key)\n          if (!existing.urls.includes(stream.url)) {\n            existing.urls.push(stream.url)\n          }\n        } else {\n          // 如果是新的名称，创建新条目\n          streamMap.set(key, {\n            name: stream.name,\n            urls: [stream.url],\n            group: stream.group\n          })\n        }\n      })\n      \n      // 转换回数组格式\n      return Array.from(streamMap.values())\n    },\n    groupOptions() {\n      return [...new Set(this.streamList.map(item => item.group))]\n    }\n  },\n  created() {\n    // 初始化时加载持久化的数据\n    if (localStorage.getItem('persistentData') === 'true') {\n      const savedList = localStorage.getItem('streamList')\n      if (savedList) {\n        this.streamList = JSON.parse(savedList)\n      }\n    }\n\n    // 监听保存事件\n    this.$root.$on('save-stream-list', this.saveStreamList)\n\n    // 从本地存储恢复状态\n    this.restoreState()\n    // 如果定时检测是开启状态，重新启动定时器\n    if (this.isScheduled) {\n      this.setupSchedule()\n    }\n    // 如果采集是开启状态，重新启动采集\n    if (this.isCollecting) {\n      this.startCollecting(true) // true表示是恢复状态\n    }\n\n    this.filteredList = []\n  },\n  beforeDestroy() {\n    // 移除事件监听\n    this.$root.$off('save-stream-list', this.saveStreamList)\n    // 组件销毁前清除定时器\n    if (this.collectTimer) {\n      clearInterval(this.collectTimer)\n    }\n    // 组件销毁时清理定时器\n    this.stopScheduleCheck()\n    // 在组件销毁前保存状态\n    this.saveState()\n    window.removeEventListener('beforeunload', this.handleBeforeUnload)\n  },\n  async mounted() {\n    try {\n      const response = await fetch('http://localhost:8080/api/local-ip')\n      if (response.ok) {\n        const data = await response.json()\n        this.realIp = data.ip\n      }\n    } catch (error) {\n      console.error('获取IP失败:', error)\n    }\n  },\n  methods: {\n    async checkStream(stream) {\n      const ffprobePath = localStorage.getItem('ffprobePath')\n      if (!ffprobePath) {\n        this.$message.error('请先在系统设置中配置FFprobe路径')\n        return false\n      }\n\n      try {\n        const response = await fetch('http://localhost:8080/api/check-stream', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            url: stream.url,\n            ffprobePath: ffprobePath\n          })\n        })\n\n        if (!response.ok) throw new Error('请求失败')\n        \n        const result = await response.json()\n        \n        // 更新流信息\n        stream.status = result.available ? '正常' : '异常'\n        stream.resolution = result.resolution || ''\n        stream.responseTime = result.responseTime || 0\n\n        // 检查是否需要自动清除\n        if (this.shouldRemoveStream(stream)) {\n          let reason = ''\n          if (stream.status === '异常') {\n            reason = '异常源'\n          } else if (stream.responseTime > 3000) {\n            reason = '响应时间过慢'\n          } else {\n            reason = '分辨率过低'\n          }\n\n          // 找到当前页的所有项\n          const currentPageItems = this.paginatedData\n          // 找到要删除项在当前页的索引\n          const pageIndex = currentPageItems.indexOf(stream)\n          // 找到要删除项在整个列表中的索引\n          const listIndex = this.streamList.indexOf(stream)\n          \n          if (listIndex > -1) {\n            this.streamList.splice(listIndex, 1)\n            // 如果删除的是当前页的最后一项，且不是第一页，则跳转到上一页\n            if (pageIndex === currentPageItems.length - 1 && this.currentPage > 1) {\n              this.currentPage--\n            }\n            // 添加删除原因提示\n            this.$message.warning(`已自动清除直播源：${reason}`)\n          }\n        }\n        \n        this.saveStreamList()\n        return result.available\n      } catch (error) {\n        console.error('检测错误:', error)\n        stream.status = '异常'\n        return false\n      }\n    },\n\n    async handleBatchCheck() {\n      if (this.isChecking) return\n      \n      const uncheckedStreams = this.streamList.filter(s => !this.isPaused || this.streamList.indexOf(s) > this.pausedIndex)\n      if (uncheckedStreams.length === 0) {\n        this.$message.info('没有需要检测的直播源')\n        return\n      }\n\n      this.isChecking = true\n      this.shouldStop = false\n      this.totalCount = uncheckedStreams.length\n      this.checkedCount = this.isPaused ? this.checkedCount : 0\n      \n      // 获取并发检测数量设置\n      const concurrentChecks = parseInt(localStorage.getItem('concurrentChecks')) || 3\n      \n      try {\n        // 从暂停的位置或开始位置继续检测\n        const startIndex = this.isPaused ? this.pausedIndex + 1 : 0\n        \n        // 使用并发检测\n        for (let i = startIndex; i < uncheckedStreams.length; i += concurrentChecks) {\n          if (this.shouldStop) break\n          \n          // 获取当前批次要检测的流\n          const batch = uncheckedStreams.slice(i, i + concurrentChecks)\n          \n          // 并发检测当前批次的所有流\n          await Promise.all(\n            batch.map(async stream => {\n              if (this.shouldStop) return\n              \n              stream.status = '检测中'\n              const success = await this.checkStream(stream)\n              this.checkedCount++\n              \n              if (success) {\n                this.saveState()\n              }\n            })\n          )\n          \n          // 更新暂停位置\n          this.pausedIndex = i + concurrentChecks - 1\n        }\n\n        if (!this.shouldStop) {\n          this.isChecking = false\n          this.isPaused = false\n          this.pausedIndex = -1\n          this.$message.success('批量检测完成')\n        }\n      } catch (error) {\n        console.error('批量检测错误:', error)\n        this.$message.error('批量检测失败')\n      } finally {\n        if (this.shouldStop) {\n          this.isChecking = false\n          this.isPaused = true\n          this.$message.info('检测已暂停')\n        }\n      }\n    },\n\n    pauseCheck() {\n      this.shouldStop = true\n    },\n\n    async resumeCheck() {\n      if (this.pausedIndex >= 0) {\n        this.isChecking = true\n        this.isPaused = false\n        this.shouldStop = false\n        await this.batchCheck(this.pausedIndex)\n      }\n    },\n\n    async handleCheck(row) {\n      row.status = '检测中'\n      \n      const success = await this.checkStream(row)\n      this.$message[success ? 'success' : 'error'](`检测${success ? '成功' : '失败'}: ${row.name}`)\n    },\n    handleDelete(row) {\n      this.$confirm('确认删除该直播源?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        const index = this.streamList.indexOf(row)\n        this.streamList.splice(index, 1)\n        const maxPage = Math.ceil(this.streamList.length / this.pageSize)\n        if (this.currentPage > maxPage) {\n          this.currentPage = Math.max(maxPage, 1)\n        }\n        this.saveStreamList()  // 保存更新后的列表\n        this.$message.success('删除成功')\n      }).catch(() => {})\n    },\n    async handleUrlImport() {\n      const valid = await this.$refs.importForm.validate()\n      if (!valid) return\n\n      try {\n        // 先发送请求到后端，让后端去获取文件内容\n        const response = await fetch('http://localhost:8080/api/import-url', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({ url: this.importForm.url })\n        })\n\n        if (!response.ok) throw new Error('导入失败')\n\n        const content = await response.text()\n        const newStreams = this.parseContent(content)\n\n        if (newStreams.length > 0) {\n          // 过滤重复的直播源\n          const existingUrls = new Set(this.streamList.map(s => s.url))\n          const uniqueStreams = newStreams.filter(s => !existingUrls.has(s.url))\n          \n          if (uniqueStreams.length > 0) {\n            this.streamList.push(...uniqueStreams)\n            this.$message.success(`成功导入 ${uniqueStreams.length} 个直播源`)\n            this.importUrlDialogVisible = false\n          } else {\n            this.$message.info('没有新的直播源可以导入')\n          }\n        } else {\n          this.$message.warning('未找到有效的直播源')\n        }\n      } catch (error) {\n        this.$message.error('导入失败：' + error.message)\n      }\n    },\n    readFile(file) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader()\n        reader.onload = (e) => resolve(e.target.result)\n        reader.onerror = () => reject(new Error('文件读取失败'))\n        reader.readAsText(file)\n      })\n    },\n    parseContent(content) {\n      const lines = content.split('\\n')\n      const streams = []\n      let currentGroup = '未分组'\n\n      // 检测是否是 m3u 格式\n      if (content.includes('#EXTM3U')) {\n        let currentName = ''\n        let currentGroupTitle = ''\n\n        lines.forEach(line => {\n          line = line.trim()\n          if (!line) return\n\n          if (line.startsWith('#EXTINF:')) {\n            // 尝试不同的名称提取方式\n            let name = ''\n            \n            // 1. 尝试提取 tvg-name 属性\n            const tvgNameMatch = line.match(/tvg-name=\"([^\"]+)\"/i)\n            if (tvgNameMatch) {\n              name = tvgNameMatch[1].trim()\n            }\n            \n            // 2. 如果没有 tvg-name，尝试提取最后的逗号后的名称\n            if (!name) {\n              const lastCommaIndex = line.lastIndexOf(',')\n              if (lastCommaIndex !== -1) {\n                name = line.substring(lastCommaIndex + 1).trim()\n              }\n            }\n            \n            // 3. 如果还是没有名称，尝试提取 tvg-id\n            if (!name) {\n              const tvgIdMatch = line.match(/tvg-id=\"([^\"]+)\"/i)\n              if (tvgIdMatch) {\n                name = tvgIdMatch[1].trim()\n              } else {\n                // 3.1 尝试提取不带引号的 tvg-id\n                const tvgIdNoQuoteMatch = line.match(/tvg-id=([^,\\s]+)/i)\n                if (tvgIdNoQuoteMatch) {\n                  name = tvgIdNoQuoteMatch[1].trim()\n                }\n              }\n            }\n\n            currentName = name || '未命名'\n            \n            // 提取分组信息\n            // 1. 先尝试带引号的 group-title\n            const groupMatch = line.match(/group-title=\"([^\"]+)\"/i)\n            if (groupMatch) {\n              currentGroupTitle = groupMatch[1].trim()\n            } else {\n              // 2. 尝试不带引号的 group-title\n              const groupNoQuoteMatch = line.match(/group-title=([^,\\s]+)/i)\n              if (groupNoQuoteMatch) {\n                currentGroupTitle = groupNoQuoteMatch[1].trim()\n              }\n            }\n          } else if (!line.startsWith('#') && line.trim()) {\n            // 这是一个媒体URL行\n            if (currentName) {\n              streams.push({\n                name: currentName,\n                url: line.trim(),\n                group: currentGroupTitle || currentGroup,\n                status: '未检测',\n                resolution: '',\n                responseTime: 0\n              })\n            }\n            currentName = ''  // 重置当前名称\n          }\n        })\n      } else {\n        // txt 格式处理\n        lines.forEach(line => {\n          line = line.trim()\n          if (!line) return\n\n          // 检查是否是分组标记\n          if (line.endsWith(',#genre#')) {\n            currentGroup = line.replace(',#genre#', '')\n            return\n          }\n\n          // 解析直播源行\n          const [name, urls] = line.split(',')\n          if (!name || !urls) return\n\n          // 检查是否包含多个URL（用#分隔）\n          const urlList = urls.split('#')\n          \n          // 为每个URL创建一个新的直播源条目\n          urlList.forEach(url => {\n            if (url && url.trim()) {\n              streams.push({\n                name: name,\n                url: url.trim(),\n                group: currentGroup,\n                status: '未检测',\n                resolution: '',\n                responseTime: 0\n              })\n            }\n          })\n        })\n      }\n\n      return streams\n    },\n    addStreamsToList(streams) {\n      streams.forEach(stream => {\n        this.streamList.push(stream)\n      })\n      this.currentPage = 1\n      this.saveStreamList()  // 保存更新后的列表\n    },\n    handleSizeChange(val) {\n      this.pageSize = val\n      // 当每页条数改变时，重置当前页为第一页\n      this.currentPage = 1\n    },\n    handleCurrentChange(val) {\n      this.currentPage = val\n    },\n    async handleFileUpload(event) {\n      const file = event.target.files[0]\n      if (!file) return\n\n      try {\n        const content = await this.readFile(file)\n        const newStreams = this.parseContent(content)\n        \n        if (newStreams.length > 0) {\n          // 过滤重复的直播源\n          const existingUrls = new Set(this.streamList.map(s => s.url))\n          const uniqueStreams = newStreams.filter(s => !existingUrls.has(s.url))\n          \n          if (uniqueStreams.length > 0) {\n            this.streamList.push(...uniqueStreams)\n            this.$message.success(`成功导入 ${uniqueStreams.length} 个直播源`)\n          } else {\n            this.$message.info('没有新的直播源可以导入')\n          }\n        } else {\n          this.$message.warning('未找到有效的直播源')\n        }\n      } catch (error) {\n        this.$message.error('文件读取失败：' + error.message)\n      } finally {\n        // 清除文件输入，允许重复选择同一文件\n        event.target.value = ''\n      }\n    },\n    getGroupFromFileName(filename) {\n      // 从文件名中提取可能的分组名\n      const name = filename.toLowerCase()\n      if (name.includes('cctv')) return 'CCTV'\n      if (name.includes('卫视')) return '卫视'\n      if (name.includes('地方')) return '地方台'\n      return '未分组'\n    },\n    handleClearList() {\n      if (this.streamList.length === 0) {\n        this.$message.warning('列表已经为空')\n        return\n      }\n\n      this.$confirm('确认清空所有直播源?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        this.streamList = []\n        this.currentPage = 1\n        this.saveStreamList()  // 保存更新后的列表\n        this.$message.success('列表已清空')\n      }).catch(() => {})\n    },\n    handleCopy(row) {\n      // 创建一个临时输入框来实现复制功能\n      const textarea = document.createElement('textarea')\n      textarea.value = row.url\n      document.body.appendChild(textarea)\n      textarea.select()\n      \n      try {\n        document.execCommand('copy')\n        this.$message.success('链接已复制到剪贴板')\n      } catch (err) {\n        this.$message.error('复制失败')\n      } finally {\n        document.body.removeChild(textarea)\n      }\n    },\n    shouldRemoveStream(stream) {\n      // 检查是否需要清除异常源\n      if (localStorage.getItem('autoRemoveInvalid') === 'true' && \n          stream.status === '异常') {\n        return true\n      }\n\n      // 获取模式设置\n      const extremeMode = localStorage.getItem('extremeMode') === 'true'\n      const strictMode = localStorage.getItem('strictMode') === 'true'\n\n      // 检查是否需要清除低分辨率源\n      if (localStorage.getItem('autoRemoveLowRes') === 'true' && \n          stream.resolution !== '未知') {\n        const [width, height] = stream.resolution.split('x').map(Number)\n        if (extremeMode ? (width < 1920 || height < 1080) : \n            (strictMode ? (width < 1920 || height < 1080) : (width < 1280 || height < 720))) {\n          return true\n        }\n      }\n\n      // 检查响应时间\n      if (localStorage.getItem('autoRemoveSlowResponse') === 'true' && \n          stream.responseTime > (extremeMode ? 1500 : (strictMode ? 2000 : 3000))) {\n        return true\n      }\n\n      return false\n    },\n    saveStreamList() {\n      if (localStorage.getItem('persistentData') === 'true') {\n        localStorage.setItem('streamList', JSON.stringify(this.streamList))\n      }\n    },\n    handleCollectMode() {\n      if (this.isCollecting) {\n        this.stopCollecting()\n      } else {\n        this.collectDialogVisible = true\n      }\n    },\n    async startCollecting(isRestore = false) {\n      if (!isRestore) {\n        // 确保 urls 是数组\n        if (!Array.isArray(this.collectForm.urls)) {\n          this.$set(this.collectForm, 'urls', [''])\n          return\n        }\n        \n        const valid = await this.$refs.collectForm.validate()\n        if (!valid) return\n      }\n\n      this.collectDialogVisible = false\n      this.isCollecting = true\n      this.saveState() // 保存状态\n      \n      // 立即执行一次采集\n      await this.collect()\n      \n      // 如果开启了自动采集，设置定时器\n      if (this.collectForm.autoCollect) {\n        this.setupCollectSchedule()\n      } else {\n        // 单次采集完成后停止\n        this.isCollecting = false\n        this.saveState()\n      }\n    },\n    stopCollecting() {\n      this.isCollecting = false\n      if (this.collectTimer) {\n        clearInterval(this.collectTimer)\n        this.collectTimer = null\n      }\n      this.saveState() // 保存状态\n      // 只有在自动采集模式下才显示停止提示\n      if (this.collectForm.autoCollect) {\n        this.$message.success('已停止采集')\n      }\n    },\n    async collect() {\n      try {\n        // 检查是否有检测正在进行\n        if (this.isChecking) {\n          this.$message.warning('检测正在进行中，暂时跳过本次采集')\n          return\n        }\n\n        this.$message.info('开始采集直播源...')\n\n        // 并发采集所有地址\n        const results = await Promise.allSettled(\n          this.collectForm.urls.map(async url => {\n            try {\n              const response = await fetch(url)\n              if (!response.ok) throw new Error(`采集失败: ${url}`)\n              \n              const content = await response.text()\n              const newStreams = this.parseContent(content)\n              \n              // 过滤重复的直播源，同时考虑正在检测的源\n              const existingUrls = new Set(this.streamList.map(s => s.url))\n              return newStreams.filter(s => {\n                // 如果源已存在且正在检测中，保留原有状态\n                const existingStream = this.streamList.find(es => es.url === s.url)\n                if (existingStream && existingStream.status === '检测中') {\n                  return false\n                }\n                return !existingUrls.has(s.url)\n              })\n            } catch (error) {\n              console.error(`采集地址 ${url} 失败:`, error)\n              return []\n            }\n          })\n        )\n\n        // 合并所有采集结果\n        const allNewStreams = results\n          .filter(result => result.status === 'fulfilled')\n          .flatMap(result => result.value)\n          .filter((stream, index, self) => \n            index === self.findIndex(s => s.url === stream.url)\n          )\n\n        // 添加新的直播源到列表\n        if (allNewStreams.length > 0) {\n          this.addStreamsToList(allNewStreams)\n          this.$message.success(`采集成功: 新增${allNewStreams.length}个直播源`)\n        } else {\n          this.$message.info('未发现新的直播源')\n        }\n\n        // 统计失败的地址\n        const failedUrls = results\n          .filter(result => result.status === 'rejected')\n          .length\n\n        if (failedUrls > 0) {\n          this.$message.warning(`${failedUrls}个地址采集失败`)\n        }\n\n      } catch (error) {\n        this.$message.error('采集失败：' + error.message)\n        if (!this.collectForm.autoCollect) {\n          this.stopCollecting()\n        }\n      }\n    },\n    async handleGenerateLink() {\n      this.generateLinkDialogVisible = true\n      try {\n        // 先生成 TXT 格式链接\n        const txtResponse = await fetch('http://localhost:8080/api/generate-link', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain',\n            'X-File-Format': 'txt'\n          },\n          body: this.generateContent('txt')\n        })\n        \n        // 再生成 M3U 格式链接\n        const m3uResponse = await fetch('http://localhost:8080/api/generate-link', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain',\n            'X-File-Format': 'm3u'\n          },\n          body: this.generateContent('m3u')\n        })\n        \n        if (txtResponse.ok && m3uResponse.ok) {\n          const txtLink = await txtResponse.text()\n          const m3uLink = await m3uResponse.text()\n          \n          // 根据当前选择的格式显示对应的链接\n          this.generatedLinks = {\n            txt: txtLink,\n            m3u: m3uLink\n          }\n          this.generatedLink = this.generatedLinks[this.linkForm.format]\n        }\n      } catch (error) {\n        console.error('生成链接失败：', error)\n        this.$message.error('生成链接失败')\n      }\n    },\n    generateContent(format) {\n      return format === 'txt' ? this.generateTxtContent() : this.generateM3uContent()\n    },\n    generateTxtContent() {\n      let content = ''\n      let currentGroup = ''\n      \n      this.mergedStreams.forEach(stream => {\n        if (stream.group !== currentGroup) {\n          currentGroup = stream.group\n          content += `${currentGroup},#genre#\\n`\n        }\n        content += `${stream.name},${stream.urls.join('#')}\\n`\n      })\n      \n      return content.trim()\n    },\n    generateM3uContent() {\n      let content = '#EXTM3U\\n'\n      let currentGroup = ''\n      \n      this.mergedStreams.forEach(stream => {\n        if (stream.group !== currentGroup) {\n          currentGroup = stream.group\n          content += `\\n#EXTINF:-1 group-title=\"${currentGroup}\"\\n`\n        }\n        // 对于多个URL，创建多个条目\n        stream.urls.forEach(url => {\n          content += `#EXTINF:-1,${stream.name}\\n${url}\\n`\n        })\n      })\n      \n      return content.trim()\n    },\n    copyGeneratedLink() {\n      const textarea = document.createElement('textarea')\n      textarea.value = this.generatedLink\n      document.body.appendChild(textarea)\n      textarea.select()\n      \n      try {\n        document.execCommand('copy')\n        this.$message.success('链接已复制到剪贴板')\n      } catch (err) {\n        this.$message.error('复制失败')\n      } finally {\n        document.body.removeChild(textarea)\n      }\n    },\n    downloadTxtFile() {\n      const blob = new Blob([this.generatedLink], { type: 'text/plain;charset=utf-8' })\n      const url = window.URL.createObjectURL(blob)\n      const link = document.createElement('a')\n      link.href = url\n      link.download = `直播源列表_${new Date().toLocaleDateString()}.txt`\n      \n      document.body.appendChild(link)\n      link.click()\n      \n      // 清理\n      window.URL.revokeObjectURL(url)\n      document.body.removeChild(link)\n      this.$message.success('文件下载成功')\n    },\n    // 修改更新链接内容的方法\n    async updateLinkContent() {\n      try {\n        // 更新 TXT 格式内容\n        await fetch('http://localhost:8080/api/update-content', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain',\n            'X-File-Format': 'txt'\n          },\n          body: this.generateContent('txt')\n        })\n        \n        // 更新 M3U 格式内容\n        await fetch('http://localhost:8080/api/update-content', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain',\n            'X-File-Format': 'm3u'\n          },\n          body: this.generateContent('m3u')\n        })\n      } catch (error) {\n        console.error('更新链接内容失败：', error)\n      }\n    },\n    handleScheduleCheck() {\n      if (this.isScheduled) {\n        this.stopScheduleCheck()\n      } else {\n        this.scheduleDialogVisible = true\n      }\n    },\n    startScheduleCheck() {\n      this.$refs.scheduleForm.validate(valid => {\n        if (valid) {\n          this.scheduleDialogVisible = false\n          this.isScheduled = true\n          this.setupSchedule()\n          this.saveState() // 保存状态\n          this.$message.success('定时检测已开启')\n        }\n      })\n    },\n    stopScheduleCheck() {\n      if (this.scheduleTimer) {\n        clearInterval(this.scheduleTimer)\n        this.scheduleTimer = null\n      }\n      this.isScheduled = false\n      this.nextScheduleTime = null\n      this.saveState() // 保存状态\n      this.$message.success('定时检测已停止')\n    },\n    setupSchedule() {\n      // 清除现有定时器\n      if (this.scheduleTimer) {\n        clearInterval(this.scheduleTimer)\n      }\n\n      // 设置每分钟检查一次\n      this.scheduleTimer = setInterval(() => {\n        const now = new Date()\n        const [hours, minutes] = this.scheduleForm.executeTime.split(':').map(Number)\n        \n        // 如果当前正在检测中，跳过这次执行\n        if (this.isChecking) {\n          return\n        }\n\n        // 检查是否到达执行时间\n        const currentHours = now.getHours()\n        const currentMinutes = now.getMinutes()\n        const currentSeconds = now.getSeconds()\n        \n        // 只在每分钟的第0秒执行\n        if (currentHours === hours && currentMinutes === minutes && currentSeconds === 0) {\n          // 如果是每周模式，还需要检查是否是指定的星期几\n          if (this.scheduleForm.scheduleType === 'weekly') {\n            if (now.getDay().toString() === this.scheduleForm.weekDay) {\n              this.handleBatchCheck()\n            }\n          } else {\n            // 每天模式，直接执行\n            this.handleBatchCheck()\n          }\n        }\n      }, 1000) // 每秒检查一次\n    },\n    // 保存当前状态到本地存储\n    saveState() {\n      // 只保存基础数据和设置，不保存运行状态\n      const state = {\n        streamList: this.streamList,\n        currentPage: this.currentPage,\n        pageSize: this.pageSize,\n        scheduleForm: this.scheduleForm,\n        collectForm: this.collectForm\n      }\n      localStorage.setItem(this.stateKey, JSON.stringify(state))\n    },\n    // 从本地存储恢复状态\n    restoreState() {\n      try {\n        const savedState = localStorage.getItem(this.stateKey)\n        if (savedState) {\n          const state = JSON.parse(savedState)\n          \n          // 只恢复基础数据和设置\n          this.streamList = state.streamList || []\n          this.currentPage = state.currentPage || 1\n          this.pageSize = state.pageSize || 5\n          this.scheduleForm = state.scheduleForm || this.scheduleForm\n          this.collectForm = state.collectForm || this.collectForm\n\n          // 重置所有运行状态\n          this.isChecking = false\n          this.isPaused = false\n          this.isScheduled = false\n          this.isCollecting = false\n          this.checkedCount = 0\n          this.totalCount = 0\n          this.pausedIndex = -1\n          this.nextScheduleTime = null\n        }\n      } catch (error) {\n        console.error('恢复状态失败：', error)\n      }\n    },\n    // 添加重置所有运行状态的方法\n    resetAllStates() {\n      // 停止定时检测\n      if (this.isScheduled) {\n        this.stopScheduleCheck()\n      }\n      \n      // 停止采集\n      if (this.isCollecting) {\n        this.stopCollecting()\n      }\n      \n      // 停止批量检测\n      if (this.isChecking) {\n        this.shouldStop = true\n        this.isChecking = false\n        this.isPaused = false\n      }\n      \n      // 重置所有状态\n      this.isChecking = false\n      this.isPaused = false\n      this.isScheduled = false\n      this.isCollecting = false\n      this.checkedCount = 0\n      this.totalCount = 0\n      this.pausedIndex = -1\n      this.nextScheduleTime = null\n      \n      // 清除所有定时器\n      if (this.scheduleTimer) {\n        clearInterval(this.scheduleTimer)\n        this.scheduleTimer = null\n      }\n      if (this.collectTimer) {\n        clearInterval(this.collectTimer)\n        this.collectTimer = null\n      }\n      \n      // 保存重置后的状态\n      this.saveState()\n      \n      this.$message.success('所有运行状态已重置')\n    },\n    // 更新活动状态\n    updateActiveStatus() {\n      const hasActive = this.isChecking || this.isCollecting || this.isScheduled\n      \n      if (this.hasActiveOperations !== hasActive) {\n        this.hasActiveOperations = hasActive\n        if (hasActive) {\n          // 添加刷新拦截\n          window.addEventListener('beforeunload', this.handleBeforeUnload)\n        } else {\n          // 移除刷新拦截\n          window.removeEventListener('beforeunload', this.handleBeforeUnload)\n        }\n      }\n    },\n    // 处理页面刷新\n    handleBeforeUnload(e) {\n      if (this.hasActiveOperations) {\n        const message = '有正在执行的操作，确定要离开吗？'\n        e.preventDefault()\n        e.returnValue = message\n        return message\n      }\n    },\n    addCollectUrl() {\n      if (!Array.isArray(this.collectForm.urls)) {\n        // 如果 urls 不是数组，先初始化它\n        this.$set(this.collectForm, 'urls', [''])\n      } else {\n        this.collectForm.urls.push('')\n      }\n    },\n    removeCollectUrl(index) {\n      if (Array.isArray(this.collectForm.urls) && this.collectForm.urls.length > 1) {\n        this.collectForm.urls.splice(index, 1)\n      }\n    },\n    // 添加判断分辨率标签类型的方法\n    getResolutionTagType(resolution) {\n      if (!resolution || resolution === '未知') return 'info'\n      const [width] = resolution.split('x').map(Number)\n      if (width >= 1920) return 'success'\n      if (width >= 1280) return ''  // 默认类型\n      return 'warning'\n    },\n    // 添加判断响应时间标签类型的方法\n    getResponseTimeTagType(responseTime) {\n      if (!responseTime) return 'info'\n      if (responseTime <= 1000) return 'success'\n      if (responseTime <= 2000) return ''  // 默认类型\n      if (responseTime <= 3000) return 'warning'\n      return 'danger'\n    },\n    setupCollectSchedule() {\n      // 清除现有定时器\n      if (this.collectTimer) {\n        clearInterval(this.collectTimer)\n      }\n\n      // 设置每分钟检查一次\n      this.collectTimer = setInterval(() => {\n        const now = new Date()\n        const [hours, minutes] = this.collectForm.executeTime.split(':').map(Number)\n        \n        // 检查是否到达执行时间\n        const currentHours = now.getHours()\n        const currentMinutes = now.getMinutes()\n        const currentSeconds = now.getSeconds()\n        \n        // 只在每分钟的第0秒执行\n        if (currentHours === hours && currentMinutes === minutes && currentSeconds === 0) {\n          // 如果是每周模式，还需要检查是否是指定的星期几\n          if (this.collectForm.collectType === 'weekly') {\n            if (now.getDay().toString() === this.collectForm.weekDay) {\n              this.collect()\n            }\n          } else {\n            // 每天模式，直接执行\n            this.collect()\n          }\n        }\n      }, 1000) // 每秒检查一次\n    },\n    handleSearch() {\n      this.filteredList = this.streamList.filter(item => {\n        const nameMatch = !this.searchForm.name || \n          item.name.toLowerCase().includes(this.searchForm.name.toLowerCase())\n        \n        const groupMatch = !this.searchForm.group || \n          item.group === this.searchForm.group\n        \n        const statusMatch = !this.searchForm.status || \n          item.status === this.searchForm.status\n        \n        return nameMatch && groupMatch && statusMatch\n      })\n      \n      // 重置到第一页\n      this.currentPage = 1\n      this.searchDialogVisible = false\n    },\n    resetSearch() {\n      this.searchForm = {\n        name: '',\n        group: '',\n        status: ''\n      }\n      this.filteredList = []\n      this.currentPage = 1\n    }\n  },\n  watch: {\n    // 只监听数据变化\n    streamList: {\n      handler() {\n        this.updateLinkContent()\n        this.saveState()\n      },\n      deep: true\n    },\n    currentPage() {\n      this.saveState()\n    },\n    pageSize() {\n      this.saveState()\n    },\n    // 监听所有可能的运行状态\n    isChecking() {\n      this.updateActiveStatus()\n    },\n    isCollecting() {\n      this.updateActiveStatus()\n    },\n    isScheduled() {\n      this.updateActiveStatus()\n    },\n    // 添加格式变化监听\n    'linkForm.format'() {\n      if (this.generateLinkDialogVisible) {\n        this.handleGenerateLink()\n      }\n    }\n  },\n  // 组件被激活时（重新显示）\n  activated() {\n    // 如果有定时任务，恢复定时器\n    if (this.isScheduled) {\n      this.setupSchedule()\n    }\n    // 如果有采集任务，恢复采集\n    if (this.isCollecting) {\n      this.startCollecting(true)\n    }\n  },\n  // 组件被停用时（离开但不销毁）\n  deactivated() {\n    // 暂停定时器，但保持状态标志\n    if (this.scheduleTimer) {\n      clearInterval(this.scheduleTimer)\n      this.scheduleTimer = null\n    }\n    // 暂停采集定时器，但保持状态标志\n    if (this.collectTimer) {\n      clearInterval(this.collectTimer)\n      this.collectTimer = null\n    }\n  }\n}\n</script>\n\n<style scoped>\n.stream-check {\n  padding: 25px;\n  background-color: #fff;\n  border-radius: 4px;\n}\n\n.table-operations {\n  margin-bottom: 20px;\n  display: flex;\n  gap: 10px; /* 按钮组之间的间距 */\n}\n\n.pagination-container {\n  margin-top: 20px;\n  display: flex;\n  justify-content: center;\n}\n\n.el-button [class*=\"el-icon-\"] {\n  font-size: 18px;\n}\n\n.delete-btn {\n  color: #F56C6C;\n}\n\n.delete-btn:hover {\n  color: #ff4d4d;\n}\n\n.setting-tip {\n  margin-left: 10px;\n  color: #909399;\n  font-size: 13px;\n}\n\n.link-info {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.link-info p {\n  margin: 0;\n  color: #606266;\n}\n\n.link-actions {\n  display: flex;\n  gap: 10px;\n  justify-content: flex-end;\n  margin-top: 10px;\n}\n\n/* 生成链接对话框样式 */\n.generate-link-dialog {\n  max-width: 600px;\n}\n\n.link-container {\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n}\n\n.link-card, .tips-card {\n  margin: 0;\n  border: 1px solid #EBEEF5;\n}\n\n.link-content {\n  padding: 10px;\n}\n\n.tips-content {\n  color: #606266;\n  font-size: 14px;\n  padding: 10px;\n}\n\n.tips-content ul {\n  margin: 0;\n  padding-left: 20px;\n  line-height: 1.8;\n}\n\n/* 覆盖 element-ui 的一些默认样式 */\n:deep(.el-dialog__body) {\n  padding: 20px;\n}\n\n:deep(.el-card__header) {\n  padding: 12px 20px;\n  font-weight: 500;\n}\n\n:deep(.el-card__body) {\n  padding: 15px;\n}\n\n/* 可以添加一些自定义样式 */\n.el-tag {\n  width: 90px;  /* 统一标签宽度 */\n}\n\n.el-tag + .el-tag {\n  margin-left: 4px;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}