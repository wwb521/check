{"ast":null,"code":"export default {\n  name: 'StreamCheck',\n  data() {\n    return {\n      // No changes to data section\n    };\n  },\n  computed: {\n    // No changes to computed section\n  },\n  created() {\n    // No changes to created section\n  },\n  beforeDestroy() {\n    // No changes to beforeDestroy section\n  },\n  methods: {\n    async handleUrlFileUpload(event) {\n      const file = event.target.files[0];\n      if (!file) return;\n      try {\n        const content = await this.readFile(file);\n        // 按行分割，过滤空行和非URL格式的行\n        const urls = content.split('\\n').map(line => line.trim()).filter(line => line && /^https?:\\/\\/.+/.test(line));\n        if (urls.length === 0) {\n          this.$message.warning('未找到有效的URL');\n          return;\n        }\n\n        // 确保 urls 是数组\n        if (!Array.isArray(this.collectForm.urls)) {\n          this.$set(this.collectForm, 'urls', []);\n        }\n\n        // 添加新的URL，去重\n        const existingUrls = new Set(this.collectForm.urls);\n        urls.forEach(url => {\n          if (!existingUrls.has(url)) {\n            this.collectForm.urls.push(url);\n            existingUrls.add(url);\n          }\n        });\n        this.$message.success(`成功导入 ${urls.length} 个链接`);\n      } catch (error) {\n        this.$message.error('读取文件失败：' + error.message);\n      } finally {\n        // 清除文件输入，允许重复选择同一文件\n        event.target.value = '';\n      }\n    }\n  },\n  watch: {\n    // No changes to watch section\n  }\n  // No changes to other sections\n};","map":{"version":3,"names":["name","data","computed","created","beforeDestroy","methods","handleUrlFileUpload","event","file","target","files","content","readFile","urls","split","map","line","trim","filter","test","length","$message","warning","Array","isArray","collectForm","$set","existingUrls","Set","forEach","url","has","push","add","success","error","message","value","watch"],"sources":["src/components/StreamCheck.vue"],"sourcesContent":["<template>\n  <!-- No changes to template section -->\n</template>\n\n<script>\nexport default {\n  name: 'StreamCheck',\n  data() {\n    return {\n      // No changes to data section\n    }\n  },\n  computed: {\n    // No changes to computed section\n  },\n  created() {\n    // No changes to created section\n  },\n  beforeDestroy() {\n    // No changes to beforeDestroy section\n  },\n  methods: {\n    async handleUrlFileUpload(event) {\n      const file = event.target.files[0]\n      if (!file) return\n\n      try {\n        const content = await this.readFile(file)\n        // 按行分割，过滤空行和非URL格式的行\n        const urls = content.split('\\n')\n          .map(line => line.trim())\n          .filter(line => line && /^https?:\\/\\/.+/.test(line))\n\n        if (urls.length === 0) {\n          this.$message.warning('未找到有效的URL')\n        return\n      }\n\n        // 确保 urls 是数组\n        if (!Array.isArray(this.collectForm.urls)) {\n          this.$set(this.collectForm, 'urls', [])\n        }\n\n        // 添加新的URL，去重\n        const existingUrls = new Set(this.collectForm.urls)\n        urls.forEach(url => {\n          if (!existingUrls.has(url)) {\n            this.collectForm.urls.push(url)\n            existingUrls.add(url)\n          }\n        })\n\n        this.$message.success(`成功导入 ${urls.length} 个链接`)\n      } catch (error) {\n        this.$message.error('读取文件失败：' + error.message)\n      } finally {\n        // 清除文件输入，允许重复选择同一文件\n        event.target.value = ''\n      }\n    }\n  },\n  watch: {\n    // No changes to watch section\n  },\n  // No changes to other sections\n}\n</script>\n\n<style scoped>\n/* No changes to style section */\n\n.el-form-item.is-required .el-form-item__label:before {\n  content: '';  /* 移除必填星号 */\n}\n\n.setting-tip {\n  margin-left: 10px;\n  color: #909399;\n  font-size: 13px;\n}\n</style> "],"mappings":"AAKA;EACAA,IAAA;EACAC,KAAA;IACA;MACA;IAAA,CACA;EACA;EACAC,QAAA;IACA;EAAA,CACA;EACAC,QAAA;IACA;EAAA,CACA;EACAC,cAAA;IACA;EAAA,CACA;EACAC,OAAA;IACA,MAAAC,oBAAAC,KAAA;MACA,MAAAC,IAAA,GAAAD,KAAA,CAAAE,MAAA,CAAAC,KAAA;MACA,KAAAF,IAAA;MAEA;QACA,MAAAG,OAAA,cAAAC,QAAA,CAAAJ,IAAA;QACA;QACA,MAAAK,IAAA,GAAAF,OAAA,CAAAG,KAAA,OACAC,GAAA,CAAAC,IAAA,IAAAA,IAAA,CAAAC,IAAA,IACAC,MAAA,CAAAF,IAAA,IAAAA,IAAA,qBAAAG,IAAA,CAAAH,IAAA;QAEA,IAAAH,IAAA,CAAAO,MAAA;UACA,KAAAC,QAAA,CAAAC,OAAA;UACA;QACA;;QAEA;QACA,KAAAC,KAAA,CAAAC,OAAA,MAAAC,WAAA,CAAAZ,IAAA;UACA,KAAAa,IAAA,MAAAD,WAAA;QACA;;QAEA;QACA,MAAAE,YAAA,OAAAC,GAAA,MAAAH,WAAA,CAAAZ,IAAA;QACAA,IAAA,CAAAgB,OAAA,CAAAC,GAAA;UACA,KAAAH,YAAA,CAAAI,GAAA,CAAAD,GAAA;YACA,KAAAL,WAAA,CAAAZ,IAAA,CAAAmB,IAAA,CAAAF,GAAA;YACAH,YAAA,CAAAM,GAAA,CAAAH,GAAA;UACA;QACA;QAEA,KAAAT,QAAA,CAAAa,OAAA,SAAArB,IAAA,CAAAO,MAAA;MACA,SAAAe,KAAA;QACA,KAAAd,QAAA,CAAAc,KAAA,aAAAA,KAAA,CAAAC,OAAA;MACA;QACA;QACA7B,KAAA,CAAAE,MAAA,CAAA4B,KAAA;MACA;IACA;EACA;EACAC,KAAA;IACA;EAAA;EAEA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}