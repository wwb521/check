{"ast":null,"code":"export default {\n  name: 'StreamCheck',\n  data() {\n    return {\n      loading: false,\n      streamList: [],\n      importUrlDialogVisible: false,\n      importForm: {\n        url: '',\n        group: ''\n      },\n      importRules: {\n        url: [{\n          required: true,\n          message: '请输入URL地址',\n          trigger: 'blur'\n        }, {\n          type: 'url',\n          message: '请输入正确的URL地址',\n          trigger: 'blur'\n        }],\n        group: [{\n          required: true,\n          message: '请选择分组',\n          trigger: 'change'\n        }]\n      },\n      currentPage: 1,\n      pageSize: 5,\n      isChecking: false,\n      isPaused: false,\n      checkedCount: 0,\n      totalCount: 0,\n      pausedIndex: -1,\n      shouldStop: false,\n      isCollecting: false,\n      collectDialogVisible: false,\n      collectForm: {\n        urls: [''],\n        autoCollect: false,\n        interval: 60\n      },\n      collectRules: {\n        urls: [{\n          type: 'array',\n          validator: (rule, value, callback) => {\n            if (value.length === 0) {\n              callback(new Error('请至少添加一个采集地址'));\n            }\n            // 验证每个URL\n            const errors = value.map(url => {\n              if (!url) return '采集地址不能为空';\n              if (!/^https?:\\/\\/.+/.test(url)) return '请输入正确的URL地址';\n              return null;\n            }).filter(error => error !== null);\n            if (errors.length > 0) {\n              callback(new Error(errors[0]));\n            } else {\n              callback();\n            }\n          },\n          trigger: 'change'\n        }],\n        interval: [{\n          required: true,\n          message: '请输入采集间隔',\n          trigger: 'blur'\n        }, {\n          validator: (rule, value, callback) => {\n            if (value < 1 || value > 10080) {\n              callback(new Error('采集间隔必须在1分钟到7天之间'));\n            } else {\n              callback();\n            }\n          },\n          trigger: 'change'\n        }]\n      },\n      collectTimer: null,\n      generateLinkDialogVisible: false,\n      generatedLink: '',\n      previewContent: '',\n      // 新增预览内容\n      currentLinkId: '',\n      scheduleDialogVisible: false,\n      isScheduled: false,\n      scheduleForm: {\n        interval: 30,\n        unit: 'minute'\n      },\n      scheduleRules: {\n        interval: [{\n          required: true,\n          message: '请设置检测间隔',\n          trigger: 'change'\n        }, {\n          validator: (rule, value, callback) => {\n            if (this.scheduleForm.unit === 'second') {\n              if (value < 10 || value > 59) {\n                callback(new Error('秒数必须在10到59之间'));\n              }\n            } else {\n              if (value < 1 || value > 7980) {\n                callback(new Error('分钟数必须在1到7980之间'));\n              }\n            }\n            callback();\n          },\n          trigger: 'change'\n        }]\n      },\n      scheduleTimer: null,\n      nextScheduleTime: null,\n      stateKey: 'streamCheckState',\n      // 用于本地存储的key\n      hasActiveOperations: false,\n      // 添加标记表示是否有动作在执行\n      linkForm: {\n        format: 'txt' // 默认txt格式\n      }\n    };\n  },\n  computed: {\n    paginatedData() {\n      const start = (this.currentPage - 1) * this.pageSize;\n      const end = start + this.pageSize;\n      return this.streamList.slice(start, end);\n    },\n    checkButtonText() {\n      if (!this.isChecking && !this.isPaused) {\n        return '批量检测';\n      }\n      return `检测中 ${this.checkedCount}/${this.totalCount}`;\n    },\n    mergedStreams() {\n      // 创建一个Map来存储合并后的直播源\n      const streamMap = new Map();\n\n      // 按照当前列表顺序处理每个直播源\n      this.streamList.forEach(stream => {\n        const key = stream.name; // 使用名称作为键\n\n        if (streamMap.has(key)) {\n          // 如果已存在相同名称的直播源，添加到URLs数组\n          const existing = streamMap.get(key);\n          if (!existing.urls.includes(stream.url)) {\n            existing.urls.push(stream.url);\n          }\n        } else {\n          // 如果是新的名称，创建新条目\n          streamMap.set(key, {\n            name: stream.name,\n            urls: [stream.url],\n            group: stream.group\n          });\n        }\n      });\n\n      // 转换回数组格式\n      return Array.from(streamMap.values());\n    }\n  },\n  created() {\n    // 初始化时加载持久化的数据\n    if (localStorage.getItem('persistentData') === 'true') {\n      const savedList = localStorage.getItem('streamList');\n      if (savedList) {\n        this.streamList = JSON.parse(savedList);\n      }\n    }\n\n    // 监听保存事件\n    this.$root.$on('save-stream-list', this.saveStreamList);\n\n    // 从本地存储恢复状态\n    this.restoreState();\n    // 如果定时检测是开启状态，重新启动定时器\n    if (this.isScheduled) {\n      this.setupSchedule();\n    }\n    // 如果采集是开启状态，重新启动采集\n    if (this.isCollecting) {\n      this.startCollecting(true); // true表示是恢复状态\n    }\n  },\n  beforeDestroy() {\n    // 移除事件监听\n    this.$root.$off('save-stream-list', this.saveStreamList);\n    // 组件销毁前清除定时器\n    if (this.collectTimer) {\n      clearInterval(this.collectTimer);\n    }\n    // 组件销毁时清理定时器\n    this.stopScheduleCheck();\n    // 在组件销毁前保存状态\n    this.saveState();\n    window.removeEventListener('beforeunload', this.handleBeforeUnload);\n  },\n  methods: {\n    async checkStream(stream) {\n      const ffprobePath = localStorage.getItem('ffprobePath');\n      if (!ffprobePath) {\n        this.$message.error('请先在系统设置中配置FFprobe路径');\n        return false;\n      }\n      try {\n        const response = await fetch('http://localhost:8080/api/check-stream', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            url: stream.url,\n            ffprobePath: ffprobePath\n          })\n        });\n        if (!response.ok) throw new Error('请求失败');\n        const result = await response.json();\n\n        // 更新流信息\n        stream.status = result.available ? '正常' : '异常';\n        stream.resolution = result.resolution || '';\n        stream.responseTime = result.responseTime || 0;\n\n        // 检查是否需要自动清除\n        if (this.shouldRemoveStream(stream)) {\n          let reason = '';\n          if (stream.status === '异常') {\n            reason = '异常源';\n          } else if (stream.responseTime > 3000) {\n            reason = '响应时间过慢';\n          } else {\n            reason = '分辨率过低';\n          }\n\n          // 找到当前页的所有项\n          const currentPageItems = this.paginatedData;\n          // 找到要删除项在当前页的索引\n          const pageIndex = currentPageItems.indexOf(stream);\n          // 找到要删除项在整个列表中的索引\n          const listIndex = this.streamList.indexOf(stream);\n          if (listIndex > -1) {\n            this.streamList.splice(listIndex, 1);\n            // 如果删除的是当前页的最后一项，且不是第一页，则跳转到上一页\n            if (pageIndex === currentPageItems.length - 1 && this.currentPage > 1) {\n              this.currentPage--;\n            }\n            // 添加删除原因提示\n            this.$message.warning(`已自动清除直播源：${reason}`);\n          }\n        }\n        this.saveStreamList();\n        return result.available;\n      } catch (error) {\n        console.error('检测错误:', error);\n        stream.status = '异常';\n        return false;\n      }\n    },\n    async handleBatchCheck() {\n      if (this.isPaused) {\n        this.resumeCheck();\n        return;\n      }\n      if (this.streamList.length === 0) {\n        this.$message.warning('列表为空');\n        return;\n      }\n      this.isChecking = true;\n      this.isPaused = false;\n      this.shouldStop = false;\n      this.checkedCount = 0;\n      this.totalCount = this.streamList.length;\n      await this.batchCheck(0);\n    },\n    async batchCheck(startIndex) {\n      let successCount = 0;\n      let failCount = 0;\n      const validStreams = [];\n      for (let i = startIndex; i < this.streamList.length; i++) {\n        if (this.shouldStop) {\n          this.pausedIndex = i;\n          this.isPaused = true;\n          this.isChecking = false;\n          return;\n        }\n        const stream = this.streamList[i];\n        try {\n          const response = await fetch('http://localhost:8080/api/check-stream', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              url: stream.url,\n              ffprobePath: localStorage.getItem('ffprobePath')\n            })\n          });\n          if (!response.ok) throw new Error('请求失败');\n          const result = await response.json();\n\n          // 更新流信息\n          stream.status = result.available ? '正常' : '异常';\n          stream.resolution = result.resolution || '';\n          stream.responseTime = result.responseTime || 0;\n          if (result.available) {\n            successCount++;\n          } else {\n            failCount++;\n          }\n\n          // 根据设置决定是否保留该项\n          if (!this.shouldRemoveStream(stream)) {\n            validStreams.push(stream);\n          }\n        } catch (error) {\n          console.error('检测错误:', error);\n          stream.status = '异常';\n          failCount++;\n\n          // 如果不自动清除异常源，则保留该项\n          if (!localStorage.getItem('autoRemoveInvalid') === 'true') {\n            validStreams.push(stream);\n          }\n        }\n        this.checkedCount++;\n      }\n\n      // 如果检测完成（不是暂停状态）\n      if (!this.shouldStop) {\n        // 批量更新列表\n        this.streamList = validStreams;\n\n        // 更新分页\n        const maxPage = Math.ceil(this.streamList.length / this.pageSize);\n        if (this.currentPage > maxPage) {\n          this.currentPage = Math.max(maxPage, 1);\n        }\n\n        // 保存更新后的列表\n        this.saveStreamList();\n        this.isChecking = false;\n        this.isPaused = false;\n        this.pausedIndex = -1;\n        this.$message.success(`检测完成: ${successCount}个正常, ${failCount}个异常`);\n      }\n    },\n    pauseCheck() {\n      this.shouldStop = true;\n    },\n    async resumeCheck() {\n      if (this.pausedIndex >= 0) {\n        this.isChecking = true;\n        this.isPaused = false;\n        this.shouldStop = false;\n        await this.batchCheck(this.pausedIndex);\n      }\n    },\n    async handleCheck(row) {\n      row.status = '检测中';\n      const success = await this.checkStream(row);\n      this.$message[success ? 'success' : 'error'](`检测${success ? '成功' : '失败'}: ${row.name}`);\n    },\n    handleDelete(row) {\n      this.$confirm('确认删除该直播源?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        const index = this.streamList.indexOf(row);\n        this.streamList.splice(index, 1);\n        const maxPage = Math.ceil(this.streamList.length / this.pageSize);\n        if (this.currentPage > maxPage) {\n          this.currentPage = Math.max(maxPage, 1);\n        }\n        this.saveStreamList(); // 保存更新后的列表\n        this.$message.success('删除成功');\n      }).catch(() => {});\n    },\n    async handleUrlImport() {\n      const valid = await this.$refs.importForm.validate();\n      if (!valid) return;\n      try {\n        const response = await fetch(this.importForm.url);\n        if (!response.ok) throw new Error('网络请求失败');\n        const content = await response.text();\n        const newStreams = this.parseContent(content);\n        if (newStreams.length > 0) {\n          // 过滤重复的直播源\n          const existingUrls = new Set(this.streamList.map(s => s.url));\n          const uniqueStreams = newStreams.filter(s => !existingUrls.has(s.url));\n          if (uniqueStreams.length > 0) {\n            this.streamList.push(...uniqueStreams);\n            this.$message.success(`成功导入 ${uniqueStreams.length} 个直播源`);\n            this.importUrlDialogVisible = false;\n          } else {\n            this.$message.info('没有新的直播源可以导入');\n          }\n        } else {\n          this.$message.warning('未找到有效的直播源');\n        }\n      } catch (error) {\n        this.$message.error('导入失败：' + error.message);\n      }\n    },\n    readFile(file) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = e => resolve(e.target.result);\n        reader.onerror = () => reject(new Error('文件读取失败'));\n        reader.readAsText(file);\n      });\n    },\n    parseContent(content) {\n      const lines = content.split('\\n');\n      const streams = [];\n      let currentGroup = '未分组';\n\n      // 检测是否是 m3u 格式\n      if (content.includes('#EXTM3U')) {\n        // 转换 m3u 为 txt 格式\n        let currentName = '';\n        let currentGroupTitle = '未分组';\n        let streamsByGroup = {};\n        lines.forEach(line => {\n          line = line.trim();\n          if (!line) return;\n          if (line.includes('group-title=')) {\n            // 提取分组信息\n            const match = line.match(/group-title=\"([^\"]*)\"/);\n            if (match) {\n              currentGroupTitle = match[1] || '未分组';\n            }\n          }\n          if (line.startsWith('#EXTINF:')) {\n            // 提取频道名称\n            const nameMatch = line.match(/,(.+)$/);\n            if (nameMatch) {\n              currentName = nameMatch[1].trim();\n            }\n          } else if (!line.startsWith('#') && line.trim()) {\n            // 这是一个媒体URL\n            if (!streamsByGroup[currentGroupTitle]) {\n              streamsByGroup[currentGroupTitle] = {};\n            }\n\n            // 使用名称作为键来合并相同名称的URL\n            if (!streamsByGroup[currentGroupTitle][currentName]) {\n              streamsByGroup[currentGroupTitle][currentName] = [];\n            }\n            streamsByGroup[currentGroupTitle][currentName].push(line.trim());\n          }\n        });\n\n        // 转换为 txt 格式的数组\n        Object.entries(streamsByGroup).forEach(([group, channels]) => {\n          streams.push(...this.convertToTxtFormat(group, channels));\n        });\n      } else {\n        // 原有的 txt 格式处理\n        lines.forEach(line => {\n          line = line.trim();\n          if (!line) return;\n          if (line.endsWith(',#genre#')) {\n            currentGroup = line.replace(',#genre#', '');\n            return;\n          }\n          const [name, urls] = line.split(',');\n          if (!name || !urls) return;\n          const urlList = urls.split('#');\n          urlList.forEach(url => {\n            if (url && url.trim()) {\n              streams.push({\n                name: name,\n                url: url.trim(),\n                group: currentGroup,\n                status: '未检测',\n                resolution: '',\n                responseTime: 0\n              });\n            }\n          });\n        });\n      }\n      return streams;\n    },\n    addStreamsToList(streams) {\n      streams.forEach(stream => {\n        this.streamList.push(stream);\n      });\n      this.currentPage = 1;\n      this.saveStreamList(); // 保存更新后的列表\n    },\n    handleSizeChange(val) {\n      this.pageSize = val;\n      // 当每页条数改变时，重置当前页为第一页\n      this.currentPage = 1;\n    },\n    handleCurrentChange(val) {\n      this.currentPage = val;\n    },\n    async handleFileUpload(event) {\n      const file = event.target.files[0];\n      if (!file) return;\n      try {\n        const content = await this.readFile(file);\n        const newStreams = this.parseContent(content);\n        if (newStreams.length > 0) {\n          // 过滤重复的直播源\n          const existingUrls = new Set(this.streamList.map(s => s.url));\n          const uniqueStreams = newStreams.filter(s => !existingUrls.has(s.url));\n          if (uniqueStreams.length > 0) {\n            this.streamList.push(...uniqueStreams);\n            this.$message.success(`成功导入 ${uniqueStreams.length} 个直播源`);\n          } else {\n            this.$message.info('没有新的直播源可以导入');\n          }\n        } else {\n          this.$message.warning('未找到有效的直播源');\n        }\n      } catch (error) {\n        this.$message.error('文件读取失败：' + error.message);\n      } finally {\n        // 清除文件输入，允许重复选择同一文件\n        event.target.value = '';\n      }\n    },\n    getGroupFromFileName(filename) {\n      // 从文件名中提取可能的分组名\n      const name = filename.toLowerCase();\n      if (name.includes('cctv')) return 'CCTV';\n      if (name.includes('卫视')) return '卫视';\n      if (name.includes('地方')) return '地方台';\n      return '未分组';\n    },\n    handleClearList() {\n      if (this.streamList.length === 0) {\n        this.$message.warning('列表已经为空');\n        return;\n      }\n      this.$confirm('确认清空所有直播源?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        this.streamList = [];\n        this.currentPage = 1;\n        this.saveStreamList(); // 保存更新后的列表\n        this.$message.success('列表已清空');\n      }).catch(() => {});\n    },\n    handleCopy(row) {\n      // 创建一个临时输入框来实现复制功能\n      const textarea = document.createElement('textarea');\n      textarea.value = row.url;\n      document.body.appendChild(textarea);\n      textarea.select();\n      try {\n        document.execCommand('copy');\n        this.$message.success('链接已复制到剪贴板');\n      } catch (err) {\n        this.$message.error('复制失败');\n      } finally {\n        document.body.removeChild(textarea);\n      }\n    },\n    shouldRemoveStream(stream) {\n      // 检查是否需要清除异常源\n      if (localStorage.getItem('autoRemoveInvalid') === 'true' && stream.status === '异常') {\n        return true;\n      }\n\n      // 检查是否需要清除低分辨率源\n      if (localStorage.getItem('autoRemoveLowRes') === 'true' && stream.resolution !== '未知') {\n        const [width, height] = stream.resolution.split('x').map(Number);\n        if (width < 1280 || height < 720) {\n          return true;\n        }\n      }\n\n      // 添加新的检查：响应时间\n      if (localStorage.getItem('autoRemoveSlowResponse') === 'true' && stream.responseTime > 3000) {\n        return true;\n      }\n      return false;\n    },\n    saveStreamList() {\n      if (localStorage.getItem('persistentData') === 'true') {\n        localStorage.setItem('streamList', JSON.stringify(this.streamList));\n      }\n    },\n    handleCollectMode() {\n      if (this.isCollecting) {\n        this.stopCollecting();\n      } else {\n        this.collectDialogVisible = true;\n      }\n    },\n    async startCollecting(isRestore = false) {\n      if (!isRestore) {\n        // 确保 urls 是数组\n        if (!Array.isArray(this.collectForm.urls)) {\n          this.$set(this.collectForm, 'urls', ['']);\n          return;\n        }\n        const valid = await this.$refs.collectForm.validate();\n        if (!valid) return;\n      }\n      this.collectDialogVisible = false;\n      this.isCollecting = true;\n      this.saveState(); // 保存状态\n\n      // 立即执行一次采集\n      if (!isRestore) {\n        await this.collect();\n      }\n\n      // 如果开启了自动采集，设置定时器\n      if (this.collectForm.autoCollect) {\n        this.collectTimer = setInterval(async () => {\n          await this.collect();\n        }, this.collectForm.interval * 60 * 1000);\n      }\n    },\n    stopCollecting() {\n      this.isCollecting = false;\n      if (this.collectTimer) {\n        clearInterval(this.collectTimer);\n        this.collectTimer = null;\n      }\n      this.saveState(); // 保存状态\n      this.$message.success('已停止采集');\n    },\n    async collect() {\n      try {\n        // 检查是否有检测正在进行\n        if (this.isChecking) {\n          this.$message.warning('检测正在进行中，暂时跳过本次采集');\n          return;\n        }\n        this.$message.info('开始采集直播源...');\n\n        // 并发采集所有地址\n        const results = await Promise.allSettled(this.collectForm.urls.map(async url => {\n          try {\n            const response = await fetch(url);\n            if (!response.ok) throw new Error(`采集失败: ${url}`);\n            const content = await response.text();\n            const newStreams = this.parseContent(content);\n\n            // 过滤重复的直播源，同时考虑正在检测的源\n            const existingUrls = new Set(this.streamList.map(s => s.url));\n            return newStreams.filter(s => {\n              // 如果源已存在且正在检测中，保留原有状态\n              const existingStream = this.streamList.find(es => es.url === s.url);\n              if (existingStream && existingStream.status === '检测中') {\n                return false;\n              }\n              return !existingUrls.has(s.url);\n            });\n          } catch (error) {\n            console.error(`采集地址 ${url} 失败:`, error);\n            return [];\n          }\n        }));\n\n        // 合并所有采集结果\n        const allNewStreams = results.filter(result => result.status === 'fulfilled').flatMap(result => result.value).filter((stream, index, self) => index === self.findIndex(s => s.url === stream.url));\n\n        // 添加新的直播源到列表\n        if (allNewStreams.length > 0) {\n          this.addStreamsToList(allNewStreams);\n          this.$message.success(`采集成功: 新增${allNewStreams.length}个直播源`);\n        } else {\n          this.$message.info('未发现新的直播源');\n        }\n\n        // 统计失败的地址\n        const failedUrls = results.filter(result => result.status === 'rejected').length;\n        if (failedUrls > 0) {\n          this.$message.warning(`${failedUrls}个地址采集失败`);\n        }\n      } catch (error) {\n        this.$message.error('采集失败：' + error.message);\n        if (!this.collectForm.autoCollect) {\n          this.stopCollecting();\n        }\n      }\n    },\n    async handleGenerateLink() {\n      try {\n        this.generateLinkDialogVisible = true;\n        const content = this.generateContent();\n        const format = this.linkForm.format;\n        const response = await fetch('http://localhost:8080/api/generate-link', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain',\n            'X-File-Format': format // 添加格式标记\n          },\n          body: content\n        });\n        if (!response.ok) {\n          throw new Error('生成链接失败');\n        }\n        this.generatedLink = await response.text();\n      } catch (error) {\n        this.$message.error('生成链接失败：' + error.message);\n      }\n    },\n    generateContent() {\n      return this.linkForm.format === 'm3u' ? this.generateM3uContent() : this.generateTxtContent();\n    },\n    generateTxtContent() {\n      let content = '';\n      let currentGroup = '';\n      this.mergedStreams.forEach(stream => {\n        if (stream.group !== currentGroup) {\n          currentGroup = stream.group;\n          content += `${currentGroup},#genre#\\n`;\n        }\n        content += `${stream.name},${stream.urls.join('#')}\\n`;\n      });\n      return content.trim();\n    },\n    generateM3uContent() {\n      let content = '#EXTM3U\\n';\n      let currentGroup = '';\n      this.mergedStreams.forEach(stream => {\n        if (stream.group !== currentGroup) {\n          currentGroup = stream.group;\n          content += `\\n#EXTINF:-1 group-title=\"${currentGroup}\"\\n`;\n        }\n        // 对于多个URL，创建多个条目\n        stream.urls.forEach(url => {\n          content += `#EXTINF:-1,${stream.name}\\n${url}\\n`;\n        });\n      });\n      return content.trim();\n    },\n    copyGeneratedLink() {\n      const textarea = document.createElement('textarea');\n      textarea.value = this.generatedLink;\n      document.body.appendChild(textarea);\n      textarea.select();\n      try {\n        document.execCommand('copy');\n        this.$message.success('链接已复制到剪贴板');\n      } catch (err) {\n        this.$message.error('复制失败');\n      } finally {\n        document.body.removeChild(textarea);\n      }\n    },\n    downloadTxtFile() {\n      const blob = new Blob([this.generatedLink], {\n        type: 'text/plain;charset=utf-8'\n      });\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `直播源列表_${new Date().toLocaleDateString()}.txt`;\n      document.body.appendChild(link);\n      link.click();\n\n      // 清理\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(link);\n      this.$message.success('文件下载成功');\n    },\n    // 修改更新链接内容的方法\n    async updateLinkContent() {\n      try {\n        const content = this.generateContent();\n        await fetch('http://localhost:8080/api/update-content', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain'\n          },\n          body: content\n        });\n      } catch (error) {\n        console.error('更新链接内容失败：', error);\n      }\n    },\n    handleScheduleCheck() {\n      if (this.isScheduled) {\n        this.stopScheduleCheck();\n      } else {\n        this.scheduleDialogVisible = true;\n      }\n    },\n    startScheduleCheck() {\n      this.$refs.scheduleForm.validate(valid => {\n        if (valid) {\n          this.scheduleDialogVisible = false;\n          this.isScheduled = true;\n          this.setupSchedule();\n          this.saveState(); // 保存状态\n          this.$message.success('定时检测已开启');\n        }\n      });\n    },\n    stopScheduleCheck() {\n      if (this.scheduleTimer) {\n        clearInterval(this.scheduleTimer);\n        this.scheduleTimer = null;\n      }\n      this.isScheduled = false;\n      this.nextScheduleTime = null;\n      this.saveState(); // 保存状态\n      this.$message.success('定时检测已停止');\n    },\n    setupSchedule() {\n      // 清除现有定时器\n      if (this.scheduleTimer) {\n        clearInterval(this.scheduleTimer);\n      }\n\n      // 计算检查间隔（转换为毫秒）\n      const interval = this.scheduleForm.unit === 'second' ? this.scheduleForm.interval * 1000 : this.scheduleForm.interval * 60 * 1000;\n\n      // 设置下次执行时间\n      this.nextScheduleTime = new Date(Date.now() + interval);\n\n      // 设置检查频率（秒级检测使用1秒检查，分钟级使用1分钟检查）\n      const checkInterval = this.scheduleForm.unit === 'second' ? 1000 : 60000;\n      this.scheduleTimer = setInterval(() => {\n        const now = new Date();\n\n        // 如果当前正在检测中，跳过这次执行\n        if (this.isChecking) {\n          return;\n        }\n\n        // 检查是否到达执行时间\n        if (now >= this.nextScheduleTime) {\n          this.handleBatchCheck();\n          // 更新下次执行时间\n          this.nextScheduleTime = new Date(Date.now() + interval);\n        }\n      }, checkInterval);\n    },\n    // 保存当前状态到本地存储\n    saveState() {\n      // 只保存基础数据和设置，不保存运行状态\n      const state = {\n        streamList: this.streamList,\n        currentPage: this.currentPage,\n        pageSize: this.pageSize,\n        scheduleForm: this.scheduleForm,\n        collectForm: this.collectForm\n      };\n      localStorage.setItem(this.stateKey, JSON.stringify(state));\n    },\n    // 从本地存储恢复状态\n    restoreState() {\n      try {\n        const savedState = localStorage.getItem(this.stateKey);\n        if (savedState) {\n          const state = JSON.parse(savedState);\n\n          // 只恢复基础数据和设置\n          this.streamList = state.streamList || [];\n          this.currentPage = state.currentPage || 1;\n          this.pageSize = state.pageSize || 5;\n          this.scheduleForm = state.scheduleForm || this.scheduleForm;\n          this.collectForm = state.collectForm || this.collectForm;\n\n          // 重置所有运行状态\n          this.isChecking = false;\n          this.isPaused = false;\n          this.isScheduled = false;\n          this.isCollecting = false;\n          this.checkedCount = 0;\n          this.totalCount = 0;\n          this.pausedIndex = -1;\n          this.nextScheduleTime = null;\n        }\n      } catch (error) {\n        console.error('恢复状态失败：', error);\n      }\n    },\n    // 添加重置所有运行状态的方法\n    resetAllStates() {\n      // 停止定时检测\n      if (this.isScheduled) {\n        this.stopScheduleCheck();\n      }\n\n      // 停止采集\n      if (this.isCollecting) {\n        this.stopCollecting();\n      }\n\n      // 停止批量检测\n      if (this.isChecking) {\n        this.shouldStop = true;\n        this.isChecking = false;\n        this.isPaused = false;\n      }\n\n      // 重置所有状态\n      this.isChecking = false;\n      this.isPaused = false;\n      this.isScheduled = false;\n      this.isCollecting = false;\n      this.checkedCount = 0;\n      this.totalCount = 0;\n      this.pausedIndex = -1;\n      this.nextScheduleTime = null;\n\n      // 清除所有定时器\n      if (this.scheduleTimer) {\n        clearInterval(this.scheduleTimer);\n        this.scheduleTimer = null;\n      }\n      if (this.collectTimer) {\n        clearInterval(this.collectTimer);\n        this.collectTimer = null;\n      }\n\n      // 保存重置后的状态\n      this.saveState();\n      this.$message.success('所有运行状态已重置');\n    },\n    // 更新活动状态\n    updateActiveStatus() {\n      const hasActive = this.isChecking || this.isCollecting || this.isScheduled;\n      if (this.hasActiveOperations !== hasActive) {\n        this.hasActiveOperations = hasActive;\n        if (hasActive) {\n          // 添加刷新拦截\n          window.addEventListener('beforeunload', this.handleBeforeUnload);\n        } else {\n          // 移除刷新拦截\n          window.removeEventListener('beforeunload', this.handleBeforeUnload);\n        }\n      }\n    },\n    // 处理页面刷新\n    handleBeforeUnload(e) {\n      if (this.hasActiveOperations) {\n        const message = '有正在执行的操作，确定要离开吗？';\n        e.preventDefault();\n        e.returnValue = message;\n        return message;\n      }\n    },\n    addCollectUrl() {\n      if (!Array.isArray(this.collectForm.urls)) {\n        // 如果 urls 不是数组，先初始化它\n        this.$set(this.collectForm, 'urls', ['']);\n      } else {\n        this.collectForm.urls.push('');\n      }\n    },\n    removeCollectUrl(index) {\n      if (Array.isArray(this.collectForm.urls) && this.collectForm.urls.length > 1) {\n        this.collectForm.urls.splice(index, 1);\n      }\n    },\n    // 添加判断分辨率标签类型的方法\n    getResolutionTagType(resolution) {\n      if (!resolution || resolution === '未知') return 'info';\n      const [width] = resolution.split('x').map(Number);\n      if (width >= 1920) return 'success';\n      if (width >= 1280) return ''; // 默认类型\n      return 'warning';\n    },\n    // 添加判断响应时间标签类型的方法\n    getResponseTimeTagType(responseTime) {\n      if (!responseTime) return 'info';\n      if (responseTime <= 1000) return 'success';\n      if (responseTime <= 2000) return ''; // 默认类型\n      if (responseTime <= 3000) return 'warning';\n      return 'danger';\n    },\n    // 修改转换为txt格式的辅助方法\n    convertToTxtFormat(group, channels) {\n      const result = [];\n\n      // 添加分组标记\n      if (group && group !== '未分组') {\n        // 直接使用传入的 group 参数，不需要 currentGroup 变量\n        group = group || '未分组';\n      }\n\n      // 转换频道\n      Object.entries(channels).forEach(([name, urls]) => {\n        if (!name) return; // 跳过空名称\n\n        urls.forEach(url => {\n          if (!url) return; // 跳过空URL\n\n          result.push({\n            name: name,\n            url: url,\n            group: group,\n            // 使用传入的 group 参数\n            status: '未检测',\n            resolution: '',\n            responseTime: 0\n          });\n        });\n      });\n      return result;\n    }\n  },\n  watch: {\n    // 只监听数据变化\n    streamList: {\n      handler() {\n        this.updateLinkContent();\n        this.saveState();\n      },\n      deep: true\n    },\n    currentPage() {\n      this.saveState();\n    },\n    pageSize() {\n      this.saveState();\n    },\n    // 监听所有可能的运行状态\n    isChecking() {\n      this.updateActiveStatus();\n    },\n    isCollecting() {\n      this.updateActiveStatus();\n    },\n    isScheduled() {\n      this.updateActiveStatus();\n    },\n    // 添加格式变化监听\n    'linkForm.format'() {\n      if (this.generateLinkDialogVisible) {\n        this.handleGenerateLink();\n      }\n    }\n  },\n  // 组件被激活时（重新显示）\n  activated() {\n    // 如果有定时任务，恢复定时器\n    if (this.isScheduled) {\n      this.setupSchedule();\n    }\n    // 如果有采集任务，恢复采集\n    if (this.isCollecting) {\n      this.startCollecting(true);\n    }\n  },\n  // 组件被停用时（离开但不销毁）\n  deactivated() {\n    // 暂停定时器，但保持状态标志\n    if (this.scheduleTimer) {\n      clearInterval(this.scheduleTimer);\n      this.scheduleTimer = null;\n    }\n    // 暂停采集定时器，但保持状态标志\n    if (this.collectTimer) {\n      clearInterval(this.collectTimer);\n      this.collectTimer = null;\n    }\n  }\n};","map":{"version":3,"names":["name","data","loading","streamList","importUrlDialogVisible","importForm","url","group","importRules","required","message","trigger","type","currentPage","pageSize","isChecking","isPaused","checkedCount","totalCount","pausedIndex","shouldStop","isCollecting","collectDialogVisible","collectForm","urls","autoCollect","interval","collectRules","validator","rule","value","callback","length","Error","errors","map","test","filter","error","collectTimer","generateLinkDialogVisible","generatedLink","previewContent","currentLinkId","scheduleDialogVisible","isScheduled","scheduleForm","unit","scheduleRules","scheduleTimer","nextScheduleTime","stateKey","hasActiveOperations","linkForm","format","computed","paginatedData","start","end","slice","checkButtonText","mergedStreams","streamMap","Map","forEach","stream","key","has","existing","get","includes","push","set","Array","from","values","created","localStorage","getItem","savedList","JSON","parse","$root","$on","saveStreamList","restoreState","setupSchedule","startCollecting","beforeDestroy","$off","clearInterval","stopScheduleCheck","saveState","window","removeEventListener","handleBeforeUnload","methods","checkStream","ffprobePath","$message","response","fetch","method","headers","body","stringify","ok","result","json","status","available","resolution","responseTime","shouldRemoveStream","reason","currentPageItems","pageIndex","indexOf","listIndex","splice","warning","console","handleBatchCheck","resumeCheck","batchCheck","startIndex","successCount","failCount","validStreams","i","maxPage","Math","ceil","max","success","pauseCheck","handleCheck","row","handleDelete","$confirm","confirmButtonText","cancelButtonText","then","index","catch","handleUrlImport","valid","$refs","validate","content","text","newStreams","parseContent","existingUrls","Set","s","uniqueStreams","info","readFile","file","Promise","resolve","reject","reader","FileReader","onload","e","target","onerror","readAsText","lines","split","streams","currentGroup","currentName","currentGroupTitle","streamsByGroup","line","trim","match","startsWith","nameMatch","Object","entries","channels","convertToTxtFormat","endsWith","replace","urlList","addStreamsToList","handleSizeChange","val","handleCurrentChange","handleFileUpload","event","files","getGroupFromFileName","filename","toLowerCase","handleClearList","handleCopy","textarea","document","createElement","appendChild","select","execCommand","err","removeChild","width","height","Number","setItem","handleCollectMode","stopCollecting","isRestore","isArray","$set","collect","setInterval","results","allSettled","existingStream","find","es","allNewStreams","flatMap","self","findIndex","failedUrls","handleGenerateLink","generateContent","generateM3uContent","generateTxtContent","join","copyGeneratedLink","downloadTxtFile","blob","Blob","URL","createObjectURL","link","href","download","Date","toLocaleDateString","click","revokeObjectURL","updateLinkContent","handleScheduleCheck","startScheduleCheck","now","checkInterval","state","savedState","resetAllStates","updateActiveStatus","hasActive","addEventListener","preventDefault","returnValue","addCollectUrl","removeCollectUrl","getResolutionTagType","getResponseTimeTagType","watch","handler","deep","linkForm.format","activated","deactivated"],"sources":["src/components/StreamCheck.vue"],"sourcesContent":["<template>\n  <!-- No changes to template section -->\n</template>\n\n<script>\nexport default {\n  name: 'StreamCheck',\n  data() {\n    return {\n      loading: false,\n      streamList: [],\n      importUrlDialogVisible: false,\n      importForm: {\n        url: '',\n        group: ''\n      },\n      importRules: {\n        url: [\n          { required: true, message: '请输入URL地址', trigger: 'blur' },\n          { type: 'url', message: '请输入正确的URL地址', trigger: 'blur' }\n        ],\n        group: [\n          { required: true, message: '请选择分组', trigger: 'change' }\n        ]\n      },\n      currentPage: 1,\n      pageSize: 5,\n      isChecking: false,\n      isPaused: false,\n      checkedCount: 0,\n      totalCount: 0,\n      pausedIndex: -1,\n      shouldStop: false,\n      isCollecting: false,\n      collectDialogVisible: false,\n      collectForm: {\n        urls: [''],\n        autoCollect: false,\n        interval: 60\n      },\n      collectRules: {\n        urls: [\n          { \n            type: 'array',\n            validator: (rule, value, callback) => {\n              if (value.length === 0) {\n                callback(new Error('请至少添加一个采集地址'))\n              }\n              // 验证每个URL\n              const errors = value.map(url => {\n                if (!url) return '采集地址不能为空'\n                if (!/^https?:\\/\\/.+/.test(url)) return '请输入正确的URL地址'\n                return null\n              }).filter(error => error !== null)\n              \n              if (errors.length > 0) {\n                callback(new Error(errors[0]))\n              } else {\n                callback()\n              }\n            },\n            trigger: 'change'\n          }\n        ],\n        interval: [\n          { required: true, message: '请输入采集间隔', trigger: 'blur' },\n          { \n            validator: (rule, value, callback) => {\n              if (value < 1 || value > 10080) {\n                callback(new Error('采集间隔必须在1分钟到7天之间'))\n              } else {\n                callback()\n              }\n            }, \n            trigger: 'change' \n          }\n        ]\n      },\n      collectTimer: null,\n      generateLinkDialogVisible: false,\n      generatedLink: '',\n      previewContent: '',  // 新增预览内容\n      currentLinkId: '',\n      scheduleDialogVisible: false,\n      isScheduled: false,\n      scheduleForm: {\n        interval: 30,\n        unit: 'minute'\n      },\n      scheduleRules: {\n        interval: [\n          { required: true, message: '请设置检测间隔', trigger: 'change' },\n          { \n            validator: (rule, value, callback) => {\n              if (this.scheduleForm.unit === 'second') {\n                if (value < 10 || value > 59) {\n                  callback(new Error('秒数必须在10到59之间'))\n                }\n              } else {\n                if (value < 1 || value > 7980) {\n                  callback(new Error('分钟数必须在1到7980之间'))\n                }\n              }\n              callback()\n            }, \n            trigger: 'change' \n          }\n        ]\n      },\n      scheduleTimer: null,\n      nextScheduleTime: null,\n      stateKey: 'streamCheckState', // 用于本地存储的key\n      hasActiveOperations: false,  // 添加标记表示是否有动作在执行\n      linkForm: {\n        format: 'txt' // 默认txt格式\n      }\n    }\n  },\n  computed: {\n    paginatedData() {\n      const start = (this.currentPage - 1) * this.pageSize\n      const end = start + this.pageSize\n      return this.streamList.slice(start, end)\n    },\n    checkButtonText() {\n      if (!this.isChecking && !this.isPaused) {\n        return '批量检测'\n      }\n      return `检测中 ${this.checkedCount}/${this.totalCount}`\n    },\n    mergedStreams() {\n      // 创建一个Map来存储合并后的直播源\n      const streamMap = new Map()\n      \n      // 按照当前列表顺序处理每个直播源\n      this.streamList.forEach(stream => {\n        const key = stream.name // 使用名称作为键\n        \n        if (streamMap.has(key)) {\n          // 如果已存在相同名称的直播源，添加到URLs数组\n          const existing = streamMap.get(key)\n          if (!existing.urls.includes(stream.url)) {\n            existing.urls.push(stream.url)\n          }\n        } else {\n          // 如果是新的名称，创建新条目\n          streamMap.set(key, {\n            name: stream.name,\n            urls: [stream.url],\n            group: stream.group\n          })\n        }\n      })\n      \n      // 转换回数组格式\n      return Array.from(streamMap.values())\n    }\n  },\n  created() {\n    // 初始化时加载持久化的数据\n    if (localStorage.getItem('persistentData') === 'true') {\n      const savedList = localStorage.getItem('streamList')\n      if (savedList) {\n        this.streamList = JSON.parse(savedList)\n      }\n    }\n\n    // 监听保存事件\n    this.$root.$on('save-stream-list', this.saveStreamList)\n\n    // 从本地存储恢复状态\n    this.restoreState()\n    // 如果定时检测是开启状态，重新启动定时器\n    if (this.isScheduled) {\n      this.setupSchedule()\n    }\n    // 如果采集是开启状态，重新启动采集\n    if (this.isCollecting) {\n      this.startCollecting(true) // true表示是恢复状态\n    }\n  },\n  beforeDestroy() {\n    // 移除事件监听\n    this.$root.$off('save-stream-list', this.saveStreamList)\n    // 组件销毁前清除定时器\n    if (this.collectTimer) {\n      clearInterval(this.collectTimer)\n    }\n    // 组件销毁时清理定时器\n    this.stopScheduleCheck()\n    // 在组件销毁前保存状态\n    this.saveState()\n    window.removeEventListener('beforeunload', this.handleBeforeUnload)\n  },\n  methods: {\n    async checkStream(stream) {\n      const ffprobePath = localStorage.getItem('ffprobePath')\n      if (!ffprobePath) {\n        this.$message.error('请先在系统设置中配置FFprobe路径')\n        return false\n      }\n\n      try {\n        const response = await fetch('http://localhost:8080/api/check-stream', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            url: stream.url,\n            ffprobePath: ffprobePath\n          })\n        })\n\n        if (!response.ok) throw new Error('请求失败')\n        \n        const result = await response.json()\n        \n        // 更新流信息\n        stream.status = result.available ? '正常' : '异常'\n        stream.resolution = result.resolution || ''\n        stream.responseTime = result.responseTime || 0\n\n        // 检查是否需要自动清除\n        if (this.shouldRemoveStream(stream)) {\n          let reason = ''\n          if (stream.status === '异常') {\n            reason = '异常源'\n          } else if (stream.responseTime > 3000) {\n            reason = '响应时间过慢'\n          } else {\n            reason = '分辨率过低'\n          }\n\n          // 找到当前页的所有项\n          const currentPageItems = this.paginatedData\n          // 找到要删除项在当前页的索引\n          const pageIndex = currentPageItems.indexOf(stream)\n          // 找到要删除项在整个列表中的索引\n          const listIndex = this.streamList.indexOf(stream)\n          \n          if (listIndex > -1) {\n            this.streamList.splice(listIndex, 1)\n            // 如果删除的是当前页的最后一项，且不是第一页，则跳转到上一页\n            if (pageIndex === currentPageItems.length - 1 && this.currentPage > 1) {\n              this.currentPage--\n            }\n            // 添加删除原因提示\n            this.$message.warning(`已自动清除直播源：${reason}`)\n          }\n        }\n        \n        this.saveStreamList()\n        return result.available\n      } catch (error) {\n        console.error('检测错误:', error)\n        stream.status = '异常'\n        return false\n      }\n    },\n\n    async handleBatchCheck() {\n      if (this.isPaused) {\n        this.resumeCheck()\n        return\n      }\n      \n      if (this.streamList.length === 0) {\n        this.$message.warning('列表为空')\n        return\n      }\n\n      this.isChecking = true\n      this.isPaused = false\n      this.shouldStop = false\n      this.checkedCount = 0\n      this.totalCount = this.streamList.length\n      \n      await this.batchCheck(0)\n    },\n\n    async batchCheck(startIndex) {\n      let successCount = 0\n      let failCount = 0\n      const validStreams = []\n      \n      for (let i = startIndex; i < this.streamList.length; i++) {\n        if (this.shouldStop) {\n          this.pausedIndex = i\n          this.isPaused = true\n          this.isChecking = false\n          return\n        }\n\n        const stream = this.streamList[i]\n        try {\n          const response = await fetch('http://localhost:8080/api/check-stream', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              url: stream.url,\n              ffprobePath: localStorage.getItem('ffprobePath')\n            })\n          })\n\n          if (!response.ok) throw new Error('请求失败')\n          \n          const result = await response.json()\n          \n          // 更新流信息\n          stream.status = result.available ? '正常' : '异常'\n          stream.resolution = result.resolution || ''\n          stream.responseTime = result.responseTime || 0\n\n          if (result.available) {\n            successCount++\n          } else {\n            failCount++\n          }\n\n          // 根据设置决定是否保留该项\n          if (!this.shouldRemoveStream(stream)) {\n            validStreams.push(stream)\n          }\n        } catch (error) {\n          console.error('检测错误:', error)\n          stream.status = '异常'\n          failCount++\n          \n          // 如果不自动清除异常源，则保留该项\n          if (!localStorage.getItem('autoRemoveInvalid') === 'true') {\n            validStreams.push(stream)\n          }\n        }\n        \n        this.checkedCount++\n      }\n\n      // 如果检测完成（不是暂停状态）\n      if (!this.shouldStop) {\n        // 批量更新列表\n        this.streamList = validStreams\n        \n        // 更新分页\n        const maxPage = Math.ceil(this.streamList.length / this.pageSize)\n        if (this.currentPage > maxPage) {\n          this.currentPage = Math.max(maxPage, 1)\n        }\n        \n        // 保存更新后的列表\n        this.saveStreamList()\n        \n        this.isChecking = false\n        this.isPaused = false\n        this.pausedIndex = -1\n        this.$message.success(`检测完成: ${successCount}个正常, ${failCount}个异常`)\n      }\n    },\n\n    pauseCheck() {\n      this.shouldStop = true\n    },\n\n    async resumeCheck() {\n      if (this.pausedIndex >= 0) {\n        this.isChecking = true\n        this.isPaused = false\n        this.shouldStop = false\n        await this.batchCheck(this.pausedIndex)\n      }\n    },\n\n    async handleCheck(row) {\n      row.status = '检测中'\n      \n      const success = await this.checkStream(row)\n      this.$message[success ? 'success' : 'error'](`检测${success ? '成功' : '失败'}: ${row.name}`)\n    },\n    handleDelete(row) {\n      this.$confirm('确认删除该直播源?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        const index = this.streamList.indexOf(row)\n        this.streamList.splice(index, 1)\n        const maxPage = Math.ceil(this.streamList.length / this.pageSize)\n        if (this.currentPage > maxPage) {\n          this.currentPage = Math.max(maxPage, 1)\n        }\n        this.saveStreamList()  // 保存更新后的列表\n        this.$message.success('删除成功')\n      }).catch(() => {})\n    },\n    async handleUrlImport() {\n      const valid = await this.$refs.importForm.validate()\n      if (!valid) return\n\n      try {\n        const response = await fetch(this.importForm.url)\n        if (!response.ok) throw new Error('网络请求失败')\n\n        const content = await response.text()\n        const newStreams = this.parseContent(content)\n\n        if (newStreams.length > 0) {\n          // 过滤重复的直播源\n          const existingUrls = new Set(this.streamList.map(s => s.url))\n          const uniqueStreams = newStreams.filter(s => !existingUrls.has(s.url))\n          \n          if (uniqueStreams.length > 0) {\n            this.streamList.push(...uniqueStreams)\n            this.$message.success(`成功导入 ${uniqueStreams.length} 个直播源`)\n            this.importUrlDialogVisible = false\n          } else {\n            this.$message.info('没有新的直播源可以导入')\n          }\n        } else {\n          this.$message.warning('未找到有效的直播源')\n        }\n      } catch (error) {\n        this.$message.error('导入失败：' + error.message)\n      }\n    },\n    readFile(file) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader()\n        reader.onload = (e) => resolve(e.target.result)\n        reader.onerror = () => reject(new Error('文件读取失败'))\n        reader.readAsText(file)\n      })\n    },\n    parseContent(content) {\n      const lines = content.split('\\n')\n      const streams = []\n      let currentGroup = '未分组'\n\n      // 检测是否是 m3u 格式\n      if (content.includes('#EXTM3U')) {\n        // 转换 m3u 为 txt 格式\n        let currentName = ''\n        let currentGroupTitle = '未分组'\n        let streamsByGroup = {}\n\n        lines.forEach(line => {\n          line = line.trim()\n          if (!line) return\n\n          if (line.includes('group-title=')) {\n            // 提取分组信息\n            const match = line.match(/group-title=\"([^\"]*)\"/)\n            if (match) {\n              currentGroupTitle = match[1] || '未分组'\n            }\n          }\n          \n          if (line.startsWith('#EXTINF:')) {\n            // 提取频道名称\n            const nameMatch = line.match(/,(.+)$/)\n            if (nameMatch) {\n              currentName = nameMatch[1].trim()\n            }\n          } else if (!line.startsWith('#') && line.trim()) {\n            // 这是一个媒体URL\n            if (!streamsByGroup[currentGroupTitle]) {\n              streamsByGroup[currentGroupTitle] = {}\n            }\n            \n            // 使用名称作为键来合并相同名称的URL\n            if (!streamsByGroup[currentGroupTitle][currentName]) {\n              streamsByGroup[currentGroupTitle][currentName] = []\n            }\n            streamsByGroup[currentGroupTitle][currentName].push(line.trim())\n          }\n        })\n\n        // 转换为 txt 格式的数组\n        Object.entries(streamsByGroup).forEach(([group, channels]) => {\n          streams.push(...this.convertToTxtFormat(group, channels))\n        })\n      } else {\n        // 原有的 txt 格式处理\n        lines.forEach(line => {\n          line = line.trim()\n          if (!line) return\n\n          if (line.endsWith(',#genre#')) {\n            currentGroup = line.replace(',#genre#', '')\n            return\n          }\n\n          const [name, urls] = line.split(',')\n          if (!name || !urls) return\n\n          const urlList = urls.split('#')\n          urlList.forEach(url => {\n            if (url && url.trim()) {\n              streams.push({\n                name: name,\n                url: url.trim(),\n                group: currentGroup,\n                status: '未检测',\n                resolution: '',\n                responseTime: 0\n              })\n            }\n          })\n        })\n      }\n\n      return streams\n    },\n    addStreamsToList(streams) {\n      streams.forEach(stream => {\n        this.streamList.push(stream)\n      })\n      this.currentPage = 1\n      this.saveStreamList()  // 保存更新后的列表\n    },\n    handleSizeChange(val) {\n      this.pageSize = val\n      // 当每页条数改变时，重置当前页为第一页\n      this.currentPage = 1\n    },\n    handleCurrentChange(val) {\n      this.currentPage = val\n    },\n    async handleFileUpload(event) {\n      const file = event.target.files[0]\n      if (!file) return\n\n      try {\n        const content = await this.readFile(file)\n        const newStreams = this.parseContent(content)\n        \n        if (newStreams.length > 0) {\n          // 过滤重复的直播源\n          const existingUrls = new Set(this.streamList.map(s => s.url))\n          const uniqueStreams = newStreams.filter(s => !existingUrls.has(s.url))\n          \n          if (uniqueStreams.length > 0) {\n            this.streamList.push(...uniqueStreams)\n            this.$message.success(`成功导入 ${uniqueStreams.length} 个直播源`)\n          } else {\n            this.$message.info('没有新的直播源可以导入')\n          }\n        } else {\n          this.$message.warning('未找到有效的直播源')\n        }\n      } catch (error) {\n        this.$message.error('文件读取失败：' + error.message)\n      } finally {\n        // 清除文件输入，允许重复选择同一文件\n        event.target.value = ''\n      }\n    },\n    getGroupFromFileName(filename) {\n      // 从文件名中提取可能的分组名\n      const name = filename.toLowerCase()\n      if (name.includes('cctv')) return 'CCTV'\n      if (name.includes('卫视')) return '卫视'\n      if (name.includes('地方')) return '地方台'\n      return '未分组'\n    },\n    handleClearList() {\n      if (this.streamList.length === 0) {\n        this.$message.warning('列表已经为空')\n        return\n      }\n\n      this.$confirm('确认清空所有直播源?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        this.streamList = []\n        this.currentPage = 1\n        this.saveStreamList()  // 保存更新后的列表\n        this.$message.success('列表已清空')\n      }).catch(() => {})\n    },\n    handleCopy(row) {\n      // 创建一个临时输入框来实现复制功能\n      const textarea = document.createElement('textarea')\n      textarea.value = row.url\n      document.body.appendChild(textarea)\n      textarea.select()\n      \n      try {\n        document.execCommand('copy')\n        this.$message.success('链接已复制到剪贴板')\n      } catch (err) {\n        this.$message.error('复制失败')\n      } finally {\n        document.body.removeChild(textarea)\n      }\n    },\n    shouldRemoveStream(stream) {\n      // 检查是否需要清除异常源\n      if (localStorage.getItem('autoRemoveInvalid') === 'true' && \n          stream.status === '异常') {\n        return true\n      }\n\n      // 检查是否需要清除低分辨率源\n      if (localStorage.getItem('autoRemoveLowRes') === 'true' && \n          stream.resolution !== '未知') {\n        const [width, height] = stream.resolution.split('x').map(Number)\n        if (width < 1280 || height < 720) {\n          return true\n        }\n      }\n\n      // 添加新的检查：响应时间\n      if (localStorage.getItem('autoRemoveSlowResponse') === 'true' && \n          stream.responseTime > 3000) {\n        return true\n      }\n\n      return false\n    },\n    saveStreamList() {\n      if (localStorage.getItem('persistentData') === 'true') {\n        localStorage.setItem('streamList', JSON.stringify(this.streamList))\n      }\n    },\n    handleCollectMode() {\n      if (this.isCollecting) {\n        this.stopCollecting()\n      } else {\n        this.collectDialogVisible = true\n      }\n    },\n    async startCollecting(isRestore = false) {\n      if (!isRestore) {\n        // 确保 urls 是数组\n        if (!Array.isArray(this.collectForm.urls)) {\n          this.$set(this.collectForm, 'urls', [''])\n          return\n        }\n        \n        const valid = await this.$refs.collectForm.validate()\n        if (!valid) return\n      }\n\n      this.collectDialogVisible = false\n      this.isCollecting = true\n      this.saveState() // 保存状态\n      \n      // 立即执行一次采集\n      if (!isRestore) {\n        await this.collect()\n      }\n      \n      // 如果开启了自动采集，设置定时器\n      if (this.collectForm.autoCollect) {\n        this.collectTimer = setInterval(async () => {\n          await this.collect()\n        }, this.collectForm.interval * 60 * 1000)\n      }\n    },\n    stopCollecting() {\n      this.isCollecting = false\n      if (this.collectTimer) {\n        clearInterval(this.collectTimer)\n        this.collectTimer = null\n      }\n      this.saveState() // 保存状态\n      this.$message.success('已停止采集')\n    },\n    async collect() {\n      try {\n        // 检查是否有检测正在进行\n        if (this.isChecking) {\n          this.$message.warning('检测正在进行中，暂时跳过本次采集')\n          return\n        }\n\n        this.$message.info('开始采集直播源...')\n\n        // 并发采集所有地址\n        const results = await Promise.allSettled(\n          this.collectForm.urls.map(async url => {\n            try {\n              const response = await fetch(url)\n              if (!response.ok) throw new Error(`采集失败: ${url}`)\n              \n              const content = await response.text()\n              const newStreams = this.parseContent(content)\n              \n              // 过滤重复的直播源，同时考虑正在检测的源\n              const existingUrls = new Set(this.streamList.map(s => s.url))\n              return newStreams.filter(s => {\n                // 如果源已存在且正在检测中，保留原有状态\n                const existingStream = this.streamList.find(es => es.url === s.url)\n                if (existingStream && existingStream.status === '检测中') {\n                  return false\n                }\n                return !existingUrls.has(s.url)\n              })\n            } catch (error) {\n              console.error(`采集地址 ${url} 失败:`, error)\n              return []\n            }\n          })\n        )\n\n        // 合并所有采集结果\n        const allNewStreams = results\n          .filter(result => result.status === 'fulfilled')\n          .flatMap(result => result.value)\n          .filter((stream, index, self) => \n            index === self.findIndex(s => s.url === stream.url)\n          )\n\n        // 添加新的直播源到列表\n        if (allNewStreams.length > 0) {\n          this.addStreamsToList(allNewStreams)\n          this.$message.success(`采集成功: 新增${allNewStreams.length}个直播源`)\n        } else {\n          this.$message.info('未发现新的直播源')\n        }\n\n        // 统计失败的地址\n        const failedUrls = results\n          .filter(result => result.status === 'rejected')\n          .length\n\n        if (failedUrls > 0) {\n          this.$message.warning(`${failedUrls}个地址采集失败`)\n        }\n\n      } catch (error) {\n        this.$message.error('采集失败：' + error.message)\n        if (!this.collectForm.autoCollect) {\n          this.stopCollecting()\n        }\n      }\n    },\n    async handleGenerateLink() {\n      try {\n        this.generateLinkDialogVisible = true\n        \n        const content = this.generateContent()\n        const format = this.linkForm.format\n        \n        const response = await fetch('http://localhost:8080/api/generate-link', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain',\n            'X-File-Format': format // 添加格式标记\n          },\n          body: content\n        })\n\n        if (!response.ok) {\n          throw new Error('生成链接失败')\n        }\n\n        this.generatedLink = await response.text()\n      } catch (error) {\n        this.$message.error('生成链接失败：' + error.message)\n      }\n    },\n    generateContent() {\n      return this.linkForm.format === 'm3u' \n        ? this.generateM3uContent() \n        : this.generateTxtContent()\n    },\n    generateTxtContent() {\n      let content = ''\n      let currentGroup = ''\n      \n      this.mergedStreams.forEach(stream => {\n        if (stream.group !== currentGroup) {\n          currentGroup = stream.group\n          content += `${currentGroup},#genre#\\n`\n        }\n        content += `${stream.name},${stream.urls.join('#')}\\n`\n      })\n      \n      return content.trim()\n    },\n    generateM3uContent() {\n      let content = '#EXTM3U\\n'\n      let currentGroup = ''\n      \n      this.mergedStreams.forEach(stream => {\n        if (stream.group !== currentGroup) {\n          currentGroup = stream.group\n          content += `\\n#EXTINF:-1 group-title=\"${currentGroup}\"\\n`\n        }\n        // 对于多个URL，创建多个条目\n        stream.urls.forEach(url => {\n          content += `#EXTINF:-1,${stream.name}\\n${url}\\n`\n        })\n      })\n      \n      return content.trim()\n    },\n    copyGeneratedLink() {\n      const textarea = document.createElement('textarea')\n      textarea.value = this.generatedLink\n      document.body.appendChild(textarea)\n      textarea.select()\n      \n      try {\n        document.execCommand('copy')\n        this.$message.success('链接已复制到剪贴板')\n      } catch (err) {\n        this.$message.error('复制失败')\n      } finally {\n        document.body.removeChild(textarea)\n      }\n    },\n    downloadTxtFile() {\n      const blob = new Blob([this.generatedLink], { type: 'text/plain;charset=utf-8' })\n      const url = window.URL.createObjectURL(blob)\n      const link = document.createElement('a')\n      link.href = url\n      link.download = `直播源列表_${new Date().toLocaleDateString()}.txt`\n      \n      document.body.appendChild(link)\n      link.click()\n      \n      // 清理\n      window.URL.revokeObjectURL(url)\n      document.body.removeChild(link)\n      this.$message.success('文件下载成功')\n    },\n    // 修改更新链接内容的方法\n    async updateLinkContent() {\n      try {\n        const content = this.generateContent()\n        await fetch('http://localhost:8080/api/update-content', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain'\n          },\n          body: content\n        })\n      } catch (error) {\n        console.error('更新链接内容失败：', error)\n      }\n    },\n    handleScheduleCheck() {\n      if (this.isScheduled) {\n        this.stopScheduleCheck()\n      } else {\n        this.scheduleDialogVisible = true\n      }\n    },\n    startScheduleCheck() {\n      this.$refs.scheduleForm.validate(valid => {\n        if (valid) {\n          this.scheduleDialogVisible = false\n          this.isScheduled = true\n          this.setupSchedule()\n          this.saveState() // 保存状态\n          this.$message.success('定时检测已开启')\n        }\n      })\n    },\n    stopScheduleCheck() {\n      if (this.scheduleTimer) {\n        clearInterval(this.scheduleTimer)\n        this.scheduleTimer = null\n      }\n      this.isScheduled = false\n      this.nextScheduleTime = null\n      this.saveState() // 保存状态\n      this.$message.success('定时检测已停止')\n    },\n    setupSchedule() {\n      // 清除现有定时器\n      if (this.scheduleTimer) {\n        clearInterval(this.scheduleTimer)\n      }\n\n      // 计算检查间隔（转换为毫秒）\n      const interval = this.scheduleForm.unit === 'second' \n        ? this.scheduleForm.interval * 1000 \n        : this.scheduleForm.interval * 60 * 1000\n      \n      // 设置下次执行时间\n      this.nextScheduleTime = new Date(Date.now() + interval)\n\n      // 设置检查频率（秒级检测使用1秒检查，分钟级使用1分钟检查）\n      const checkInterval = this.scheduleForm.unit === 'second' ? 1000 : 60000\n\n      this.scheduleTimer = setInterval(() => {\n        const now = new Date()\n        \n        // 如果当前正在检测中，跳过这次执行\n        if (this.isChecking) {\n          return\n        }\n\n        // 检查是否到达执行时间\n        if (now >= this.nextScheduleTime) {\n          this.handleBatchCheck()\n          // 更新下次执行时间\n          this.nextScheduleTime = new Date(Date.now() + interval)\n        }\n      }, checkInterval)\n    },\n    // 保存当前状态到本地存储\n    saveState() {\n      // 只保存基础数据和设置，不保存运行状态\n      const state = {\n        streamList: this.streamList,\n        currentPage: this.currentPage,\n        pageSize: this.pageSize,\n        scheduleForm: this.scheduleForm,\n        collectForm: this.collectForm\n      }\n      localStorage.setItem(this.stateKey, JSON.stringify(state))\n    },\n    // 从本地存储恢复状态\n    restoreState() {\n      try {\n        const savedState = localStorage.getItem(this.stateKey)\n        if (savedState) {\n          const state = JSON.parse(savedState)\n          \n          // 只恢复基础数据和设置\n          this.streamList = state.streamList || []\n          this.currentPage = state.currentPage || 1\n          this.pageSize = state.pageSize || 5\n          this.scheduleForm = state.scheduleForm || this.scheduleForm\n          this.collectForm = state.collectForm || this.collectForm\n\n          // 重置所有运行状态\n          this.isChecking = false\n          this.isPaused = false\n          this.isScheduled = false\n          this.isCollecting = false\n          this.checkedCount = 0\n          this.totalCount = 0\n          this.pausedIndex = -1\n          this.nextScheduleTime = null\n        }\n      } catch (error) {\n        console.error('恢复状态失败：', error)\n      }\n    },\n    // 添加重置所有运行状态的方法\n    resetAllStates() {\n      // 停止定时检测\n      if (this.isScheduled) {\n        this.stopScheduleCheck()\n      }\n      \n      // 停止采集\n      if (this.isCollecting) {\n        this.stopCollecting()\n      }\n      \n      // 停止批量检测\n      if (this.isChecking) {\n        this.shouldStop = true\n        this.isChecking = false\n        this.isPaused = false\n      }\n      \n      // 重置所有状态\n      this.isChecking = false\n      this.isPaused = false\n      this.isScheduled = false\n      this.isCollecting = false\n      this.checkedCount = 0\n      this.totalCount = 0\n      this.pausedIndex = -1\n      this.nextScheduleTime = null\n      \n      // 清除所有定时器\n      if (this.scheduleTimer) {\n        clearInterval(this.scheduleTimer)\n        this.scheduleTimer = null\n      }\n      if (this.collectTimer) {\n        clearInterval(this.collectTimer)\n        this.collectTimer = null\n      }\n      \n      // 保存重置后的状态\n      this.saveState()\n      \n      this.$message.success('所有运行状态已重置')\n    },\n    // 更新活动状态\n    updateActiveStatus() {\n      const hasActive = this.isChecking || this.isCollecting || this.isScheduled\n      \n      if (this.hasActiveOperations !== hasActive) {\n        this.hasActiveOperations = hasActive\n        if (hasActive) {\n          // 添加刷新拦截\n          window.addEventListener('beforeunload', this.handleBeforeUnload)\n        } else {\n          // 移除刷新拦截\n          window.removeEventListener('beforeunload', this.handleBeforeUnload)\n        }\n      }\n    },\n    // 处理页面刷新\n    handleBeforeUnload(e) {\n      if (this.hasActiveOperations) {\n        const message = '有正在执行的操作，确定要离开吗？'\n        e.preventDefault()\n        e.returnValue = message\n        return message\n      }\n    },\n    addCollectUrl() {\n      if (!Array.isArray(this.collectForm.urls)) {\n        // 如果 urls 不是数组，先初始化它\n        this.$set(this.collectForm, 'urls', [''])\n      } else {\n        this.collectForm.urls.push('')\n      }\n    },\n    removeCollectUrl(index) {\n      if (Array.isArray(this.collectForm.urls) && this.collectForm.urls.length > 1) {\n        this.collectForm.urls.splice(index, 1)\n      }\n    },\n    // 添加判断分辨率标签类型的方法\n    getResolutionTagType(resolution) {\n      if (!resolution || resolution === '未知') return 'info'\n      const [width] = resolution.split('x').map(Number)\n      if (width >= 1920) return 'success'\n      if (width >= 1280) return ''  // 默认类型\n      return 'warning'\n    },\n    // 添加判断响应时间标签类型的方法\n    getResponseTimeTagType(responseTime) {\n      if (!responseTime) return 'info'\n      if (responseTime <= 1000) return 'success'\n      if (responseTime <= 2000) return ''  // 默认类型\n      if (responseTime <= 3000) return 'warning'\n      return 'danger'\n    },\n    // 修改转换为txt格式的辅助方法\n    convertToTxtFormat(group, channels) {\n      const result = []\n      \n      // 添加分组标记\n      if (group && group !== '未分组') {\n        // 直接使用传入的 group 参数，不需要 currentGroup 变量\n        group = group || '未分组'\n      }\n\n      // 转换频道\n      Object.entries(channels).forEach(([name, urls]) => {\n        if (!name) return  // 跳过空名称\n        \n        urls.forEach(url => {\n          if (!url) return  // 跳过空URL\n          \n          result.push({\n            name: name,\n            url: url,\n            group: group,  // 使用传入的 group 参数\n            status: '未检测',\n            resolution: '',\n            responseTime: 0\n          })\n        })\n      })\n\n      return result\n    }\n  },\n  watch: {\n    // 只监听数据变化\n    streamList: {\n      handler() {\n        this.updateLinkContent()\n        this.saveState()\n      },\n      deep: true\n    },\n    currentPage() {\n      this.saveState()\n    },\n    pageSize() {\n      this.saveState()\n    },\n    // 监听所有可能的运行状态\n    isChecking() {\n      this.updateActiveStatus()\n    },\n    isCollecting() {\n      this.updateActiveStatus()\n    },\n    isScheduled() {\n      this.updateActiveStatus()\n    },\n    // 添加格式变化监听\n    'linkForm.format'() {\n      if (this.generateLinkDialogVisible) {\n        this.handleGenerateLink()\n      }\n    }\n  },\n  // 组件被激活时（重新显示）\n  activated() {\n    // 如果有定时任务，恢复定时器\n    if (this.isScheduled) {\n      this.setupSchedule()\n    }\n    // 如果有采集任务，恢复采集\n    if (this.isCollecting) {\n      this.startCollecting(true)\n    }\n  },\n  // 组件被停用时（离开但不销毁）\n  deactivated() {\n    // 暂停定时器，但保持状态标志\n    if (this.scheduleTimer) {\n      clearInterval(this.scheduleTimer)\n      this.scheduleTimer = null\n    }\n    // 暂停采集定时器，但保持状态标志\n    if (this.collectTimer) {\n      clearInterval(this.collectTimer)\n      this.collectTimer = null\n    }\n  }\n}\n</script>\n\n<style scoped>\n.stream-check {\n  padding: 20px;\n  background-color: #fff;\n  border-radius: 4px;\n}\n\n.table-operations {\n  margin-bottom: 20px;\n  display: flex;\n  gap: 10px; /* 按钮组之间的间距 */\n}\n\n.pagination-container {\n  margin-top: 20px;\n  display: flex;\n  justify-content: center;\n}\n\n.el-button [class*=\"el-icon-\"] {\n  font-size: 18px;\n}\n\n.delete-btn {\n  color: #F56C6C;\n}\n\n.delete-btn:hover {\n  color: #ff4d4d;\n}\n\n.setting-tip {\n  margin-left: 10px;\n  color: #909399;\n  font-size: 13px;\n}\n\n.link-info {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.link-info p {\n  margin: 0;\n  color: #606266;\n}\n\n.link-actions {\n  display: flex;\n  gap: 10px;\n  justify-content: flex-end;\n  margin-top: 10px;\n}\n\n/* 生成链接对话框样式 */\n.generate-link-dialog {\n  max-width: 600px;\n}\n\n.link-container {\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n}\n\n.link-card, .tips-card {\n  margin: 0;\n  border: 1px solid #EBEEF5;\n}\n\n.link-content {\n  padding: 10px;\n}\n\n.tips-content {\n  color: #606266;\n  font-size: 14px;\n  padding: 10px;\n}\n\n.tips-content ul {\n  margin: 0;\n  padding-left: 20px;\n  line-height: 1.8;\n}\n\n/* 覆盖 element-ui 的一些默认样式 */\n:deep(.el-dialog__body) {\n  padding: 20px;\n}\n\n:deep(.el-card__header) {\n  padding: 12px 20px;\n  font-weight: 500;\n}\n\n:deep(.el-card__body) {\n  padding: 15px;\n}\n\n/* 可以添加一些自定义样式 */\n.el-tag {\n  width: 90px;  /* 统一标签宽度 */\n}\n\n.el-tag + .el-tag {\n  margin-left: 4px;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}