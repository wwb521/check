{"ast":null,"code":"export default {\n  name: 'StreamCheck',\n  data() {\n    return {\n      // No changes to data section\n    };\n  },\n  computed: {\n    paginatedData() {\n      const start = (this.currentPage - 1) * this.pageSize;\n      const end = start + this.pageSize;\n      return this.streamList.slice(start, end);\n    },\n    checkButtonText() {\n      if (!this.isChecking && !this.isPaused) {\n        return '批量检测';\n      }\n      return `检测中 ${this.checkedCount}/${this.totalCount}`;\n    },\n    mergedStreams() {\n      // 按分组对流进行分组\n      const groupedStreams = {};\n      this.streamList.forEach(stream => {\n        const group = stream.group || '未分组';\n        if (!groupedStreams[group]) {\n          groupedStreams[group] = {};\n        }\n\n        // 使用名称作为键来合并相同名称的URL\n        if (!groupedStreams[group][stream.name]) {\n          groupedStreams[group][stream.name] = [];\n        }\n        groupedStreams[group][stream.name].push(stream.url);\n      });\n\n      // 转换为最终格式\n      const result = [];\n      Object.entries(groupedStreams).forEach(([group, streams]) => {\n        result.push({\n          name: group,\n          urls: Object.entries(streams).map(([name, urls]) => ({\n            name,\n            urls\n          }))\n        });\n      });\n      return result;\n    }\n  },\n  created() {\n    // No changes to created section\n  },\n  beforeDestroy() {\n    // No changes to beforeDestroy section\n  },\n  methods: {\n    async checkStream(stream) {\n      const ffprobePath = localStorage.getItem('ffprobePath');\n      if (!ffprobePath) {\n        this.$message.error('请先在系统设置中配置FFprobe路径');\n        return false;\n      }\n      try {\n        const response = await fetch('http://localhost:8080/api/check-stream', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            url: stream.url,\n            ffprobePath: ffprobePath\n          })\n        });\n        if (!response.ok) throw new Error('请求失败');\n        const result = await response.json();\n\n        // 更新流信息\n        stream.status = result.available ? '正常' : '异常';\n        stream.resolution = result.resolution || '';\n        stream.responseTime = result.responseTime || 0;\n\n        // 检查是否需要自动清除\n        if (this.shouldRemoveStream(stream)) {\n          let reason = '';\n          if (stream.status === '异常') {\n            reason = '异常源';\n          } else if (stream.responseTime > 3000) {\n            reason = '响应时间过慢';\n          } else {\n            reason = '分辨率过低';\n          }\n\n          // 找到当前页的所有项\n          const currentPageItems = this.paginatedData;\n          // 找到要删除项在当前页的索引\n          const pageIndex = currentPageItems.indexOf(stream);\n          // 找到要删除项在整个列表中的索引\n          const listIndex = this.streamList.indexOf(stream);\n          if (listIndex > -1) {\n            this.streamList.splice(listIndex, 1);\n            // 如果删除的是当前页的最后一项，且不是第一页，则跳转到上一页\n            if (pageIndex === currentPageItems.length - 1 && this.currentPage > 1) {\n              this.currentPage--;\n            }\n            // 添加删除原因提示\n            this.$message.warning(`已自动清除直播源：${reason}`);\n          }\n        }\n        this.saveStreamList();\n        return result.available;\n      } catch (error) {\n        console.error('检测错误:', error);\n        stream.status = '异常';\n        return false;\n      }\n    },\n    async handleBatchCheck() {\n      if (this.isPaused) {\n        this.resumeCheck();\n        return;\n      }\n      if (this.streamList.length === 0) {\n        this.$message.warning('列表为空');\n        return;\n      }\n      this.isChecking = true;\n      this.isPaused = false;\n      this.shouldStop = false;\n      this.checkedCount = 0;\n      this.totalCount = this.streamList.length;\n      await this.batchCheck(0);\n    },\n    async batchCheck(startIndex) {\n      let successCount = 0;\n      let failCount = 0;\n      const validStreams = [];\n      for (let i = startIndex; i < this.streamList.length; i++) {\n        if (this.shouldStop) {\n          this.pausedIndex = i;\n          this.isPaused = true;\n          this.isChecking = false;\n          return;\n        }\n        const stream = this.streamList[i];\n        try {\n          const response = await fetch('http://localhost:8080/api/check-stream', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              url: stream.url,\n              ffprobePath: localStorage.getItem('ffprobePath')\n            })\n          });\n          if (!response.ok) throw new Error('请求失败');\n          const result = await response.json();\n\n          // 更新流信息\n          stream.status = result.available ? '正常' : '异常';\n          stream.resolution = result.resolution || '';\n          stream.responseTime = result.responseTime || 0;\n          if (result.available) {\n            successCount++;\n          } else {\n            failCount++;\n          }\n\n          // 根据设置决定是否保留该项\n          if (!this.shouldRemoveStream(stream)) {\n            validStreams.push(stream);\n          }\n        } catch (error) {\n          console.error('检测错误:', error);\n          stream.status = '异常';\n          failCount++;\n\n          // 如果不自动清除异常源，则保留该项\n          if (!localStorage.getItem('autoRemoveInvalid') === 'true') {\n            validStreams.push(stream);\n          }\n        }\n        this.checkedCount++;\n      }\n\n      // 如果检测完成（不是暂停状态）\n      if (!this.shouldStop) {\n        // 批量更新列表\n        this.streamList = validStreams;\n\n        // 更新分页\n        const maxPage = Math.ceil(this.streamList.length / this.pageSize);\n        if (this.currentPage > maxPage) {\n          this.currentPage = Math.max(maxPage, 1);\n        }\n\n        // 保存更新后的列表\n        this.saveStreamList();\n        this.isChecking = false;\n        this.isPaused = false;\n        this.pausedIndex = -1;\n        this.$message.success(`检测完成: ${successCount}个正常, ${failCount}个异常`);\n      }\n    },\n    pauseCheck() {\n      this.shouldStop = true;\n    },\n    async resumeCheck() {\n      if (this.pausedIndex >= 0) {\n        this.isChecking = true;\n        this.isPaused = false;\n        this.shouldStop = false;\n        await this.batchCheck(this.pausedIndex);\n      }\n    },\n    async handleCheck(row) {\n      row.status = '检测中';\n      const success = await this.checkStream(row);\n      this.$message[success ? 'success' : 'error'](`检测${success ? '成功' : '失败'}: ${row.name}`);\n    },\n    handleDelete(row) {\n      this.$confirm('确认删除该直播源?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        const index = this.streamList.indexOf(row);\n        this.streamList.splice(index, 1);\n        const maxPage = Math.ceil(this.streamList.length / this.pageSize);\n        if (this.currentPage > maxPage) {\n          this.currentPage = Math.max(maxPage, 1);\n        }\n        this.saveStreamList(); // 保存更新后的列表\n        this.$message.success('删除成功');\n      }).catch(() => {});\n    },\n    async handleUrlImport() {\n      const valid = await this.$refs.importForm.validate();\n      if (!valid) return;\n      try {\n        const response = await fetch(this.importForm.url);\n        if (!response.ok) throw new Error('网络请求失败');\n        const content = await response.text();\n        const newStreams = this.parseContent(content);\n        if (newStreams.length > 0) {\n          // 过滤重复的直播源\n          const existingUrls = new Set(this.streamList.map(s => s.url));\n          const uniqueStreams = newStreams.filter(s => !existingUrls.has(s.url));\n          if (uniqueStreams.length > 0) {\n            this.streamList.push(...uniqueStreams);\n            this.$message.success(`成功导入 ${uniqueStreams.length} 个直播源`);\n            this.importUrlDialogVisible = false;\n          } else {\n            this.$message.info('没有新的直播源可以导入');\n          }\n        } else {\n          this.$message.warning('未找到有效的直播源');\n        }\n      } catch (error) {\n        this.$message.error('导入失败：' + error.message);\n      }\n    },\n    readFile(file) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = e => resolve(e.target.result);\n        reader.onerror = () => reject(new Error('文件读取失败'));\n        reader.readAsText(file);\n      });\n    },\n    parseContent(content) {\n      const lines = content.split('\\n');\n      const streams = [];\n\n      // 检测是否是 m3u 格式\n      if (content.includes('#EXTM3U')) {\n        // 转换 m3u 为 txt 格式\n        let currentName = '';\n        let currentGroupTitle = '未分组';\n        let streamsByGroup = {};\n        lines.forEach(line => {\n          line = line.trim();\n          if (!line) return;\n          if (line.includes('group-title=')) {\n            // 提取分组信息\n            const match = line.match(/group-title=\"([^\"]*)\"/);\n            if (match) {\n              currentGroupTitle = match[1] || '未分组';\n            }\n          }\n          if (line.startsWith('#EXTINF:')) {\n            // 提取频道名称\n            const nameMatch = line.match(/,(.+)$/);\n            if (nameMatch) {\n              currentName = nameMatch[1].trim();\n            }\n          } else if (!line.startsWith('#') && line.trim()) {\n            // 这是一个媒体URL\n            if (!streamsByGroup[currentGroupTitle]) {\n              streamsByGroup[currentGroupTitle] = {};\n            }\n\n            // 使用名称作为键来合并相同名称的URL\n            if (!streamsByGroup[currentGroupTitle][currentName]) {\n              streamsByGroup[currentGroupTitle][currentName] = [];\n            }\n            streamsByGroup[currentGroupTitle][currentName].push(line.trim());\n          }\n        });\n\n        // 转换为 txt 格式的数组\n        Object.entries(streamsByGroup).forEach(([group, channels]) => {\n          streams.push(...this.convertToTxtFormat(group, channels));\n        });\n      } else {\n        // 原有的 txt 格式处理\n        let currentGroup = '未分组'; // 在这里定义 currentGroup\n\n        lines.forEach(line => {\n          line = line.trim();\n          if (!line) return;\n          if (line.endsWith(',#genre#')) {\n            currentGroup = line.replace(',#genre#', '');\n            return;\n          }\n          const [name, urls] = line.split(',');\n          if (!name || !urls) return;\n          const urlList = urls.split('#');\n          urlList.forEach(url => {\n            if (url && url.trim()) {\n              streams.push({\n                name: name,\n                url: url.trim(),\n                group: currentGroup,\n                status: '未检测',\n                resolution: '',\n                responseTime: 0\n              });\n            }\n          });\n        });\n      }\n      return streams;\n    },\n    addStreamsToList(streams) {\n      streams.forEach(stream => {\n        this.streamList.push(stream);\n      });\n      this.currentPage = 1;\n      this.saveStreamList(); // 保存更新后的列表\n    },\n    handleSizeChange(val) {\n      this.pageSize = val;\n      // 当每页条数改变时，重置当前页为第一页\n      this.currentPage = 1;\n    },\n    handleCurrentChange(val) {\n      this.currentPage = val;\n    },\n    async handleFileUpload(event) {\n      const file = event.target.files[0];\n      if (!file) return;\n      try {\n        const content = await this.readFile(file);\n        const newStreams = this.parseContent(content);\n        if (newStreams.length > 0) {\n          // 过滤重复的直播源\n          const existingUrls = new Set(this.streamList.map(s => s.url));\n          const uniqueStreams = newStreams.filter(s => !existingUrls.has(s.url));\n          if (uniqueStreams.length > 0) {\n            this.streamList.push(...uniqueStreams);\n            this.$message.success(`成功导入 ${uniqueStreams.length} 个直播源`);\n          } else {\n            this.$message.info('没有新的直播源可以导入');\n          }\n        } else {\n          this.$message.warning('未找到有效的直播源');\n        }\n      } catch (error) {\n        this.$message.error('文件读取失败：' + error.message);\n      } finally {\n        // 清除文件输入，允许重复选择同一文件\n        event.target.value = '';\n      }\n    },\n    getGroupFromFileName(filename) {\n      // 从文件名中提取可能的分组名\n      const name = filename.toLowerCase();\n      if (name.includes('cctv')) return 'CCTV';\n      if (name.includes('卫视')) return '卫视';\n      if (name.includes('地方')) return '地方台';\n      return '未分组';\n    },\n    handleClearList() {\n      if (this.streamList.length === 0) {\n        this.$message.warning('列表已经为空');\n        return;\n      }\n      this.$confirm('确认清空所有直播源?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        this.streamList = [];\n        this.currentPage = 1;\n        this.saveStreamList(); // 保存更新后的列表\n        this.$message.success('列表已清空');\n      }).catch(() => {});\n    },\n    handleCopy(row) {\n      // 创建一个临时输入框来实现复制功能\n      const textarea = document.createElement('textarea');\n      textarea.value = row.url;\n      document.body.appendChild(textarea);\n      textarea.select();\n      try {\n        document.execCommand('copy');\n        this.$message.success('链接已复制到剪贴板');\n      } catch (err) {\n        this.$message.error('复制失败');\n      } finally {\n        document.body.removeChild(textarea);\n      }\n    },\n    shouldRemoveStream(stream) {\n      // 检查是否需要清除异常源\n      if (localStorage.getItem('autoRemoveInvalid') === 'true' && stream.status === '异常') {\n        return true;\n      }\n\n      // 检查是否需要清除低分辨率源\n      if (localStorage.getItem('autoRemoveLowRes') === 'true' && stream.resolution !== '未知') {\n        const [width, height] = stream.resolution.split('x').map(Number);\n        if (width < 1280 || height < 720) {\n          return true;\n        }\n      }\n\n      // 添加新的检查：响应时间\n      if (localStorage.getItem('autoRemoveSlowResponse') === 'true' && stream.responseTime > 3000) {\n        return true;\n      }\n      return false;\n    },\n    saveStreamList() {\n      if (localStorage.getItem('persistentData') === 'true') {\n        localStorage.setItem('streamList', JSON.stringify(this.streamList));\n      }\n    },\n    handleCollectMode() {\n      if (this.isCollecting) {\n        this.stopCollecting();\n      } else {\n        this.collectDialogVisible = true;\n      }\n    },\n    async startCollecting(isRestore = false) {\n      if (!isRestore) {\n        // 确保 urls 是数组\n        if (!Array.isArray(this.collectForm.urls)) {\n          this.$set(this.collectForm, 'urls', ['']);\n          return;\n        }\n        const valid = await this.$refs.collectForm.validate();\n        if (!valid) return;\n      }\n      this.collectDialogVisible = false;\n      this.isCollecting = true;\n      this.saveState(); // 保存状态\n\n      // 立即执行一次采集\n      if (!isRestore) {\n        await this.collect();\n      }\n\n      // 如果开启了自动采集，设置定时器\n      if (this.collectForm.autoCollect) {\n        this.collectTimer = setInterval(async () => {\n          await this.collect();\n        }, this.collectForm.interval * 60 * 1000);\n      }\n    },\n    stopCollecting() {\n      this.isCollecting = false;\n      if (this.collectTimer) {\n        clearInterval(this.collectTimer);\n        this.collectTimer = null;\n      }\n      this.saveState(); // 保存状态\n      this.$message.success('已停止采集');\n    },\n    async collect() {\n      try {\n        // 检查是否有检测正在进行\n        if (this.isChecking) {\n          this.$message.warning('检测正在进行中，暂时跳过本次采集');\n          return;\n        }\n        this.$message.info('开始采集直播源...');\n\n        // 并发采集所有地址\n        const results = await Promise.allSettled(this.collectForm.urls.map(async url => {\n          try {\n            const response = await fetch(url);\n            if (!response.ok) throw new Error(`采集失败: ${url}`);\n            const content = await response.text();\n            const newStreams = this.parseContent(content);\n\n            // 过滤重复的直播源，同时考虑正在检测的源\n            const existingUrls = new Set(this.streamList.map(s => s.url));\n            return newStreams.filter(s => {\n              // 如果源已存在且正在检测中，保留原有状态\n              const existingStream = this.streamList.find(es => es.url === s.url);\n              if (existingStream && existingStream.status === '检测中') {\n                return false;\n              }\n              return !existingUrls.has(s.url);\n            });\n          } catch (error) {\n            console.error(`采集地址 ${url} 失败:`, error);\n            return [];\n          }\n        }));\n\n        // 合并所有采集结果\n        const allNewStreams = results.filter(result => result.status === 'fulfilled').flatMap(result => result.value).filter((stream, index, self) => index === self.findIndex(s => s.url === stream.url));\n\n        // 添加新的直播源到列表\n        if (allNewStreams.length > 0) {\n          this.addStreamsToList(allNewStreams);\n          this.$message.success(`采集成功: 新增${allNewStreams.length}个直播源`);\n        } else {\n          this.$message.info('未发现新的直播源');\n        }\n\n        // 统计失败的地址\n        const failedUrls = results.filter(result => result.status === 'rejected').length;\n        if (failedUrls > 0) {\n          this.$message.warning(`${failedUrls}个地址采集失败`);\n        }\n      } catch (error) {\n        this.$message.error('采集失败：' + error.message);\n        if (!this.collectForm.autoCollect) {\n          this.stopCollecting();\n        }\n      }\n    },\n    async handleGenerateLink() {\n      try {\n        this.generateLinkDialogVisible = true;\n        const content = this.generateContent();\n        const format = this.linkForm.format;\n        const response = await fetch('http://localhost:8080/api/generate-link', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain',\n            'X-File-Format': format // 添加格式标记\n          },\n          body: content\n        });\n        if (!response.ok) {\n          throw new Error('生成链接失败');\n        }\n        this.generatedLink = await response.text();\n      } catch (error) {\n        this.$message.error('生成链接失败：' + error.message);\n      }\n    },\n    generateContent() {\n      return this.linkForm.format === 'm3u' ? this.generateM3uContent() : this.generateTxtContent();\n    },\n    generateTxtContent() {\n      let content = '';\n      let currentGroup = '';\n      this.mergedStreams.forEach(stream => {\n        if (stream.group !== currentGroup) {\n          currentGroup = stream.group;\n          content += `${currentGroup},#genre#\\n`;\n        }\n        content += `${stream.name},${stream.urls.join('#')}\\n`;\n      });\n      return content.trim();\n    },\n    generateM3uContent() {\n      let content = '#EXTM3U\\n';\n      let currentGroup = '';\n      this.mergedStreams.forEach(stream => {\n        if (stream.group !== currentGroup) {\n          currentGroup = stream.group;\n          content += `\\n#EXTINF:-1 group-title=\"${currentGroup}\"\\n`;\n        }\n        // 对于多个URL，创建多个条目\n        stream.urls.forEach(url => {\n          content += `#EXTINF:-1,${stream.name}\\n${url}\\n`;\n        });\n      });\n      return content.trim();\n    },\n    copyGeneratedLink() {\n      const textarea = document.createElement('textarea');\n      textarea.value = this.generatedLink;\n      document.body.appendChild(textarea);\n      textarea.select();\n      try {\n        document.execCommand('copy');\n        this.$message.success('链接已复制到剪贴板');\n      } catch (err) {\n        this.$message.error('复制失败');\n      } finally {\n        document.body.removeChild(textarea);\n      }\n    },\n    downloadTxtFile() {\n      const blob = new Blob([this.generatedLink], {\n        type: 'text/plain;charset=utf-8'\n      });\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `直播源列表_${new Date().toLocaleDateString()}.txt`;\n      document.body.appendChild(link);\n      link.click();\n\n      // 清理\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(link);\n      this.$message.success('文件下载成功');\n    },\n    // 修改更新链接内容的方法\n    async updateLinkContent() {\n      try {\n        const content = this.generateContent();\n        await fetch('http://localhost:8080/api/update-content', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain'\n          },\n          body: content\n        });\n      } catch (error) {\n        console.error('更新链接内容失败：', error);\n      }\n    },\n    handleScheduleCheck() {\n      if (this.isScheduled) {\n        this.stopScheduleCheck();\n      } else {\n        this.scheduleDialogVisible = true;\n      }\n    },\n    startScheduleCheck() {\n      this.$refs.scheduleForm.validate(valid => {\n        if (valid) {\n          this.scheduleDialogVisible = false;\n          this.isScheduled = true;\n          this.setupSchedule();\n          this.saveState(); // 保存状态\n          this.$message.success('定时检测已开启');\n        }\n      });\n    },\n    stopScheduleCheck() {\n      if (this.scheduleTimer) {\n        clearInterval(this.scheduleTimer);\n        this.scheduleTimer = null;\n      }\n      this.isScheduled = false;\n      this.nextScheduleTime = null;\n      this.saveState(); // 保存状态\n      this.$message.success('定时检测已停止');\n    },\n    setupSchedule() {\n      // 清除现有定时器\n      if (this.scheduleTimer) {\n        clearInterval(this.scheduleTimer);\n      }\n\n      // 计算检查间隔（转换为毫秒）\n      const interval = this.scheduleForm.unit === 'second' ? this.scheduleForm.interval * 1000 : this.scheduleForm.interval * 60 * 1000;\n\n      // 设置下次执行时间\n      this.nextScheduleTime = new Date(Date.now() + interval);\n\n      // 设置检查频率（秒级检测使用1秒检查，分钟级使用1分钟检查）\n      const checkInterval = this.scheduleForm.unit === 'second' ? 1000 : 60000;\n      this.scheduleTimer = setInterval(() => {\n        const now = new Date();\n\n        // 如果当前正在检测中，跳过这次执行\n        if (this.isChecking) {\n          return;\n        }\n\n        // 检查是否到达执行时间\n        if (now >= this.nextScheduleTime) {\n          this.handleBatchCheck();\n          // 更新下次执行时间\n          this.nextScheduleTime = new Date(Date.now() + interval);\n        }\n      }, checkInterval);\n    },\n    // 保存当前状态到本地存储\n    saveState() {\n      // 只保存基础数据和设置，不保存运行状态\n      const state = {\n        streamList: this.streamList,\n        currentPage: this.currentPage,\n        pageSize: this.pageSize,\n        scheduleForm: this.scheduleForm,\n        collectForm: this.collectForm\n      };\n      localStorage.setItem(this.stateKey, JSON.stringify(state));\n    },\n    // 从本地存储恢复状态\n    restoreState() {\n      try {\n        const savedState = localStorage.getItem(this.stateKey);\n        if (savedState) {\n          const state = JSON.parse(savedState);\n\n          // 只恢复基础数据和设置\n          this.streamList = state.streamList || [];\n          this.currentPage = state.currentPage || 1;\n          this.pageSize = state.pageSize || 5;\n          this.scheduleForm = state.scheduleForm || this.scheduleForm;\n          this.collectForm = state.collectForm || this.collectForm;\n\n          // 重置所有运行状态\n          this.isChecking = false;\n          this.isPaused = false;\n          this.isScheduled = false;\n          this.isCollecting = false;\n          this.checkedCount = 0;\n          this.totalCount = 0;\n          this.pausedIndex = -1;\n          this.nextScheduleTime = null;\n        }\n      } catch (error) {\n        console.error('恢复状态失败：', error);\n      }\n    },\n    // 添加重置所有运行状态的方法\n    resetAllStates() {\n      // 停止定时检测\n      if (this.isScheduled) {\n        this.stopScheduleCheck();\n      }\n\n      // 停止采集\n      if (this.isCollecting) {\n        this.stopCollecting();\n      }\n\n      // 停止批量检测\n      if (this.isChecking) {\n        this.shouldStop = true;\n        this.isChecking = false;\n        this.isPaused = false;\n      }\n\n      // 重置所有状态\n      this.isChecking = false;\n      this.isPaused = false;\n      this.isScheduled = false;\n      this.isCollecting = false;\n      this.checkedCount = 0;\n      this.totalCount = 0;\n      this.pausedIndex = -1;\n      this.nextScheduleTime = null;\n\n      // 清除所有定时器\n      if (this.scheduleTimer) {\n        clearInterval(this.scheduleTimer);\n        this.scheduleTimer = null;\n      }\n      if (this.collectTimer) {\n        clearInterval(this.collectTimer);\n        this.collectTimer = null;\n      }\n\n      // 保存重置后的状态\n      this.saveState();\n      this.$message.success('所有运行状态已重置');\n    },\n    // 更新活动状态\n    updateActiveStatus() {\n      const hasActive = this.isChecking || this.isCollecting || this.isScheduled;\n      if (this.hasActiveOperations !== hasActive) {\n        this.hasActiveOperations = hasActive;\n        if (hasActive) {\n          // 添加刷新拦截\n          window.addEventListener('beforeunload', this.handleBeforeUnload);\n        } else {\n          // 移除刷新拦截\n          window.removeEventListener('beforeunload', this.handleBeforeUnload);\n        }\n      }\n    },\n    // 处理页面刷新\n    handleBeforeUnload(e) {\n      if (this.hasActiveOperations) {\n        const message = '有正在执行的操作，确定要离开吗？';\n        e.preventDefault();\n        e.returnValue = message;\n        return message;\n      }\n    },\n    addCollectUrl() {\n      if (!Array.isArray(this.collectForm.urls)) {\n        // 如果 urls 不是数组，先初始化它\n        this.$set(this.collectForm, 'urls', ['']);\n      } else {\n        this.collectForm.urls.push('');\n      }\n    },\n    removeCollectUrl(index) {\n      if (Array.isArray(this.collectForm.urls) && this.collectForm.urls.length > 1) {\n        this.collectForm.urls.splice(index, 1);\n      }\n    },\n    // 添加判断分辨率标签类型的方法\n    getResolutionTagType(resolution) {\n      if (!resolution || resolution === '未知') return 'info';\n      const [width] = resolution.split('x').map(Number);\n      if (width >= 1920) return 'success';\n      if (width >= 1280) return ''; // 默认类型\n      return 'warning';\n    },\n    // 添加判断响应时间标签类型的方法\n    getResponseTimeTagType(responseTime) {\n      if (!responseTime) return 'info';\n      if (responseTime <= 1000) return 'success';\n      if (responseTime <= 2000) return ''; // 默认类型\n      if (responseTime <= 3000) return 'warning';\n      return 'danger';\n    },\n    // 添加转换为txt格式的辅助方法\n    convertToTxtFormat(group, channels) {\n      const result = [];\n\n      // 添加分组标记\n      if (group && group !== '未分组') {\n        result.push({\n          isGroupMarker: true,\n          group: group\n        });\n      }\n\n      // 转换频道\n      Object.entries(channels).forEach(([name, urls]) => {\n        urls.forEach(url => {\n          result.push({\n            name: name,\n            url: url,\n            group: group,\n            status: '未检测',\n            resolution: '',\n            responseTime: 0\n          });\n        });\n      });\n      return result;\n    }\n  },\n  watch: {\n    // 只监听数据变化\n    streamList: {\n      handler() {\n        this.updateLinkContent();\n        this.saveState();\n      },\n      deep: true\n    },\n    currentPage() {\n      this.saveState();\n    },\n    pageSize() {\n      this.saveState();\n    },\n    // 监听所有可能的运行状态\n    isChecking() {\n      this.updateActiveStatus();\n    },\n    isCollecting() {\n      this.updateActiveStatus();\n    },\n    isScheduled() {\n      this.updateActiveStatus();\n    },\n    // 添加格式变化监听\n    'linkForm.format'() {\n      if (this.generateLinkDialogVisible) {\n        this.handleGenerateLink();\n      }\n    }\n  },\n  // 组件被激活时（重新显示）\n  activated() {\n    // 如果有定时任务，恢复定时器\n    if (this.isScheduled) {\n      this.setupSchedule();\n    }\n    // 如果有采集任务，恢复采集\n    if (this.isCollecting) {\n      this.startCollecting(true);\n    }\n  },\n  // 组件被停用时（离开但不销毁）\n  deactivated() {\n    // 暂停定时器，但保持状态标志\n    if (this.scheduleTimer) {\n      clearInterval(this.scheduleTimer);\n      this.scheduleTimer = null;\n    }\n    // 暂停采集定时器，但保持状态标志\n    if (this.collectTimer) {\n      clearInterval(this.collectTimer);\n      this.collectTimer = null;\n    }\n  }\n};","map":{"version":3,"names":["name","data","computed","paginatedData","start","currentPage","pageSize","end","streamList","slice","checkButtonText","isChecking","isPaused","checkedCount","totalCount","mergedStreams","groupedStreams","forEach","stream","group","push","url","result","Object","entries","streams","urls","map","created","beforeDestroy","methods","checkStream","ffprobePath","localStorage","getItem","$message","error","response","fetch","method","headers","body","JSON","stringify","ok","Error","json","status","available","resolution","responseTime","shouldRemoveStream","reason","currentPageItems","pageIndex","indexOf","listIndex","splice","length","warning","saveStreamList","console","handleBatchCheck","resumeCheck","shouldStop","batchCheck","startIndex","successCount","failCount","validStreams","i","pausedIndex","maxPage","Math","ceil","max","success","pauseCheck","handleCheck","row","handleDelete","$confirm","confirmButtonText","cancelButtonText","type","then","index","catch","handleUrlImport","valid","$refs","importForm","validate","content","text","newStreams","parseContent","existingUrls","Set","s","uniqueStreams","filter","has","importUrlDialogVisible","info","message","readFile","file","Promise","resolve","reject","reader","FileReader","onload","e","target","onerror","readAsText","lines","split","includes","currentName","currentGroupTitle","streamsByGroup","line","trim","match","startsWith","nameMatch","channels","convertToTxtFormat","currentGroup","endsWith","replace","urlList","addStreamsToList","handleSizeChange","val","handleCurrentChange","handleFileUpload","event","files","value","getGroupFromFileName","filename","toLowerCase","handleClearList","handleCopy","textarea","document","createElement","appendChild","select","execCommand","err","removeChild","width","height","Number","setItem","handleCollectMode","isCollecting","stopCollecting","collectDialogVisible","startCollecting","isRestore","Array","isArray","collectForm","$set","saveState","collect","autoCollect","collectTimer","setInterval","interval","clearInterval","results","allSettled","existingStream","find","es","allNewStreams","flatMap","self","findIndex","failedUrls","handleGenerateLink","generateLinkDialogVisible","generateContent","format","linkForm","generatedLink","generateM3uContent","generateTxtContent","join","copyGeneratedLink","downloadTxtFile","blob","Blob","window","URL","createObjectURL","link","href","download","Date","toLocaleDateString","click","revokeObjectURL","updateLinkContent","handleScheduleCheck","isScheduled","stopScheduleCheck","scheduleDialogVisible","startScheduleCheck","scheduleForm","setupSchedule","scheduleTimer","nextScheduleTime","unit","now","checkInterval","state","stateKey","restoreState","savedState","parse","resetAllStates","updateActiveStatus","hasActive","hasActiveOperations","addEventListener","handleBeforeUnload","removeEventListener","preventDefault","returnValue","addCollectUrl","removeCollectUrl","getResolutionTagType","getResponseTimeTagType","isGroupMarker","watch","handler","deep","linkForm.format","activated","deactivated"],"sources":["src/components/StreamCheck.vue"],"sourcesContent":["<template>\n  <div class=\"stream-check\">\n    <!-- No changes to template section -->\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'StreamCheck',\n  data() {\n    return {\n      // No changes to data section\n    }\n  },\n  computed: {\n    paginatedData() {\n      const start = (this.currentPage - 1) * this.pageSize\n      const end = start + this.pageSize\n      return this.streamList.slice(start, end)\n    },\n    checkButtonText() {\n      if (!this.isChecking && !this.isPaused) {\n        return '批量检测'\n      }\n      return `检测中 ${this.checkedCount}/${this.totalCount}`\n    },\n    mergedStreams() {\n      // 按分组对流进行分组\n      const groupedStreams = {}\n      \n      this.streamList.forEach(stream => {\n        const group = stream.group || '未分组'\n        if (!groupedStreams[group]) {\n          groupedStreams[group] = {}\n        }\n        \n        // 使用名称作为键来合并相同名称的URL\n        if (!groupedStreams[group][stream.name]) {\n          groupedStreams[group][stream.name] = []\n        }\n        groupedStreams[group][stream.name].push(stream.url)\n      })\n      \n      // 转换为最终格式\n      const result = []\n      Object.entries(groupedStreams).forEach(([group, streams]) => {\n        result.push({\n          name: group,\n          urls: Object.entries(streams).map(([name, urls]) => ({\n            name,\n            urls\n          }))\n        })\n      })\n      \n      return result\n    }\n  },\n  created() {\n    // No changes to created section\n  },\n  beforeDestroy() {\n    // No changes to beforeDestroy section\n  },\n  methods: {\n    async checkStream(stream) {\n      const ffprobePath = localStorage.getItem('ffprobePath')\n      if (!ffprobePath) {\n        this.$message.error('请先在系统设置中配置FFprobe路径')\n        return false\n      }\n\n      try {\n        const response = await fetch('http://localhost:8080/api/check-stream', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            url: stream.url,\n            ffprobePath: ffprobePath\n          })\n        })\n\n        if (!response.ok) throw new Error('请求失败')\n        \n        const result = await response.json()\n        \n        // 更新流信息\n        stream.status = result.available ? '正常' : '异常'\n        stream.resolution = result.resolution || ''\n        stream.responseTime = result.responseTime || 0\n\n        // 检查是否需要自动清除\n        if (this.shouldRemoveStream(stream)) {\n          let reason = ''\n          if (stream.status === '异常') {\n            reason = '异常源'\n          } else if (stream.responseTime > 3000) {\n            reason = '响应时间过慢'\n          } else {\n            reason = '分辨率过低'\n          }\n\n          // 找到当前页的所有项\n          const currentPageItems = this.paginatedData\n          // 找到要删除项在当前页的索引\n          const pageIndex = currentPageItems.indexOf(stream)\n          // 找到要删除项在整个列表中的索引\n          const listIndex = this.streamList.indexOf(stream)\n          \n          if (listIndex > -1) {\n            this.streamList.splice(listIndex, 1)\n            // 如果删除的是当前页的最后一项，且不是第一页，则跳转到上一页\n            if (pageIndex === currentPageItems.length - 1 && this.currentPage > 1) {\n              this.currentPage--\n            }\n            // 添加删除原因提示\n            this.$message.warning(`已自动清除直播源：${reason}`)\n          }\n        }\n        \n        this.saveStreamList()\n        return result.available\n      } catch (error) {\n        console.error('检测错误:', error)\n        stream.status = '异常'\n        return false\n      }\n    },\n\n    async handleBatchCheck() {\n      if (this.isPaused) {\n        this.resumeCheck()\n        return\n      }\n      \n      if (this.streamList.length === 0) {\n        this.$message.warning('列表为空')\n        return\n      }\n\n      this.isChecking = true\n      this.isPaused = false\n      this.shouldStop = false\n      this.checkedCount = 0\n      this.totalCount = this.streamList.length\n      \n      await this.batchCheck(0)\n    },\n\n    async batchCheck(startIndex) {\n      let successCount = 0\n      let failCount = 0\n      const validStreams = []\n      \n      for (let i = startIndex; i < this.streamList.length; i++) {\n        if (this.shouldStop) {\n          this.pausedIndex = i\n          this.isPaused = true\n          this.isChecking = false\n          return\n        }\n\n        const stream = this.streamList[i]\n        try {\n          const response = await fetch('http://localhost:8080/api/check-stream', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              url: stream.url,\n              ffprobePath: localStorage.getItem('ffprobePath')\n            })\n          })\n\n          if (!response.ok) throw new Error('请求失败')\n          \n          const result = await response.json()\n          \n          // 更新流信息\n          stream.status = result.available ? '正常' : '异常'\n          stream.resolution = result.resolution || ''\n          stream.responseTime = result.responseTime || 0\n\n          if (result.available) {\n            successCount++\n          } else {\n            failCount++\n          }\n\n          // 根据设置决定是否保留该项\n          if (!this.shouldRemoveStream(stream)) {\n            validStreams.push(stream)\n          }\n        } catch (error) {\n          console.error('检测错误:', error)\n          stream.status = '异常'\n          failCount++\n          \n          // 如果不自动清除异常源，则保留该项\n          if (!localStorage.getItem('autoRemoveInvalid') === 'true') {\n            validStreams.push(stream)\n          }\n        }\n        \n        this.checkedCount++\n      }\n\n      // 如果检测完成（不是暂停状态）\n      if (!this.shouldStop) {\n        // 批量更新列表\n        this.streamList = validStreams\n        \n        // 更新分页\n        const maxPage = Math.ceil(this.streamList.length / this.pageSize)\n        if (this.currentPage > maxPage) {\n          this.currentPage = Math.max(maxPage, 1)\n        }\n        \n        // 保存更新后的列表\n        this.saveStreamList()\n        \n        this.isChecking = false\n        this.isPaused = false\n        this.pausedIndex = -1\n        this.$message.success(`检测完成: ${successCount}个正常, ${failCount}个异常`)\n      }\n    },\n\n    pauseCheck() {\n      this.shouldStop = true\n    },\n\n    async resumeCheck() {\n      if (this.pausedIndex >= 0) {\n        this.isChecking = true\n        this.isPaused = false\n        this.shouldStop = false\n        await this.batchCheck(this.pausedIndex)\n      }\n    },\n\n    async handleCheck(row) {\n      row.status = '检测中'\n      \n      const success = await this.checkStream(row)\n      this.$message[success ? 'success' : 'error'](`检测${success ? '成功' : '失败'}: ${row.name}`)\n    },\n    handleDelete(row) {\n      this.$confirm('确认删除该直播源?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        const index = this.streamList.indexOf(row)\n        this.streamList.splice(index, 1)\n        const maxPage = Math.ceil(this.streamList.length / this.pageSize)\n        if (this.currentPage > maxPage) {\n          this.currentPage = Math.max(maxPage, 1)\n        }\n        this.saveStreamList()  // 保存更新后的列表\n        this.$message.success('删除成功')\n      }).catch(() => {})\n    },\n    async handleUrlImport() {\n      const valid = await this.$refs.importForm.validate()\n      if (!valid) return\n\n      try {\n        const response = await fetch(this.importForm.url)\n        if (!response.ok) throw new Error('网络请求失败')\n\n        const content = await response.text()\n        const newStreams = this.parseContent(content)\n\n        if (newStreams.length > 0) {\n          // 过滤重复的直播源\n          const existingUrls = new Set(this.streamList.map(s => s.url))\n          const uniqueStreams = newStreams.filter(s => !existingUrls.has(s.url))\n          \n          if (uniqueStreams.length > 0) {\n            this.streamList.push(...uniqueStreams)\n            this.$message.success(`成功导入 ${uniqueStreams.length} 个直播源`)\n            this.importUrlDialogVisible = false\n          } else {\n            this.$message.info('没有新的直播源可以导入')\n          }\n        } else {\n          this.$message.warning('未找到有效的直播源')\n        }\n      } catch (error) {\n        this.$message.error('导入失败：' + error.message)\n      }\n    },\n    readFile(file) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader()\n        reader.onload = (e) => resolve(e.target.result)\n        reader.onerror = () => reject(new Error('文件读取失败'))\n        reader.readAsText(file)\n      })\n    },\n    parseContent(content) {\n      const lines = content.split('\\n')\n      const streams = []\n      \n      // 检测是否是 m3u 格式\n      if (content.includes('#EXTM3U')) {\n        // 转换 m3u 为 txt 格式\n        let currentName = ''\n        let currentGroupTitle = '未分组'\n        let streamsByGroup = {}\n\n        lines.forEach(line => {\n          line = line.trim()\n          if (!line) return\n\n          if (line.includes('group-title=')) {\n            // 提取分组信息\n            const match = line.match(/group-title=\"([^\"]*)\"/)\n            if (match) {\n              currentGroupTitle = match[1] || '未分组'\n            }\n          }\n          \n          if (line.startsWith('#EXTINF:')) {\n            // 提取频道名称\n            const nameMatch = line.match(/,(.+)$/)\n            if (nameMatch) {\n              currentName = nameMatch[1].trim()\n            }\n          } else if (!line.startsWith('#') && line.trim()) {\n            // 这是一个媒体URL\n            if (!streamsByGroup[currentGroupTitle]) {\n              streamsByGroup[currentGroupTitle] = {}\n            }\n            \n            // 使用名称作为键来合并相同名称的URL\n            if (!streamsByGroup[currentGroupTitle][currentName]) {\n              streamsByGroup[currentGroupTitle][currentName] = []\n            }\n            streamsByGroup[currentGroupTitle][currentName].push(line.trim())\n          }\n        })\n\n        // 转换为 txt 格式的数组\n        Object.entries(streamsByGroup).forEach(([group, channels]) => {\n          streams.push(...this.convertToTxtFormat(group, channels))\n        })\n      } else {\n        // 原有的 txt 格式处理\n        let currentGroup = '未分组'  // 在这里定义 currentGroup\n        \n        lines.forEach(line => {\n          line = line.trim()\n          if (!line) return\n\n          if (line.endsWith(',#genre#')) {\n            currentGroup = line.replace(',#genre#', '')\n            return\n          }\n\n          const [name, urls] = line.split(',')\n          if (!name || !urls) return\n\n          const urlList = urls.split('#')\n          urlList.forEach(url => {\n            if (url && url.trim()) {\n              streams.push({\n                name: name,\n                url: url.trim(),\n                group: currentGroup,\n                status: '未检测',\n                resolution: '',\n                responseTime: 0\n              })\n            }\n          })\n        })\n      }\n\n      return streams\n    },\n    addStreamsToList(streams) {\n      streams.forEach(stream => {\n        this.streamList.push(stream)\n      })\n      this.currentPage = 1\n      this.saveStreamList()  // 保存更新后的列表\n    },\n    handleSizeChange(val) {\n      this.pageSize = val\n      // 当每页条数改变时，重置当前页为第一页\n      this.currentPage = 1\n    },\n    handleCurrentChange(val) {\n      this.currentPage = val\n    },\n    async handleFileUpload(event) {\n      const file = event.target.files[0]\n      if (!file) return\n\n      try {\n        const content = await this.readFile(file)\n        const newStreams = this.parseContent(content)\n        \n        if (newStreams.length > 0) {\n          // 过滤重复的直播源\n          const existingUrls = new Set(this.streamList.map(s => s.url))\n          const uniqueStreams = newStreams.filter(s => !existingUrls.has(s.url))\n          \n          if (uniqueStreams.length > 0) {\n            this.streamList.push(...uniqueStreams)\n            this.$message.success(`成功导入 ${uniqueStreams.length} 个直播源`)\n          } else {\n            this.$message.info('没有新的直播源可以导入')\n          }\n        } else {\n          this.$message.warning('未找到有效的直播源')\n        }\n      } catch (error) {\n        this.$message.error('文件读取失败：' + error.message)\n      } finally {\n        // 清除文件输入，允许重复选择同一文件\n        event.target.value = ''\n      }\n    },\n    getGroupFromFileName(filename) {\n      // 从文件名中提取可能的分组名\n      const name = filename.toLowerCase()\n      if (name.includes('cctv')) return 'CCTV'\n      if (name.includes('卫视')) return '卫视'\n      if (name.includes('地方')) return '地方台'\n      return '未分组'\n    },\n    handleClearList() {\n      if (this.streamList.length === 0) {\n        this.$message.warning('列表已经为空')\n        return\n      }\n\n      this.$confirm('确认清空所有直播源?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        this.streamList = []\n        this.currentPage = 1\n        this.saveStreamList()  // 保存更新后的列表\n        this.$message.success('列表已清空')\n      }).catch(() => {})\n    },\n    handleCopy(row) {\n      // 创建一个临时输入框来实现复制功能\n      const textarea = document.createElement('textarea')\n      textarea.value = row.url\n      document.body.appendChild(textarea)\n      textarea.select()\n      \n      try {\n        document.execCommand('copy')\n        this.$message.success('链接已复制到剪贴板')\n      } catch (err) {\n        this.$message.error('复制失败')\n      } finally {\n        document.body.removeChild(textarea)\n      }\n    },\n    shouldRemoveStream(stream) {\n      // 检查是否需要清除异常源\n      if (localStorage.getItem('autoRemoveInvalid') === 'true' && \n          stream.status === '异常') {\n        return true\n      }\n\n      // 检查是否需要清除低分辨率源\n      if (localStorage.getItem('autoRemoveLowRes') === 'true' && \n          stream.resolution !== '未知') {\n        const [width, height] = stream.resolution.split('x').map(Number)\n        if (width < 1280 || height < 720) {\n          return true\n        }\n      }\n\n      // 添加新的检查：响应时间\n      if (localStorage.getItem('autoRemoveSlowResponse') === 'true' && \n          stream.responseTime > 3000) {\n        return true\n      }\n\n      return false\n    },\n    saveStreamList() {\n      if (localStorage.getItem('persistentData') === 'true') {\n        localStorage.setItem('streamList', JSON.stringify(this.streamList))\n      }\n    },\n    handleCollectMode() {\n      if (this.isCollecting) {\n        this.stopCollecting()\n      } else {\n        this.collectDialogVisible = true\n      }\n    },\n    async startCollecting(isRestore = false) {\n      if (!isRestore) {\n        // 确保 urls 是数组\n        if (!Array.isArray(this.collectForm.urls)) {\n          this.$set(this.collectForm, 'urls', [''])\n          return\n        }\n        \n        const valid = await this.$refs.collectForm.validate()\n        if (!valid) return\n      }\n\n      this.collectDialogVisible = false\n      this.isCollecting = true\n      this.saveState() // 保存状态\n      \n      // 立即执行一次采集\n      if (!isRestore) {\n        await this.collect()\n      }\n      \n      // 如果开启了自动采集，设置定时器\n      if (this.collectForm.autoCollect) {\n        this.collectTimer = setInterval(async () => {\n          await this.collect()\n        }, this.collectForm.interval * 60 * 1000)\n      }\n    },\n    stopCollecting() {\n      this.isCollecting = false\n      if (this.collectTimer) {\n        clearInterval(this.collectTimer)\n        this.collectTimer = null\n      }\n      this.saveState() // 保存状态\n      this.$message.success('已停止采集')\n    },\n    async collect() {\n      try {\n        // 检查是否有检测正在进行\n        if (this.isChecking) {\n          this.$message.warning('检测正在进行中，暂时跳过本次采集')\n          return\n        }\n\n        this.$message.info('开始采集直播源...')\n\n        // 并发采集所有地址\n        const results = await Promise.allSettled(\n          this.collectForm.urls.map(async url => {\n            try {\n              const response = await fetch(url)\n              if (!response.ok) throw new Error(`采集失败: ${url}`)\n              \n              const content = await response.text()\n              const newStreams = this.parseContent(content)\n              \n              // 过滤重复的直播源，同时考虑正在检测的源\n              const existingUrls = new Set(this.streamList.map(s => s.url))\n              return newStreams.filter(s => {\n                // 如果源已存在且正在检测中，保留原有状态\n                const existingStream = this.streamList.find(es => es.url === s.url)\n                if (existingStream && existingStream.status === '检测中') {\n                  return false\n                }\n                return !existingUrls.has(s.url)\n              })\n            } catch (error) {\n              console.error(`采集地址 ${url} 失败:`, error)\n              return []\n            }\n          })\n        )\n\n        // 合并所有采集结果\n        const allNewStreams = results\n          .filter(result => result.status === 'fulfilled')\n          .flatMap(result => result.value)\n          .filter((stream, index, self) => \n            index === self.findIndex(s => s.url === stream.url)\n          )\n\n        // 添加新的直播源到列表\n        if (allNewStreams.length > 0) {\n          this.addStreamsToList(allNewStreams)\n          this.$message.success(`采集成功: 新增${allNewStreams.length}个直播源`)\n        } else {\n          this.$message.info('未发现新的直播源')\n        }\n\n        // 统计失败的地址\n        const failedUrls = results\n          .filter(result => result.status === 'rejected')\n          .length\n\n        if (failedUrls > 0) {\n          this.$message.warning(`${failedUrls}个地址采集失败`)\n        }\n\n      } catch (error) {\n        this.$message.error('采集失败：' + error.message)\n        if (!this.collectForm.autoCollect) {\n          this.stopCollecting()\n        }\n      }\n    },\n    async handleGenerateLink() {\n      try {\n        this.generateLinkDialogVisible = true\n        \n        const content = this.generateContent()\n        const format = this.linkForm.format\n        \n        const response = await fetch('http://localhost:8080/api/generate-link', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain',\n            'X-File-Format': format // 添加格式标记\n          },\n          body: content\n        })\n\n        if (!response.ok) {\n          throw new Error('生成链接失败')\n        }\n\n        this.generatedLink = await response.text()\n      } catch (error) {\n        this.$message.error('生成链接失败：' + error.message)\n      }\n    },\n    generateContent() {\n      return this.linkForm.format === 'm3u' \n        ? this.generateM3uContent() \n        : this.generateTxtContent()\n    },\n    generateTxtContent() {\n      let content = ''\n      let currentGroup = ''\n      \n      this.mergedStreams.forEach(stream => {\n        if (stream.group !== currentGroup) {\n          currentGroup = stream.group\n          content += `${currentGroup},#genre#\\n`\n        }\n        content += `${stream.name},${stream.urls.join('#')}\\n`\n      })\n      \n      return content.trim()\n    },\n    generateM3uContent() {\n      let content = '#EXTM3U\\n'\n      let currentGroup = ''\n      \n      this.mergedStreams.forEach(stream => {\n        if (stream.group !== currentGroup) {\n          currentGroup = stream.group\n          content += `\\n#EXTINF:-1 group-title=\"${currentGroup}\"\\n`\n        }\n        // 对于多个URL，创建多个条目\n        stream.urls.forEach(url => {\n          content += `#EXTINF:-1,${stream.name}\\n${url}\\n`\n        })\n      })\n      \n      return content.trim()\n    },\n    copyGeneratedLink() {\n      const textarea = document.createElement('textarea')\n      textarea.value = this.generatedLink\n      document.body.appendChild(textarea)\n      textarea.select()\n      \n      try {\n        document.execCommand('copy')\n        this.$message.success('链接已复制到剪贴板')\n      } catch (err) {\n        this.$message.error('复制失败')\n      } finally {\n        document.body.removeChild(textarea)\n      }\n    },\n    downloadTxtFile() {\n      const blob = new Blob([this.generatedLink], { type: 'text/plain;charset=utf-8' })\n      const url = window.URL.createObjectURL(blob)\n      const link = document.createElement('a')\n      link.href = url\n      link.download = `直播源列表_${new Date().toLocaleDateString()}.txt`\n      \n      document.body.appendChild(link)\n      link.click()\n      \n      // 清理\n      window.URL.revokeObjectURL(url)\n      document.body.removeChild(link)\n      this.$message.success('文件下载成功')\n    },\n    // 修改更新链接内容的方法\n    async updateLinkContent() {\n      try {\n        const content = this.generateContent()\n        await fetch('http://localhost:8080/api/update-content', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain'\n          },\n          body: content\n        })\n      } catch (error) {\n        console.error('更新链接内容失败：', error)\n      }\n    },\n    handleScheduleCheck() {\n      if (this.isScheduled) {\n        this.stopScheduleCheck()\n      } else {\n        this.scheduleDialogVisible = true\n      }\n    },\n    startScheduleCheck() {\n      this.$refs.scheduleForm.validate(valid => {\n        if (valid) {\n          this.scheduleDialogVisible = false\n          this.isScheduled = true\n          this.setupSchedule()\n          this.saveState() // 保存状态\n          this.$message.success('定时检测已开启')\n        }\n      })\n    },\n    stopScheduleCheck() {\n      if (this.scheduleTimer) {\n        clearInterval(this.scheduleTimer)\n        this.scheduleTimer = null\n      }\n      this.isScheduled = false\n      this.nextScheduleTime = null\n      this.saveState() // 保存状态\n      this.$message.success('定时检测已停止')\n    },\n    setupSchedule() {\n      // 清除现有定时器\n      if (this.scheduleTimer) {\n        clearInterval(this.scheduleTimer)\n      }\n\n      // 计算检查间隔（转换为毫秒）\n      const interval = this.scheduleForm.unit === 'second' \n        ? this.scheduleForm.interval * 1000 \n        : this.scheduleForm.interval * 60 * 1000\n      \n      // 设置下次执行时间\n      this.nextScheduleTime = new Date(Date.now() + interval)\n\n      // 设置检查频率（秒级检测使用1秒检查，分钟级使用1分钟检查）\n      const checkInterval = this.scheduleForm.unit === 'second' ? 1000 : 60000\n\n      this.scheduleTimer = setInterval(() => {\n        const now = new Date()\n        \n        // 如果当前正在检测中，跳过这次执行\n        if (this.isChecking) {\n          return\n        }\n\n        // 检查是否到达执行时间\n        if (now >= this.nextScheduleTime) {\n          this.handleBatchCheck()\n          // 更新下次执行时间\n          this.nextScheduleTime = new Date(Date.now() + interval)\n        }\n      }, checkInterval)\n    },\n    // 保存当前状态到本地存储\n    saveState() {\n      // 只保存基础数据和设置，不保存运行状态\n      const state = {\n        streamList: this.streamList,\n        currentPage: this.currentPage,\n        pageSize: this.pageSize,\n        scheduleForm: this.scheduleForm,\n        collectForm: this.collectForm\n      }\n      localStorage.setItem(this.stateKey, JSON.stringify(state))\n    },\n    // 从本地存储恢复状态\n    restoreState() {\n      try {\n        const savedState = localStorage.getItem(this.stateKey)\n        if (savedState) {\n          const state = JSON.parse(savedState)\n          \n          // 只恢复基础数据和设置\n          this.streamList = state.streamList || []\n          this.currentPage = state.currentPage || 1\n          this.pageSize = state.pageSize || 5\n          this.scheduleForm = state.scheduleForm || this.scheduleForm\n          this.collectForm = state.collectForm || this.collectForm\n\n          // 重置所有运行状态\n          this.isChecking = false\n          this.isPaused = false\n          this.isScheduled = false\n          this.isCollecting = false\n          this.checkedCount = 0\n          this.totalCount = 0\n          this.pausedIndex = -1\n          this.nextScheduleTime = null\n        }\n      } catch (error) {\n        console.error('恢复状态失败：', error)\n      }\n    },\n    // 添加重置所有运行状态的方法\n    resetAllStates() {\n      // 停止定时检测\n      if (this.isScheduled) {\n        this.stopScheduleCheck()\n      }\n      \n      // 停止采集\n      if (this.isCollecting) {\n        this.stopCollecting()\n      }\n      \n      // 停止批量检测\n      if (this.isChecking) {\n        this.shouldStop = true\n        this.isChecking = false\n        this.isPaused = false\n      }\n      \n      // 重置所有状态\n      this.isChecking = false\n      this.isPaused = false\n      this.isScheduled = false\n      this.isCollecting = false\n      this.checkedCount = 0\n      this.totalCount = 0\n      this.pausedIndex = -1\n      this.nextScheduleTime = null\n      \n      // 清除所有定时器\n      if (this.scheduleTimer) {\n        clearInterval(this.scheduleTimer)\n        this.scheduleTimer = null\n      }\n      if (this.collectTimer) {\n        clearInterval(this.collectTimer)\n        this.collectTimer = null\n      }\n      \n      // 保存重置后的状态\n      this.saveState()\n      \n      this.$message.success('所有运行状态已重置')\n    },\n    // 更新活动状态\n    updateActiveStatus() {\n      const hasActive = this.isChecking || this.isCollecting || this.isScheduled\n      \n      if (this.hasActiveOperations !== hasActive) {\n        this.hasActiveOperations = hasActive\n        if (hasActive) {\n          // 添加刷新拦截\n          window.addEventListener('beforeunload', this.handleBeforeUnload)\n        } else {\n          // 移除刷新拦截\n          window.removeEventListener('beforeunload', this.handleBeforeUnload)\n        }\n      }\n    },\n    // 处理页面刷新\n    handleBeforeUnload(e) {\n      if (this.hasActiveOperations) {\n        const message = '有正在执行的操作，确定要离开吗？'\n        e.preventDefault()\n        e.returnValue = message\n        return message\n      }\n    },\n    addCollectUrl() {\n      if (!Array.isArray(this.collectForm.urls)) {\n        // 如果 urls 不是数组，先初始化它\n        this.$set(this.collectForm, 'urls', [''])\n      } else {\n        this.collectForm.urls.push('')\n      }\n    },\n    removeCollectUrl(index) {\n      if (Array.isArray(this.collectForm.urls) && this.collectForm.urls.length > 1) {\n        this.collectForm.urls.splice(index, 1)\n      }\n    },\n    // 添加判断分辨率标签类型的方法\n    getResolutionTagType(resolution) {\n      if (!resolution || resolution === '未知') return 'info'\n      const [width] = resolution.split('x').map(Number)\n      if (width >= 1920) return 'success'\n      if (width >= 1280) return ''  // 默认类型\n      return 'warning'\n    },\n    // 添加判断响应时间标签类型的方法\n    getResponseTimeTagType(responseTime) {\n      if (!responseTime) return 'info'\n      if (responseTime <= 1000) return 'success'\n      if (responseTime <= 2000) return ''  // 默认类型\n      if (responseTime <= 3000) return 'warning'\n      return 'danger'\n    },\n    // 添加转换为txt格式的辅助方法\n    convertToTxtFormat(group, channels) {\n      const result = []\n      \n      // 添加分组标记\n      if (group && group !== '未分组') {\n        result.push({\n          isGroupMarker: true,\n          group: group\n        })\n      }\n\n      // 转换频道\n      Object.entries(channels).forEach(([name, urls]) => {\n        urls.forEach(url => {\n          result.push({\n            name: name,\n            url: url,\n            group: group,\n            status: '未检测',\n            resolution: '',\n            responseTime: 0\n          })\n        })\n      })\n\n      return result\n    }\n  },\n  watch: {\n    // 只监听数据变化\n    streamList: {\n      handler() {\n        this.updateLinkContent()\n        this.saveState()\n      },\n      deep: true\n    },\n    currentPage() {\n      this.saveState()\n    },\n    pageSize() {\n      this.saveState()\n    },\n    // 监听所有可能的运行状态\n    isChecking() {\n      this.updateActiveStatus()\n    },\n    isCollecting() {\n      this.updateActiveStatus()\n    },\n    isScheduled() {\n      this.updateActiveStatus()\n    },\n    // 添加格式变化监听\n    'linkForm.format'() {\n      if (this.generateLinkDialogVisible) {\n        this.handleGenerateLink()\n      }\n    }\n  },\n  // 组件被激活时（重新显示）\n  activated() {\n    // 如果有定时任务，恢复定时器\n    if (this.isScheduled) {\n      this.setupSchedule()\n    }\n    // 如果有采集任务，恢复采集\n    if (this.isCollecting) {\n      this.startCollecting(true)\n    }\n  },\n  // 组件被停用时（离开但不销毁）\n  deactivated() {\n    // 暂停定时器，但保持状态标志\n    if (this.scheduleTimer) {\n      clearInterval(this.scheduleTimer)\n      this.scheduleTimer = null\n    }\n    // 暂停采集定时器，但保持状态标志\n    if (this.collectTimer) {\n      clearInterval(this.collectTimer)\n      this.collectTimer = null\n    }\n  }\n}\n</script>\n\n<style scoped>\n.stream-check {\n  padding: 20px;\n  background-color: #fff;\n  border-radius: 4px;\n}\n\n.table-operations {\n  margin-bottom: 20px;\n  display: flex;\n  gap: 10px; /* 按钮组之间的间距 */\n}\n\n.pagination-container {\n  margin-top: 20px;\n  display: flex;\n  justify-content: center;\n}\n\n.el-button [class*=\"el-icon-\"] {\n  font-size: 18px;\n}\n\n.delete-btn {\n  color: #F56C6C;\n}\n\n.delete-btn:hover {\n  color: #ff4d4d;\n}\n\n.setting-tip {\n  margin-left: 10px;\n  color: #909399;\n  font-size: 13px;\n}\n\n.link-info {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.link-info p {\n  margin: 0;\n  color: #606266;\n}\n\n.link-actions {\n  display: flex;\n  gap: 10px;\n  justify-content: flex-end;\n  margin-top: 10px;\n}\n\n/* 生成链接对话框样式 */\n.generate-link-dialog {\n  max-width: 600px;\n}\n\n.link-container {\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n}\n\n.link-card, .tips-card {\n  margin: 0;\n  border: 1px solid #EBEEF5;\n}\n\n.link-content {\n  padding: 10px;\n}\n\n.tips-content {\n  color: #606266;\n  font-size: 14px;\n  padding: 10px;\n}\n\n.tips-content ul {\n  margin: 0;\n  padding-left: 20px;\n  line-height: 1.8;\n}\n\n/* 覆盖 element-ui 的一些默认样式 */\n:deep(.el-dialog__body) {\n  padding: 20px;\n}\n\n:deep(.el-card__header) {\n  padding: 12px 20px;\n  font-weight: 500;\n}\n\n:deep(.el-card__body) {\n  padding: 15px;\n}\n\n/* 可以添加一些自定义样式 */\n.el-tag {\n  width: 90px;  /* 统一标签宽度 */\n}\n\n.el-tag + .el-tag {\n  margin-left: 4px;\n}\n</style> "],"mappings":"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EAAAA,IAAA;YACAqB,GAAA,EAAAA,GAAA;YACAF,KAAA,EAAAA,KAAA;YACA4B,MAAA;YACAE,UAAA;YACAC,YAAA;UACA;QACA;MACA;MAEA,OAAA5B,MAAA;IACA;EACA;EACA4N,KAAA;IACA;IACA1O,UAAA;MACA2O,QAAA;QACA,KAAAjC,iBAAA;QACA,KAAAxC,SAAA;MACA;MACA0E,IAAA;IACA;IACA/O,YAAA;MACA,KAAAqK,SAAA;IACA;IACApK,SAAA;MACA,KAAAoK,SAAA;IACA;IACA;IACA/J,WAAA;MACA,KAAA0N,kBAAA;IACA;IACApE,aAAA;MACA,KAAAoE,kBAAA;IACA;IACAjB,YAAA;MACA,KAAAiB,kBAAA;IACA;IACA;IACA,iBAAAgB,CAAA;MACA,SAAAzD,yBAAA;QACA,KAAAD,kBAAA;MACA;IACA;EACA;EACA;EACA2D,UAAA;IACA;IACA,SAAAlC,WAAA;MACA,KAAAK,aAAA;IACA;IACA;IACA,SAAAxD,YAAA;MACA,KAAAG,eAAA;IACA;EACA;EACA;EACAmF,YAAA;IACA;IACA,SAAA7B,aAAA;MACA1C,aAAA,MAAA0C,aAAA;MACA,KAAAA,aAAA;IACA;IACA;IACA,SAAA7C,YAAA;MACAG,aAAA,MAAAH,YAAA;MACA,KAAAA,YAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}