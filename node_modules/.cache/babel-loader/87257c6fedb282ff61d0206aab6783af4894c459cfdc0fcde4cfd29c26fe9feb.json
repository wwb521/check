{"ast":null,"code":"export default {\n  name: 'StreamCheck',\n  data() {\n    return {\n      loading: false,\n      streamList: [],\n      importUrlDialogVisible: false,\n      importForm: {\n        url: '',\n        group: ''\n      },\n      importRules: {\n        url: [{\n          required: true,\n          message: '请输入URL地址',\n          trigger: 'blur'\n        }, {\n          type: 'url',\n          message: '请输入正确的URL地址',\n          trigger: 'blur'\n        }],\n        group: [{\n          required: true,\n          message: '请选择分组',\n          trigger: 'change'\n        }]\n      },\n      currentPage: 1,\n      pageSize: 5\n    };\n  },\n  computed: {\n    paginatedData() {\n      const start = (this.currentPage - 1) * this.pageSize;\n      const end = start + this.pageSize;\n      return this.streamList.slice(start, end);\n    }\n  },\n  methods: {\n    async checkStream(stream) {\n      const ffprobePath = localStorage.getItem('ffprobePath');\n      if (!ffprobePath) {\n        this.$message.error('请先在系统设置中配置FFprobe路径');\n        return false;\n      }\n      try {\n        // 这里需要后端API支持\n        const response = await fetch('/api/check-stream', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            url: stream.url,\n            ffprobePath: ffprobePath\n          })\n        });\n        if (!response.ok) throw new Error('请求失败');\n        const result = await response.json();\n\n        // 更新流信息\n        stream.status = result.isAvailable ? '正常' : '异常';\n        stream.resolution = result.resolution || '';\n        stream.responseTime = result.responseTime || 0;\n        return result.isAvailable;\n      } catch (error) {\n        stream.status = '异常';\n        return false;\n      }\n    },\n    async batchCheck() {\n      if (this.streamList.length === 0) {\n        this.$message.warning('列表为空');\n        return;\n      }\n      this.loading = true;\n      let successCount = 0;\n      let failCount = 0;\n      for (const stream of this.streamList) {\n        const success = await this.checkStream(stream);\n        if (success) {\n          successCount++;\n        } else {\n          failCount++;\n        }\n      }\n      this.loading = false;\n      this.$message.success(`检测完成: ${successCount}个正常, ${failCount}个异常`);\n    },\n    async handleCheck(row) {\n      const oldStatus = row.status;\n      row.status = '检测中';\n      const success = await this.checkStream(row);\n      this.$message[success ? 'success' : 'error'](`检测${success ? '成功' : '失败'}: ${row.name}`);\n    },\n    handleDelete(row) {\n      this.$confirm('确认删除该直播源?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        const index = this.streamList.indexOf(row);\n        this.streamList.splice(index, 1);\n        const maxPage = Math.ceil(this.streamList.length / this.pageSize);\n        if (this.currentPage > maxPage) {\n          this.currentPage = Math.max(maxPage, 1);\n        }\n        this.$message.success('删除成功');\n      }).catch(() => {});\n    },\n    async handleUrlImport() {\n      if (!this.importForm.url) {\n        this.$message.warning('请输入URL地址');\n        return;\n      }\n      this.loading = true;\n      try {\n        const response = await fetch(this.importForm.url);\n        if (!response.ok) throw new Error('网络请求失败');\n        const content = await response.text();\n        const streams = this.parseContent(content);\n        this.addStreamsToList(streams);\n        this.importUrlDialogVisible = false;\n        this.$message.success('网络文件导入成功');\n      } catch (error) {\n        this.$message.error('导入失败：' + error.message);\n      } finally {\n        this.loading = false;\n      }\n    },\n    readFile(file) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = e => resolve(e.target.result);\n        reader.onerror = () => reject(new Error('文件读取失败'));\n        reader.readAsText(file);\n      });\n    },\n    parseContent(content) {\n      // 将内容按行分割\n      const lines = content.split(/\\r?\\n/).filter(line => line.trim());\n      const streams = [];\n\n      // 解析m3u格式\n      if (content.includes('#EXTM3U')) {\n        let currentName = '';\n        lines.forEach(line => {\n          if (line.startsWith('#EXTINF:')) {\n            // 提取频道名称\n            currentName = line.split(',')[1]?.trim() || '';\n          } else if (!line.startsWith('#') && line.trim()) {\n            // 这是一个媒体URL\n            streams.push({\n              name: currentName || `未命名频道${streams.length + 1}`,\n              url: line.trim(),\n              resolution: '',\n              responseTime: 0,\n              status: '未检测',\n              group: '未分组'\n            });\n            currentName = '';\n          }\n        });\n      } else {\n        // 解析txt格式\n        let currentGroup = '未分组';\n        lines.forEach(line => {\n          const trimmedLine = line.trim();\n\n          // 检查是否是分组标签\n          if (trimmedLine.includes('#genre#')) {\n            currentGroup = trimmedLine.split(',')[0].trim();\n            return;\n          }\n\n          // 跳过其他#开头的行和空行\n          if (trimmedLine.startsWith('#') || !trimmedLine) {\n            return;\n          }\n\n          // 处理实际的直播源行\n          if (trimmedLine.includes(',')) {\n            // 如果行包含逗号，假设格式为：名称,URL\n            const parts = trimmedLine.split(',');\n            // 取最后一个部分作为URL，其余部分作为名称\n            const url = parts.pop().trim();\n            const name = parts.join(',').trim();\n            if (url && !url.startsWith('#')) {\n              // 确保URL存在且不是注释\n              streams.push({\n                name: name || `未命名频道${streams.length + 1}`,\n                url: url,\n                resolution: '',\n                responseTime: 0,\n                status: '未检测',\n                group: currentGroup\n              });\n            }\n          } else {\n            // 如果行不包含逗号且不是注释，则整行作为URL\n            streams.push({\n              name: `未命名频道${streams.length + 1}`,\n              url: trimmedLine,\n              resolution: '',\n              responseTime: 0,\n              status: '未检测',\n              group: currentGroup\n            });\n          }\n        });\n      }\n      return streams;\n    },\n    addStreamsToList(streams) {\n      streams.forEach(stream => {\n        this.streamList.push(stream);\n      });\n      // 批量添加数据时，跳转到第一页\n      this.currentPage = 1;\n    },\n    handleSizeChange(val) {\n      this.pageSize = val;\n      // 当每页条数改变时，重置当前页为第一页\n      this.currentPage = 1;\n    },\n    handleCurrentChange(val) {\n      this.currentPage = val;\n    },\n    async handleFileUpload(event) {\n      const file = event.target.files[0];\n      if (!file) return;\n      try {\n        this.loading = true;\n        const content = await this.readFile(file);\n        const streams = this.parseContent(content);\n        this.addStreamsToList(streams);\n        this.$message.success('文件导入成功');\n      } catch (error) {\n        this.$message.error('文件导入失败：' + error.message);\n      } finally {\n        this.loading = false;\n        // 清除文件输入，允许重复选择同一文件\n        event.target.value = '';\n      }\n    },\n    getGroupFromFileName(filename) {\n      // 从文件名中提取可能的分组名\n      const name = filename.toLowerCase();\n      if (name.includes('cctv')) return 'CCTV';\n      if (name.includes('卫视')) return '卫视';\n      if (name.includes('地方')) return '地方台';\n      return '未分组';\n    },\n    handleClearList() {\n      if (this.streamList.length === 0) {\n        this.$message.warning('列表已经为空');\n        return;\n      }\n      this.$confirm('确认清空所有直播源?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        this.streamList = [];\n        this.currentPage = 1;\n        this.$message.success('列表已清空');\n      }).catch(() => {});\n    },\n    handleCopy(row) {\n      // 创建一个临时输入框来实现复制功能\n      const textarea = document.createElement('textarea');\n      textarea.value = row.url;\n      document.body.appendChild(textarea);\n      textarea.select();\n      try {\n        document.execCommand('copy');\n        this.$message.success('链接已复制到剪贴板');\n      } catch (err) {\n        this.$message.error('复制失败');\n      } finally {\n        document.body.removeChild(textarea);\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","data","loading","streamList","importUrlDialogVisible","importForm","url","group","importRules","required","message","trigger","type","currentPage","pageSize","computed","paginatedData","start","end","slice","methods","checkStream","stream","ffprobePath","localStorage","getItem","$message","error","response","fetch","method","headers","body","JSON","stringify","ok","Error","result","json","status","isAvailable","resolution","responseTime","batchCheck","length","warning","successCount","failCount","success","handleCheck","row","oldStatus","handleDelete","$confirm","confirmButtonText","cancelButtonText","then","index","indexOf","splice","maxPage","Math","ceil","max","catch","handleUrlImport","content","text","streams","parseContent","addStreamsToList","readFile","file","Promise","resolve","reject","reader","FileReader","onload","e","target","onerror","readAsText","lines","split","filter","line","trim","includes","currentName","forEach","startsWith","push","currentGroup","trimmedLine","parts","pop","join","handleSizeChange","val","handleCurrentChange","handleFileUpload","event","files","value","getGroupFromFileName","filename","toLowerCase","handleClearList","handleCopy","textarea","document","createElement","appendChild","select","execCommand","err","removeChild"],"sources":["src/components/StreamCheck.vue"],"sourcesContent":["<template>\r\n  <div class=\"stream-check\">\r\n    <div class=\"table-operations\">\r\n      <el-button-group>\r\n        <el-button \r\n          type=\"primary\" \r\n          icon=\"el-icon-upload2\"\r\n          @click=\"$refs.fileInput.click()\">\r\n          导入本地文件\r\n        </el-button>\r\n        <el-button \r\n          type=\"primary\" \r\n          icon=\"el-icon-download\"\r\n          @click=\"importUrlDialogVisible = true\">\r\n          导入网络文件\r\n        </el-button>\r\n      </el-button-group>\r\n      \r\n      <el-button-group>\r\n        <el-button \r\n          type=\"success\" \r\n          icon=\"el-icon-refresh\"\r\n          @click=\"batchCheck\">\r\n          批量检测\r\n        </el-button>\r\n        <el-button \r\n          type=\"danger\" \r\n          icon=\"el-icon-delete\"\r\n          @click=\"handleClearList\">\r\n          清空列表\r\n        </el-button>\r\n      </el-button-group>\r\n      \r\n      <!-- 隐藏的文件输入框 -->\r\n      <input\r\n        type=\"file\"\r\n        ref=\"fileInput\"\r\n        style=\"display: none\"\r\n        accept=\".txt,.m3u,.m3u8\"\r\n        @change=\"handleFileUpload\"\r\n      >\r\n    </div>\r\n\r\n    <el-table\r\n      :data=\"paginatedData\"\r\n      border\r\n      style=\"width: 100%\"\r\n      v-loading=\"loading\">\r\n      <el-table-column\r\n        prop=\"name\"\r\n        label=\"名称\"\r\n        min-width=\"120\"\r\n        align=\"center\">\r\n      </el-table-column>\r\n      \r\n      <el-table-column\r\n        prop=\"url\"\r\n        label=\"链接\"\r\n        min-width=\"200\"\r\n        align=\"center\"\r\n        show-overflow-tooltip>\r\n      </el-table-column>\r\n      \r\n      <el-table-column\r\n        prop=\"resolution\"\r\n        label=\"分辨率\"\r\n        width=\"120\"\r\n        align=\"center\">\r\n      </el-table-column>\r\n      \r\n      <el-table-column\r\n        prop=\"responseTime\"\r\n        label=\"响应速度\"\r\n        width=\"120\"\r\n        align=\"center\">\r\n        <template slot-scope=\"scope\">\r\n          {{ scope.row.responseTime }}ms\r\n        </template>\r\n      </el-table-column>\r\n      \r\n      <el-table-column\r\n        prop=\"group\"\r\n        label=\"分组\"\r\n        width=\"120\"\r\n        align=\"center\">\r\n      </el-table-column>\r\n      \r\n      <el-table-column\r\n        prop=\"status\"\r\n        label=\"状态\"\r\n        width=\"100\"\r\n        align=\"center\">\r\n        <template slot-scope=\"scope\">\r\n          <el-tag :type=\"scope.row.status === '正常' ? 'success' : 'danger'\">\r\n            {{ scope.row.status }}\r\n          </el-tag>\r\n        </template>\r\n      </el-table-column>\r\n      \r\n      <el-table-column\r\n        label=\"操作\"\r\n        width=\"120\"\r\n        align=\"center\"\r\n        fixed=\"right\">\r\n        <template slot-scope=\"scope\">\r\n          <el-tooltip content=\"复制链接\" placement=\"top\">\r\n            <el-button\r\n              type=\"text\"\r\n              icon=\"el-icon-document-copy\"\r\n              @click=\"handleCopy(scope.row)\">\r\n            </el-button>\r\n          </el-tooltip>\r\n          <el-tooltip content=\"删除\" placement=\"top\">\r\n            <el-button\r\n              type=\"text\"\r\n              class=\"delete-btn\"\r\n              icon=\"el-icon-delete\"\r\n              @click=\"handleDelete(scope.row)\">\r\n            </el-button>\r\n          </el-tooltip>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n\r\n    <!-- 添加分页组件 -->\r\n    <div class=\"pagination-container\">\r\n      <el-pagination\r\n        @size-change=\"handleSizeChange\"\r\n        @current-change=\"handleCurrentChange\"\r\n        :current-page=\"currentPage\"\r\n        :page-sizes=\"[5, 10, 20, 50]\"\r\n        :page-size=\"pageSize\"\r\n        layout=\"total, sizes, prev, pager, next, jumper\"\r\n        :total=\"streamList.length\">\r\n      </el-pagination>\r\n    </div>\r\n\r\n    <!-- 添加/编辑对话框 -->\r\n    <el-dialog\r\n      title=\"导入网络文件\"\r\n      :visible.sync=\"importUrlDialogVisible\"\r\n      width=\"500px\">\r\n      <el-form :model=\"importForm\" label-width=\"80px\" ref=\"importForm\" :rules=\"importRules\">\r\n        <el-form-item label=\"URL地址\" prop=\"url\">\r\n          <el-input \r\n            v-model=\"importForm.url\" \r\n            placeholder=\"请输入txt或m3u文件的网络地址\"\r\n          ></el-input>\r\n        </el-form-item>\r\n      </el-form>\r\n      <div slot=\"footer\">\r\n        <el-button @click=\"importUrlDialogVisible = false\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"handleUrlImport\">导 入</el-button>\r\n      </div>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'StreamCheck',\r\n  data() {\r\n    return {\r\n      loading: false,\r\n      streamList: [],\r\n      importUrlDialogVisible: false,\r\n      importForm: {\r\n        url: '',\r\n        group: ''\r\n      },\r\n      importRules: {\r\n        url: [\r\n          { required: true, message: '请输入URL地址', trigger: 'blur' },\r\n          { type: 'url', message: '请输入正确的URL地址', trigger: 'blur' }\r\n        ],\r\n        group: [\r\n          { required: true, message: '请选择分组', trigger: 'change' }\r\n        ]\r\n      },\r\n      currentPage: 1,\r\n      pageSize: 5\r\n    }\r\n  },\r\n  computed: {\r\n    paginatedData() {\r\n      const start = (this.currentPage - 1) * this.pageSize\r\n      const end = start + this.pageSize\r\n      return this.streamList.slice(start, end)\r\n    }\r\n  },\r\n  methods: {\r\n    async checkStream(stream) {\r\n      const ffprobePath = localStorage.getItem('ffprobePath')\r\n      if (!ffprobePath) {\r\n        this.$message.error('请先在系统设置中配置FFprobe路径')\r\n        return false\r\n      }\r\n\r\n      try {\r\n        // 这里需要后端API支持\r\n        const response = await fetch('/api/check-stream', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({\r\n            url: stream.url,\r\n            ffprobePath: ffprobePath\r\n          })\r\n        })\r\n\r\n        if (!response.ok) throw new Error('请求失败')\r\n        \r\n        const result = await response.json()\r\n        \r\n        // 更新流信息\r\n        stream.status = result.isAvailable ? '正常' : '异常'\r\n        stream.resolution = result.resolution || ''\r\n        stream.responseTime = result.responseTime || 0\r\n        \r\n        return result.isAvailable\r\n      } catch (error) {\r\n        stream.status = '异常'\r\n        return false\r\n      }\r\n    },\r\n\r\n    async batchCheck() {\r\n      if (this.streamList.length === 0) {\r\n        this.$message.warning('列表为空')\r\n        return\r\n      }\r\n\r\n      this.loading = true\r\n      let successCount = 0\r\n      let failCount = 0\r\n\r\n      for (const stream of this.streamList) {\r\n        const success = await this.checkStream(stream)\r\n        if (success) {\r\n          successCount++\r\n        } else {\r\n          failCount++\r\n        }\r\n      }\r\n\r\n      this.loading = false\r\n      this.$message.success(`检测完成: ${successCount}个正常, ${failCount}个异常`)\r\n    },\r\n\r\n    async handleCheck(row) {\r\n      const oldStatus = row.status\r\n      row.status = '检测中'\r\n      \r\n      const success = await this.checkStream(row)\r\n      this.$message[success ? 'success' : 'error'](`检测${success ? '成功' : '失败'}: ${row.name}`)\r\n    },\r\n    handleDelete(row) {\r\n      this.$confirm('确认删除该直播源?', '提示', {\r\n        confirmButtonText: '确定',\r\n        cancelButtonText: '取消',\r\n        type: 'warning'\r\n      }).then(() => {\r\n        const index = this.streamList.indexOf(row)\r\n        this.streamList.splice(index, 1)\r\n        const maxPage = Math.ceil(this.streamList.length / this.pageSize)\r\n        if (this.currentPage > maxPage) {\r\n          this.currentPage = Math.max(maxPage, 1)\r\n        }\r\n        this.$message.success('删除成功')\r\n      }).catch(() => {})\r\n    },\r\n    async handleUrlImport() {\r\n      if (!this.importForm.url) {\r\n        this.$message.warning('请输入URL地址')\r\n        return\r\n      }\r\n\r\n      this.loading = true\r\n      try {\r\n        const response = await fetch(this.importForm.url)\r\n        if (!response.ok) throw new Error('网络请求失败')\r\n        \r\n        const content = await response.text()\r\n        const streams = this.parseContent(content)\r\n        this.addStreamsToList(streams)\r\n        \r\n        this.importUrlDialogVisible = false\r\n        this.$message.success('网络文件导入成功')\r\n      } catch (error) {\r\n        this.$message.error('导入失败：' + error.message)\r\n      } finally {\r\n        this.loading = false\r\n      }\r\n    },\r\n    readFile(file) {\r\n      return new Promise((resolve, reject) => {\r\n        const reader = new FileReader()\r\n        reader.onload = (e) => resolve(e.target.result)\r\n        reader.onerror = () => reject(new Error('文件读取失败'))\r\n        reader.readAsText(file)\r\n      })\r\n    },\r\n    parseContent(content) {\r\n      // 将内容按行分割\r\n      const lines = content.split(/\\r?\\n/).filter(line => line.trim())\r\n      const streams = []\r\n      \r\n      // 解析m3u格式\r\n      if (content.includes('#EXTM3U')) {\r\n        let currentName = ''\r\n        \r\n        lines.forEach(line => {\r\n          if (line.startsWith('#EXTINF:')) {\r\n            // 提取频道名称\r\n            currentName = line.split(',')[1]?.trim() || ''\r\n          } else if (!line.startsWith('#') && line.trim()) {\r\n            // 这是一个媒体URL\r\n            streams.push({\r\n              name: currentName || `未命名频道${streams.length + 1}`,\r\n              url: line.trim(),\r\n              resolution: '',\r\n              responseTime: 0,\r\n              status: '未检测',\r\n              group: '未分组'\r\n            })\r\n            currentName = ''\r\n          }\r\n        })\r\n      } else {\r\n        // 解析txt格式\r\n        let currentGroup = '未分组'\r\n        \r\n        lines.forEach(line => {\r\n          const trimmedLine = line.trim()\r\n          \r\n          // 检查是否是分组标签\r\n          if (trimmedLine.includes('#genre#')) {\r\n            currentGroup = trimmedLine.split(',')[0].trim()\r\n            return\r\n          }\r\n          \r\n          // 跳过其他#开头的行和空行\r\n          if (trimmedLine.startsWith('#') || !trimmedLine) {\r\n            return\r\n          }\r\n          \r\n          // 处理实际的直播源行\r\n          if (trimmedLine.includes(',')) {\r\n            // 如果行包含逗号，假设格式为：名称,URL\r\n            const parts = trimmedLine.split(',')\r\n            // 取最后一个部分作为URL，其余部分作为名称\r\n            const url = parts.pop().trim()\r\n            const name = parts.join(',').trim()\r\n            \r\n            if (url && !url.startsWith('#')) { // 确保URL存在且不是注释\r\n              streams.push({\r\n                name: name || `未命名频道${streams.length + 1}`,\r\n                url: url,\r\n                resolution: '',\r\n                responseTime: 0,\r\n                status: '未检测',\r\n                group: currentGroup\r\n              })\r\n            }\r\n          } else {\r\n            // 如果行不包含逗号且不是注释，则整行作为URL\r\n            streams.push({\r\n              name: `未命名频道${streams.length + 1}`,\r\n              url: trimmedLine,\r\n              resolution: '',\r\n              responseTime: 0,\r\n              status: '未检测',\r\n              group: currentGroup\r\n            })\r\n          }\r\n        })\r\n      }\r\n      \r\n      return streams\r\n    },\r\n    addStreamsToList(streams) {\r\n      streams.forEach(stream => {\r\n        this.streamList.push(stream)\r\n      })\r\n      // 批量添加数据时，跳转到第一页\r\n      this.currentPage = 1\r\n    },\r\n    handleSizeChange(val) {\r\n      this.pageSize = val\r\n      // 当每页条数改变时，重置当前页为第一页\r\n      this.currentPage = 1\r\n    },\r\n    handleCurrentChange(val) {\r\n      this.currentPage = val\r\n    },\r\n    async handleFileUpload(event) {\r\n      const file = event.target.files[0]\r\n      if (!file) return\r\n\r\n      try {\r\n        this.loading = true\r\n        const content = await this.readFile(file)\r\n        const streams = this.parseContent(content)\r\n        this.addStreamsToList(streams)\r\n        \r\n        this.$message.success('文件导入成功')\r\n      } catch (error) {\r\n        this.$message.error('文件导入失败：' + error.message)\r\n      } finally {\r\n        this.loading = false\r\n        // 清除文件输入，允许重复选择同一文件\r\n        event.target.value = ''\r\n      }\r\n    },\r\n    getGroupFromFileName(filename) {\r\n      // 从文件名中提取可能的分组名\r\n      const name = filename.toLowerCase()\r\n      if (name.includes('cctv')) return 'CCTV'\r\n      if (name.includes('卫视')) return '卫视'\r\n      if (name.includes('地方')) return '地方台'\r\n      return '未分组'\r\n    },\r\n    handleClearList() {\r\n      if (this.streamList.length === 0) {\r\n        this.$message.warning('列表已经为空')\r\n        return\r\n      }\r\n\r\n      this.$confirm('确认清空所有直播源?', '提示', {\r\n        confirmButtonText: '确定',\r\n        cancelButtonText: '取消',\r\n        type: 'warning'\r\n      }).then(() => {\r\n        this.streamList = []\r\n        this.currentPage = 1\r\n        this.$message.success('列表已清空')\r\n      }).catch(() => {})\r\n    },\r\n    handleCopy(row) {\r\n      // 创建一个临时输入框来实现复制功能\r\n      const textarea = document.createElement('textarea')\r\n      textarea.value = row.url\r\n      document.body.appendChild(textarea)\r\n      textarea.select()\r\n      \r\n      try {\r\n        document.execCommand('copy')\r\n        this.$message.success('链接已复制到剪贴板')\r\n      } catch (err) {\r\n        this.$message.error('复制失败')\r\n      } finally {\r\n        document.body.removeChild(textarea)\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.stream-check {\r\n  padding: 20px;\r\n  background-color: #fff;\r\n  border-radius: 4px;\r\n}\r\n\r\n.table-operations {\r\n  margin-bottom: 20px;\r\n  display: flex;\r\n  gap: 10px; /* 按钮组之间的间距 */\r\n}\r\n\r\n.pagination-container {\r\n  margin-top: 20px;\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\n.el-button [class*=\"el-icon-\"] {\r\n  font-size: 18px;\r\n}\r\n\r\n.delete-btn {\r\n  color: #F56C6C;\r\n}\r\n\r\n.delete-btn:hover {\r\n  color: #ff4d4d;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}