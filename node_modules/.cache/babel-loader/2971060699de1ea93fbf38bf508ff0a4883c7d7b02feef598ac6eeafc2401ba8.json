{"ast":null,"code":"export default {\n  name: 'StreamCheck',\n  data() {\n    return {\n      loading: false,\n      streamList: [],\n      importUrlDialogVisible: false,\n      importUrlForm: {\n        url: '',\n        isChecking: false,\n        isAccessible: null\n      },\n      importRules: {\n        url: [{\n          required: true,\n          message: '请输入URL地址',\n          trigger: 'blur'\n        }, {\n          type: 'url',\n          message: '请输入正确的URL地址',\n          trigger: ['blur', 'change']\n        }],\n        group: [{\n          required: true,\n          message: '请选择分组',\n          trigger: 'change'\n        }]\n      },\n      currentPage: 1,\n      pageSize: 5,\n      isChecking: false,\n      isPaused: false,\n      checkedCount: 0,\n      totalCount: 0,\n      pausedIndex: -1,\n      shouldStop: false,\n      isCollecting: false,\n      collectDialogVisible: false,\n      collectForm: {\n        urls: [''],\n        urlStatus: {},\n        // 添加urlStatus对象\n        autoCollect: false,\n        collectType: 'daily',\n        executeTime: '09:00',\n        weekDay: '1',\n        mode: 'tv'\n      },\n      collectRules: {\n        urls: [{\n          type: 'array',\n          validator: (rule, value, callback) => {\n            if (value.length === 0) {\n              callback(new Error('请至少添加一个采集地址'));\n            }\n            // 验证每个URL\n            const errors = value.map(url => {\n              if (!url) return '采集地址不能为空';\n              if (!/^https?:\\/\\/.+/.test(url)) return '请输入正确的URL地址';\n              return null;\n            }).filter(error => error !== null);\n            if (errors.length > 0) {\n              callback(new Error(errors[0]));\n            } else {\n              callback();\n            }\n          },\n          trigger: 'change'\n        }],\n        executeTime: [{\n          required: true,\n          message: '请选择执行时间',\n          trigger: 'change'\n        }],\n        weekDay: [{\n          required: true,\n          message: '请选择执行日期',\n          trigger: 'change'\n        }]\n      },\n      collectTimer: null,\n      generateLinkDialogVisible: false,\n      generatedLink: '',\n      previewContent: '',\n      // 新增预览内容\n      currentLinkId: '',\n      scheduleDialogVisible: false,\n      isScheduled: false,\n      scheduleForm: {\n        scheduleType: 'daily',\n        executeTime: '09:00',\n        weekDay: '1'\n      },\n      scheduleRules: {\n        executeTime: [{\n          required: true,\n          message: '请选择执行时间',\n          trigger: 'change'\n        }],\n        weekDay: [{\n          required: true,\n          message: '请选择执行日期',\n          trigger: 'change'\n        }]\n      },\n      scheduleTimer: null,\n      nextScheduleTime: null,\n      stateKey: 'streamCheckState',\n      // 用于本地存储的key\n      hasActiveOperations: false,\n      // 添加标记表示是否有动作在执行\n      linkForm: {\n        format: 'txt' // 默认txt格式\n      },\n      searchDialogVisible: false,\n      searchForm: {\n        name: '',\n        group: '',\n        status: ''\n      },\n      filteredList: [],\n      // 用于存储搜索过滤后的列表\n      realIp: '',\n      // 存储真实IP地址\n      syncDialogVisible: false,\n      syncForm: {\n        token: localStorage.getItem('githubToken') || '',\n        repo: localStorage.getItem('githubRepo') || '',\n        txtPath: localStorage.getItem('githubTxtPath') || '',\n        m3uPath: localStorage.getItem('githubM3uPath') || '',\n        autoSync: localStorage.getItem('githubAutoSync') === 'true',\n        syncType: localStorage.getItem('githubSyncType') || 'daily',\n        executeTime: localStorage.getItem('githubExecuteTime') || '00:00',\n        weekDay: localStorage.getItem('githubWeekDay') || '1',\n        message: '更新直播源列表'\n      },\n      syncRules: {\n        token: [{\n          required: true,\n          message: '请输入GitHub Token',\n          trigger: 'blur'\n        }],\n        repo: [{\n          required: true,\n          message: '请输入仓库名称',\n          trigger: 'blur'\n        }, {\n          pattern: /^[\\w-]+\\/[\\w-]+$/,\n          message: '格式：用户名/仓库名',\n          trigger: 'blur'\n        }],\n        txtPath: [{\n          required: true,\n          message: '请输入文件路径',\n          trigger: 'blur'\n        }],\n        m3uPath: [{\n          required: true,\n          message: '请输入文件路径',\n          trigger: 'blur'\n        }],\n        message: [{\n          required: true,\n          message: '请输入提交消息',\n          trigger: 'blur'\n        }]\n      },\n      syncTimer: null,\n      messages: [],\n      // 用于存储消息\n      messageId: 0,\n      // 用于生成唯一的消息ID\n      isPageSwitching: false,\n      // 添加页面切换标志\n      // 添加标准分组名称常量\n      STANDARD_GROUPS: {\n        CCTV: '央视频道',\n        SATELLITE: '卫视频道'\n      }\n    };\n  },\n  computed: {\n    paginatedData() {\n      // 使用过滤后的列表进行分页\n      const start = (this.currentPage - 1) * this.pageSize;\n      const end = start + this.pageSize;\n      return (this.filteredList.length > 0 ? this.filteredList : this.streamList).slice(start, end);\n    },\n    checkButtonText() {\n      if (!this.isChecking && !this.isPaused) {\n        return '批量检测';\n      }\n      return `检测中 ${this.checkedCount}/${this.totalCount}`;\n    },\n    mergedStreams() {\n      // 创建一个Map来存储合并后的直播源\n      const streamMap = new Map();\n\n      // 按照当前列表顺序处理每个直播源\n      this.streamList.forEach(stream => {\n        const key = stream.name; // 使用名称作为键\n\n        if (streamMap.has(key)) {\n          // 如果已存在相同名称的直播源，添加到URLs数组\n          const existing = streamMap.get(key);\n          if (!existing.urls.includes(stream.url)) {\n            existing.urls.push(stream.url);\n          }\n        } else {\n          // 如果是新的名称，创建新条目\n          streamMap.set(key, {\n            name: stream.name,\n            urls: [stream.url],\n            group: stream.group\n          });\n        }\n      });\n\n      // 转换回数组格式\n      return Array.from(streamMap.values());\n    },\n    groupOptions() {\n      return [...new Set(this.streamList.map(item => item.group))];\n    }\n  },\n  created() {\n    // 初始化时加载持久化的数据\n    if (localStorage.getItem('persistentData') === 'true') {\n      const savedList = localStorage.getItem('streamList');\n      if (savedList) {\n        this.streamList = JSON.parse(savedList);\n        // 初始化时检查多播源\n        this.$nextTick(() => {\n          this.checkMulticastStreams(); // 使用新方法\n        });\n      }\n    }\n\n    // 监听保存事件\n    this.$root.$on('save-stream-list', this.saveStreamList);\n\n    // 监听设置更新事件\n    this.$root.$on('settings-updated', this.handleSettingsUpdate);\n\n    // 从本地存储恢复状态\n    this.restoreState();\n\n    // 如果定时检测是开启状态，重新启动定时器\n    if (this.isScheduled) {\n      this.setupSchedule();\n    }\n    // 如果采集是开启状态，重新启动采集\n    if (this.isCollecting) {\n      this.startCollecting(true); // true表示是恢复状态\n    }\n    // 如果GitHub自动同步是开启状态，重新启动同步定时器\n    if (this.syncForm.autoSync) {\n      this.setupSyncSchedule();\n    }\n    this.filteredList = [];\n    this.getRealIp(); // 获取真实IP地址\n  },\n  beforeDestroy() {\n    // 移除事件监听\n    this.$root.$off('save-stream-list', this.saveStreamList);\n    this.$root.$off('settings-updated', this.handleSettingsUpdate);\n    // 组件销毁前清除定时器\n    if (this.collectTimer) {\n      clearInterval(this.collectTimer);\n    }\n    // 组件销毁时清理定时器\n    this.stopScheduleCheck();\n    // 在组件销毁前保存状态\n    this.saveState();\n    window.removeEventListener('beforeunload', this.handleBeforeUnload);\n  },\n  methods: {\n    // 添加处理设置更新的方法\n    handleSettingsUpdate(event) {\n      console.log('收到设置更新事件:', event);\n      if (event && event.type === 'settings-changed' && event.settings) {\n        console.log('设置已更新，当前设置:', event.settings);\n        // 重新检查所有多播源\n        this.$nextTick(() => {\n          this.checkMulticastStreams();\n        });\n      }\n    },\n    // 添加多播源检测的辅助方法\n    isMulticastStream(url) {\n      if (!url) return false;\n\n      // 更完整的多播源检测正则表达式\n      const patterns = [\n      // 标准格式\n      /[/](udp|rtp)[/]239\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /[/](udp|rtp)[/]225\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /[/](udp|rtp)[/]224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n      // 带@的格式\n      /^(udp|rtp):\\/\\/@239\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /^(udp|rtp):\\/\\/@225\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /^(udp|rtp):\\/\\/@224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n      // 不带@的格式\n      /^(udp|rtp):\\/\\/239\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /^(udp|rtp):\\/\\/225\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /^(udp|rtp):\\/\\/224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n      // IPv6格式\n      /^(udp|rtp):\\/\\/\\[239\\.\\d+\\.\\d+\\.\\d+\\]:\\d+/i, /^(udp|rtp):\\/\\/\\[225\\.\\d+\\.\\d+\\.\\d+\\]:\\d+/i, /^(udp|rtp):\\/\\/\\[224\\.\\d+\\.\\d+\\.\\d+\\]:\\d+/i,\n      // 其他常见格式\n      /^(udp|rtp):\\/\\/@?239\\.\\d+\\.\\d+\\.\\d+[/]\\d+/i, /^(udp|rtp):\\/\\/@?225\\.\\d+\\.\\d+\\.\\d+[/]\\d+/i, /^(udp|rtp):\\/\\/@?224\\.\\d+\\.\\d+\\.\\d+[/]\\d+/i,\n      // 简单格式\n      /^udp\\/@?239\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /^rtp\\/@?239\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /^udp\\/@?225\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /^rtp\\/@?225\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /^udp\\/@?224\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /^rtp\\/@?224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n      // 带端口的格式\n      /^(udp|rtp):\\/\\/@?239\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /^(udp|rtp):\\/\\/@?225\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /^(udp|rtp):\\/\\/@?224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n      // 特殊格式\n      /^(udp|rtp)[/](239|225|224)\\.\\d+\\.\\d+\\.\\d+[/]?(\\d+)?/i, /^(udp|rtp):\\/\\/(239|225|224)\\.\\d+\\.\\d+\\.\\d+[/]?(\\d+)?/i,\n      // HTTP代理的UDP/RTP多播源格式\n      /http:\\/\\/[^/]+[/](udp|rtp)[/]224\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /http:\\/\\/[^/]+[/](udp|rtp)[/]225\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /http:\\/\\/[^/]+[/](udp|rtp)[/]239\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n      // HTTPS代理的UDP/RTP多播源格式\n      /https:\\/\\/[^/]+[/](udp|rtp)[/]224\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /https:\\/\\/[^/]+[/](udp|rtp)[/]225\\.\\d+\\.\\d+\\.\\d+:\\d+/i, /https:\\/\\/[^/]+[/](udp|rtp)[/]239\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n      // 任何包含 udp 或 rtp 的链接\n      /^(udp|rtp):\\/\\//i, /\\/(udp|rtp)\\//i, /^(udp|rtp)@/i];\n\n      // 先转换为小写进行检查\n      const lowerUrl = url.toLowerCase();\n      const isMulticast = patterns.some(pattern => pattern.test(lowerUrl));\n      if (isMulticast) {\n        console.log('检测到多播源:', url);\n      }\n      return isMulticast;\n    },\n    // 检查多播源的方法\n    checkMulticastStreams() {\n      try {\n        const appSettings = localStorage.getItem('appSettings');\n        if (!appSettings) {\n          console.log('未找到设置配置');\n          return;\n        }\n        let settings;\n        try {\n          settings = JSON.parse(appSettings);\n        } catch (e) {\n          console.error('解析设置失败:', e);\n          return;\n        }\n\n        // 如果启用了自动清除多播源\n        if (settings.autoRemoveMulticast === true) {\n          console.log('开始检查多播源...');\n          let removedCount = 0;\n          const toRemove = [];\n\n          // 检查所有流\n          this.streamList.forEach((stream, index) => {\n            if (this.isMulticastStream(stream.url)) {\n              toRemove.push(index);\n              removedCount++;\n              console.log('发现多播源:', stream.url);\n            }\n          });\n\n          // 从后向前删除\n          for (let i = toRemove.length - 1; i >= 0; i--) {\n            const index = toRemove[i];\n            const stream = this.streamList[index];\n            console.log('正在删除多播源:', stream.name, stream.url);\n            this.streamList.splice(index, 1);\n            this.handleStreamRemoval(stream, '多播源');\n          }\n          if (removedCount > 0) {\n            console.log(`成功清除 ${removedCount} 个多播源`);\n            this.$message.warning(`已自动清除 ${removedCount} 个多播源`);\n            this.saveStreamList();\n\n            // 如果当前页没有数据，跳转到上一页\n            if (this.paginatedData.length === 0 && this.currentPage > 1) {\n              this.currentPage--;\n            }\n          }\n        }\n      } catch (error) {\n        console.error('检查多播源失败:', error);\n      }\n    },\n    async checkStream(stream) {\n      // 优先从 appSettings 中读取 FFprobe 路径\n      let ffprobePath = '';\n      try {\n        const appSettings = localStorage.getItem('appSettings');\n        if (appSettings) {\n          const settings = JSON.parse(appSettings);\n          ffprobePath = settings.ffprobePath;\n        }\n      } catch (error) {\n        console.error('读取 appSettings 失败:', error);\n      }\n\n      // 如果 appSettings 中没有，则从独立设置中读取\n      if (!ffprobePath) {\n        ffprobePath = localStorage.getItem('ffprobePath');\n      }\n      if (!ffprobePath) {\n        console.error('未找到 FFprobe 路径配置');\n        this.$message.error('请先在系统设置中配置FFprobe路径');\n        return false;\n      }\n      try {\n        const startTime = Date.now();\n        const response = await fetch(`${this.getBaseUrl()}/api/check-url`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            url: stream.url,\n            ffprobePath: ffprobePath\n          })\n        });\n        const result = await response.json();\n        const endTime = Date.now();\n        stream.responseTime = endTime - startTime;\n        stream.status = result.accessible ? '正常' : '异常';\n\n        // 更新分辨率和比特率信息\n        if (result.resolution) {\n          stream.resolution = result.resolution;\n          console.log('更新分辨率:', stream.name, result.resolution);\n        }\n        if (result.bitrate) {\n          stream.bitrate = result.bitrate;\n          console.log('更新比特率:', stream.name, result.bitrate);\n        }\n\n        // 如果设置了自动清除异常源，在这里也进行清除\n        if (!result.accessible && this.shouldRemoveStream(stream)) {\n          const currentPageItems = this.paginatedData;\n          const pageIndex = currentPageItems.indexOf(stream);\n          const listIndex = this.streamList.indexOf(stream);\n          if (listIndex > -1) {\n            this.streamList.splice(listIndex, 1);\n            if (pageIndex === currentPageItems.length - 1 && this.currentPage > 1) {\n              this.currentPage--;\n            }\n            // 优化提示信息\n            const errorReason = result.error || '检测失败';\n            this.handleStreamRemoval(stream, errorReason);\n          }\n        }\n\n        // 确保在返回前保存更新\n        this.$nextTick(() => {\n          this.saveStreamList();\n        });\n        return result.accessible;\n      } catch (error) {\n        console.error('检测错误:', error);\n        stream.status = '异常';\n        this.$message.error('文件读取失败：' + error.message);\n      } finally {\n        // 清除文件输入，允许重复选择同一文件\n        event.target.value = '';\n      }\n    },\n    getGroupFromFileName(filename) {\n      // 从文件名中提取可能的分组名\n      const name = filename.toLowerCase();\n      if (/cctv/i.test(name)) return this.STANDARD_GROUPS.CCTV;\n      if (name.includes('卫视')) return this.STANDARD_GROUPS.SATELLITE;\n      if (name.includes('地方')) return '地方台';\n      return '未分组';\n    },\n    handleClearList() {\n      this.$confirm('确认清空列表吗？', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        // 先停止所有检测和采集任务\n        this.shouldStop = true;\n        this.isChecking = false;\n        this.isPaused = false;\n        this.pausedIndex = -1;\n\n        // 清除所有定时器\n        if (this.collectTimer) {\n          clearInterval(this.collectTimer);\n          this.collectTimer = null;\n        }\n        if (this.scheduleTimer) {\n          clearInterval(this.scheduleTimer);\n          this.scheduleTimer = null;\n        }\n        if (this.syncTimer) {\n          clearInterval(this.syncTimer);\n          this.syncTimer = null;\n        }\n\n        // 重置所有状态\n        this.isCollecting = false;\n        this.isScheduled = false;\n        this.checkedCount = 0;\n        this.totalCount = 0;\n\n        // 清空列表和重置页码\n        this.streamList = [];\n        this.currentPage = 1;\n\n        // 更新链接内容和保存状态\n        this.updateLinkContent();\n        this.saveState();\n        this.$message({\n          type: 'success',\n          message: '列表已清空'\n        });\n      }).catch(() => {\n        this.$message({\n          type: 'info',\n          message: '已取消清空'\n        });\n      });\n    },\n    handleCopy(row) {\n      // 创建一个临时输入框来实现复制功能\n      const textarea = document.createElement('textarea');\n      textarea.value = row.url;\n      document.body.appendChild(textarea);\n      textarea.select();\n      try {\n        document.execCommand('copy');\n        this.$message.success('链接已复制到剪贴板');\n      } catch (err) {\n        this.$message.error('复制失败');\n      } finally {\n        document.body.removeChild(textarea);\n      }\n    },\n    saveStreamList() {\n      if (localStorage.getItem('persistentData') === 'true') {\n        localStorage.setItem('streamList', JSON.stringify(this.streamList));\n      }\n    },\n    handleCollectMode() {\n      if (this.isCollecting) {\n        this.stopCollecting();\n      } else {\n        this.collectDialogVisible = true;\n      }\n    },\n    async startCollecting(isRestore = false) {\n      if (!isRestore) {\n        // 确保 urls 是数组\n        if (!Array.isArray(this.collectForm.urls)) {\n          this.$set(this.collectForm, 'urls', ['']);\n          return;\n        }\n\n        // 检查所有URL是否可访问\n        const hasInvalidUrls = Object.values(this.collectForm.urlStatus || {}).some(status => status && status.isAccessible === false);\n        if (hasInvalidUrls) {\n          this.$message.error('存在无法访问的链接，请检查后重试');\n          return;\n        }\n\n        // 检查是否有正在检测的URL\n        const hasCheckingUrls = Object.values(this.collectForm.urlStatus || {}).some(status => status && status.isChecking);\n        if (hasCheckingUrls) {\n          this.$message.warning('有链接正在检测中，请等待检测完成');\n          return;\n        }\n        const valid = await this.$refs.collectForm.validate();\n        if (!valid) return;\n      }\n      this.collectDialogVisible = false;\n      this.isCollecting = true;\n      this.saveState(); // 保存状态\n\n      // 立即执行一次采集\n      await this.collect();\n\n      // 如果开启了自动采集，设置定时器\n      if (this.collectForm.autoCollect) {\n        this.setupCollectSchedule();\n      } else {\n        // 单次采集完成后停止\n        this.isCollecting = false;\n        this.saveState();\n      }\n    },\n    stopCollecting() {\n      this.isCollecting = false;\n      if (this.collectTimer) {\n        clearInterval(this.collectTimer);\n        this.collectTimer = null;\n      }\n      this.saveState(); // 保存状态\n      // 只有在自动采集模式下才显示停止提示\n      if (this.collectForm.autoCollect) {\n        this.$message.success('已停止采集');\n      }\n    },\n    async collect() {\n      let progressMessage = null;\n      try {\n        if (this.isChecking) {\n          this.$message.warning('检测正在进行中，暂时跳过本次采集');\n          return;\n        }\n        const total = this.collectForm.urls.length;\n        if (total === 0) {\n          this.$message.warning('没有需要采集的地址');\n          return;\n        }\n\n        // 创建进度消息提示\n        progressMessage = this.$message({\n          message: `正在采集: 0/${total}`,\n          type: 'info',\n          duration: 0,\n          // 消息不会自动关闭\n          showClose: false\n        });\n\n        // 将URL列表分批处理，每批最多5个\n        const batchSize = 5;\n        const urlBatches = [];\n        for (let i = 0; i < this.collectForm.urls.length; i += batchSize) {\n          urlBatches.push(this.collectForm.urls.slice(i, i + batchSize));\n        }\n        let allResults = [];\n        let current = 0;\n\n        // 处理每一批URL\n        for (const batch of urlBatches) {\n          const batchPromises = batch.map(async url => {\n            try {\n              const response = await fetch(`${this.getBaseUrl()}/api/collect-url?url=${encodeURIComponent(url)}`, {\n                method: 'GET',\n                headers: {\n                  'Accept': 'text/plain'\n                }\n              });\n              if (!response.ok) {\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n              }\n              const content = await response.text();\n              const newStreams = this.parseContent(content);\n\n              // 根据采集模式过滤直播源\n              let filteredStreams = newStreams;\n              if (this.collectForm.mode === 'tv') {\n                filteredStreams = newStreams.filter(s => {\n                  // 处理央视频道\n                  const isCCTV = /CCTV/i.test(s.name);\n                  if (isCCTV) {\n                    s.group = this.STANDARD_GROUPS.CCTV;\n                    const cctvNumber = this.extractCCTVNumber(s.name);\n                    if (cctvNumber) {\n                      s.name = cctvNumber;\n                    }\n                    return true;\n                  }\n                  // 处理卫视频道\n                  const isSatellite = /卫视/.test(s.name);\n                  if (isSatellite) {\n                    s.group = this.STANDARD_GROUPS.SATELLITE;\n                    return true;\n                  }\n                  return false;\n                });\n              }\n\n              // 再次确保所有CCTV频道都在正确分组\n              filteredStreams.forEach(s => {\n                if (/CCTV/i.test(s.name)) {\n                  s.group = this.STANDARD_GROUPS.CCTV;\n                }\n              });\n              current++;\n              // 更新进度消息\n              if (progressMessage) {\n                progressMessage.message = `正在采集: ${Math.min(current, total)}/${total}`;\n              }\n              return {\n                status: 'fulfilled',\n                value: filteredStreams\n              };\n            } catch (error) {\n              current++;\n              // 更新进度消息（即使失败也计入进度）\n              if (progressMessage) {\n                progressMessage.message = `正在采集: ${Math.min(current, total)}/${total}`;\n              }\n              console.error(`采集地址失败 ${url}:`, error);\n              return {\n                status: 'rejected',\n                reason: error\n              };\n            }\n          });\n          const batchResults = await Promise.all(batchPromises);\n          allResults = allResults.concat(batchResults);\n        }\n\n        // 合并所有采集结果\n        const allNewStreams = allResults.filter(result => result.status === 'fulfilled').flatMap(result => result.value).filter((stream, index, self) => index === self.findIndex(s => s.url === stream.url));\n\n        // 关闭进度消息\n        if (progressMessage) {\n          progressMessage.close();\n        }\n\n        // 添加新的直播源到列表\n        if (allNewStreams.length > 0) {\n          this.addStreamsToList(allNewStreams);\n          const modeText = this.collectForm.mode === 'tv' ? '央视卫视' : '';\n          this.$message.success(`采集成功: 新增${allNewStreams.length}个${modeText}直播源`);\n        } else {\n          const modeText = this.collectForm.mode === 'tv' ? '央视卫视' : '';\n          this.$message.info(`未发现新的${modeText}直播源`);\n        }\n\n        // 统计失败的地址\n        const failedUrls = allResults.filter(result => result.status === 'rejected').length;\n        if (failedUrls > 0) {\n          this.$message.warning(`${failedUrls}个地址采集失败`);\n        }\n      } catch (error) {\n        console.error('采集失败:', error);\n        this.$message.error('采集失败：' + error.message);\n        if (!this.collectForm.autoCollect) {\n          this.stopCollecting();\n        }\n      } finally {\n        // 确保进度消息被关闭\n        if (progressMessage) {\n          progressMessage.close();\n        }\n      }\n    },\n    // 添加带重试机制的采集方法\n    async collectWithRetry(url, maxRetries = 3) {\n      let lastError;\n      for (let i = 0; i < maxRetries; i++) {\n        try {\n          const response = await fetch(`${this.getBaseUrl()}/api/collect-url?url=${encodeURIComponent(url)}`, {\n            method: 'GET',\n            headers: {\n              'Accept': 'text/plain'\n            }\n          });\n          if (!response.ok) {\n            throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n          }\n          const content = await response.text();\n          const newStreams = this.parseContent(content);\n\n          // 根据采集模式过滤直播源\n          let filteredStreams = newStreams;\n          if (this.collectForm.mode === 'tv') {\n            filteredStreams = newStreams.filter(s => {\n              // 处理央视频道\n              const isCCTV = /CCTV/i.test(s.name);\n              if (isCCTV) {\n                s.group = this.STANDARD_GROUPS.CCTV;\n                const cctvNumber = this.extractCCTVNumber(s.name);\n                if (cctvNumber) {\n                  s.name = cctvNumber;\n                }\n                return true;\n              }\n              // 处理卫视频道\n              const isSatellite = /卫视/.test(s.name);\n              if (isSatellite) {\n                s.group = this.STANDARD_GROUPS.SATELLITE;\n                return true;\n              }\n              return false;\n            });\n          }\n\n          // 再次确保所有CCTV频道都在正确分组\n          filteredStreams.forEach(s => {\n            if (/CCTV/i.test(s.name)) {\n              s.group = this.STANDARD_GROUPS.CCTV;\n            }\n          });\n          return filteredStreams;\n        } catch (error) {\n          lastError = error;\n          console.warn(`采集地址 ${url} 第 ${i + 1} 次尝试失败:`, error);\n          if (i < maxRetries - 1) {\n            continue; // 直接进行下一次重试，不等待\n          }\n        }\n      }\n\n      // 所有重试都失败后抛出最后一次的错误\n      throw new Error(`采集失败 [${url}]: ${lastError.message}`);\n    },\n    // 修改提取CCTV频道号的方法\n    extractCCTVNumber(name) {\n      // 尝试直接匹配CCTV+数字的形式\n      const cctvMatch = name.match(/CCTV-?(\\d+)(\\+)?/i);\n      if (cctvMatch) {\n        const number = cctvMatch[1];\n        const plus = cctvMatch[2] || '';\n        return `CCTV${number}${plus}`;\n      }\n\n      // 处理特殊频道名称（如CCTV5+）\n      if (/CCTV5\\+|CCTV5Plus|体育赛事/.test(name)) {\n        return 'CCTV5+';\n      }\n\n      // 如果无法提取频道号，保留原始CCTV名称\n      const cctvNameMatch = name.match(/CCTV[^a-z0-9]*([a-z0-9]+)/i);\n      if (cctvNameMatch) {\n        return `CCTV${cctvNameMatch[1]}`;\n      }\n\n      // 如果都无法匹配，返回原始名称\n      return name;\n    },\n    async handleGenerateLink() {\n      this.generateLinkDialogVisible = true;\n      try {\n        // 先生成 TXT 格式链接\n        const txtResponse = await fetch(`${this.getBaseUrl()}/api/generate-link`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain',\n            'X-File-Format': 'txt'\n          },\n          body: this.generateContent('txt')\n        });\n\n        // 再生成 M3U 格式链接\n        const m3uResponse = await fetch(`${this.getBaseUrl()}/api/generate-link`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain',\n            'X-File-Format': 'm3u'\n          },\n          body: this.generateContent('m3u')\n        });\n        if (txtResponse.ok && m3uResponse.ok) {\n          const txtLink = await txtResponse.text();\n          const m3uLink = await m3uResponse.text();\n\n          // 根据当前选择的格式显示对应的链接\n          this.generatedLinks = {\n            txt: txtLink,\n            m3u: m3uLink\n          };\n          this.generatedLink = this.generatedLinks[this.linkForm.format];\n        }\n      } catch (error) {\n        console.error('生成链接失败：', error);\n        this.$message.error('生成链接失败');\n      }\n    },\n    generateContent(format) {\n      return format === 'txt' ? this.generateTxtContent() : this.generateM3uContent();\n    },\n    // 添加自定义排序方法\n    customSort(streams, group) {\n      return streams.sort((a, b) => {\n        if (group === this.STANDARD_GROUPS.CCTV) {\n          // 提取CCTV频道号进行排序\n          const getNumber = name => {\n            const match = name.match(/CCTV-?(\\d+)(\\+)?/i);\n            if (match) {\n              return parseInt(match[1]) + (match[2] ? 0.5 : 0); // CCTV5+ 会排在 CCTV5 后面\n            }\n            // 特殊处理CCTV5+\n            if (/CCTV5\\+|CCTV5Plus|体育赛事/.test(name)) {\n              return 5.5;\n            }\n            return 999; // 无法识别的排在最后\n          };\n          const numA = getNumber(a.name);\n          const numB = getNumber(b.name);\n          return numA - numB;\n        } else if (group === this.STANDARD_GROUPS.SATELLITE) {\n          // 卫视按照拼音首字母排序\n          return a.name.localeCompare(b.name, 'zh-CN');\n        } else {\n          // 其他分组按照默认排序\n          return a.name.localeCompare(b.name);\n        }\n      });\n    },\n    generateTxtContent() {\n      let content = '';\n      const groupedStreams = {};\n\n      // 首先整理所有流到对应的分组\n      this.mergedStreams.forEach(stream => {\n        const group = stream.group || '未分组';\n        if (!groupedStreams[group]) {\n          groupedStreams[group] = [];\n        }\n        groupedStreams[group].push(stream);\n      });\n\n      // 优先处理央视和卫视分组\n      const orderedGroups = [this.STANDARD_GROUPS.CCTV, this.STANDARD_GROUPS.SATELLITE, ...Object.keys(groupedStreams).filter(group => group !== this.STANDARD_GROUPS.CCTV && group !== this.STANDARD_GROUPS.SATELLITE)];\n\n      // 按分组生成内容\n      orderedGroups.forEach(group => {\n        if (groupedStreams[group] && groupedStreams[group].length > 0) {\n          content += `${group},#genre#\\n`;\n          // 使用自定义排序方法\n          this.customSort(groupedStreams[group], group).forEach(stream => {\n            content += `${stream.name},${stream.urls.join('#')}\\n`;\n          });\n        }\n      });\n      return content.trim();\n    },\n    generateM3uContent() {\n      let content = '#EXTM3U\\n';\n      const groupedStreams = {};\n\n      // 首先整理所有流到对应的分组\n      this.mergedStreams.forEach(stream => {\n        const group = stream.group || '未分组';\n        if (!groupedStreams[group]) {\n          groupedStreams[group] = [];\n        }\n        groupedStreams[group].push(stream);\n      });\n\n      // 优先处理央视和卫视分组\n      const orderedGroups = [this.STANDARD_GROUPS.CCTV, this.STANDARD_GROUPS.SATELLITE, ...Object.keys(groupedStreams).filter(group => group !== this.STANDARD_GROUPS.CCTV && group !== this.STANDARD_GROUPS.SATELLITE)];\n\n      // 按分组生成内容\n      orderedGroups.forEach(group => {\n        if (groupedStreams[group] && groupedStreams[group].length > 0) {\n          // 使用自定义排序方法\n          this.customSort(groupedStreams[group], group).forEach(stream => {\n            stream.urls.forEach(url => {\n              content += `#EXTINF:-1 group-title=\"${group}\",${stream.name}\\n${url}\\n`;\n            });\n          });\n        }\n      });\n      return content.trim();\n    },\n    copyGeneratedLink() {\n      const textarea = document.createElement('textarea');\n      textarea.value = this.generatedLink;\n      document.body.appendChild(textarea);\n      textarea.select();\n      try {\n        document.execCommand('copy');\n        this.$message.success('链接已复制到剪贴板');\n      } catch (err) {\n        this.$message.error('复制失败');\n      } finally {\n        document.body.removeChild(textarea);\n      }\n    },\n    downloadTxtFile() {\n      const blob = new Blob([this.generatedLink], {\n        type: 'text/plain;charset=utf-8'\n      });\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `直播源列表_${new Date().toLocaleDateString()}.txt`;\n      document.body.appendChild(link);\n      link.click();\n\n      // 清理\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(link);\n      this.$message.success('文件下载成功');\n    },\n    // 修改更新链接内容的方法\n    async updateLinkContent() {\n      try {\n        // 更新 TXT 格式内容\n        await fetch(`${this.getBaseUrl()}/api/update-content`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain',\n            'X-File-Format': 'txt'\n          },\n          body: this.generateContent('txt')\n        });\n\n        // 更新 M3U 格式内容\n        await fetch(`${this.getBaseUrl()}/api/update-content`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain',\n            'X-File-Format': 'm3u'\n          },\n          body: this.generateContent('m3u')\n        });\n      } catch (error) {\n        console.error('更新链接内容失败：', error);\n      }\n    },\n    handleScheduleCheck() {\n      if (this.isScheduled) {\n        this.stopScheduleCheck();\n      } else {\n        this.scheduleDialogVisible = true;\n      }\n    },\n    startScheduleCheck() {\n      this.$refs.scheduleForm.validate(valid => {\n        if (valid) {\n          this.scheduleDialogVisible = false;\n          this.isScheduled = true;\n          this.setupSchedule();\n          this.saveState(); // 保存状态\n          this.$message.success('定时检测已开启');\n        }\n      });\n    },\n    stopScheduleCheck() {\n      if (this.scheduleTimer) {\n        clearInterval(this.scheduleTimer);\n        this.scheduleTimer = null;\n      }\n      this.isScheduled = false;\n      this.nextScheduleTime = null;\n      this.saveState(); // 保存状态\n      this.$message.success('定时检测已停止');\n    },\n    setupSchedule() {\n      // 清除现有定时器\n      if (this.scheduleTimer) {\n        clearInterval(this.scheduleTimer);\n      }\n      const calculateNextExecutionTime = () => {\n        const now = new Date();\n        const [hours, minutes] = this.scheduleForm.executeTime.split(':').map(Number);\n        let nextTime = new Date(now);\n        nextTime.setHours(hours, minutes, 0, 0);\n\n        // 如果当前时间已经过了今天的执行时间，设置为明天\n        if (nextTime <= now) {\n          nextTime.setDate(nextTime.getDate() + 1);\n        }\n\n        // 如果是每周模式，调整到下一个符合条件的星期\n        if (this.scheduleForm.scheduleType === 'weekly') {\n          const targetDay = parseInt(this.scheduleForm.weekDay);\n          while (nextTime.getDay() !== targetDay) {\n            nextTime.setDate(nextTime.getDate() + 1);\n          }\n        }\n        return nextTime;\n      };\n      const scheduleNextExecution = () => {\n        const nextTime = calculateNextExecutionTime();\n        const delay = nextTime.getTime() - new Date().getTime();\n\n        // 更新下次执行时间显示\n        this.nextScheduleTime = nextTime;\n\n        // 设置下次执行的定时器\n        this.scheduleTimer = setTimeout(() => {\n          // 如果当前正在检测中，等待检测完成后再执行\n          if (!this.isChecking) {\n            this.handleBatchCheck();\n          }\n          // 设置下一次执行\n          scheduleNextExecution();\n        }, delay);\n      };\n\n      // 开始第一次调度\n      scheduleNextExecution();\n    },\n    // 保存当前状态到本地存储\n    saveState() {\n      try {\n        // 清除旧的分块数据\n        this.clearStorageData();\n\n        // 只保存必要的数据字段，减少数据量\n        const minimalStreamList = this.streamList.map(stream => ({\n          name: stream.name,\n          url: stream.url,\n          group: stream.group,\n          status: stream.status,\n          resolution: stream.resolution || '',\n          responseTime: stream.responseTime || 0\n        }));\n\n        // 将streamList分块存储，减小分块大小\n        const streamListStr = JSON.stringify(minimalStreamList);\n        const chunkSize = 100000; // 减小到100KB\n        const chunks = Math.ceil(streamListStr.length / chunkSize);\n\n        // 如果数据量太大，只保存基本信息\n        if (chunks > 10) {\n          console.warn('数据量过大，只保存基本状态信息');\n          const basicState = {\n            currentPage: this.currentPage,\n            pageSize: this.pageSize,\n            scheduleForm: this.scheduleForm,\n            collectForm: this.collectForm\n          };\n          localStorage.setItem(this.stateKey, JSON.stringify(basicState));\n          return;\n        }\n\n        // 分块存储\n        for (let i = 0; i < chunks; i++) {\n          const chunk = streamListStr.slice(i * chunkSize, (i + 1) * chunkSize);\n          try {\n            localStorage.setItem(`${this.stateKey}_streamList_${i}`, chunk);\n          } catch (e) {\n            console.error('存储分块失败:', e);\n            this.clearStorageData();\n            // 尝试只保存基本信息\n            const basicState = {\n              currentPage: this.currentPage,\n              pageSize: this.pageSize,\n              scheduleForm: this.scheduleForm,\n              collectForm: this.collectForm\n            };\n            localStorage.setItem(this.stateKey, JSON.stringify(basicState));\n            return;\n          }\n        }\n\n        // 存储其他状态数据\n        const state = {\n          currentPage: this.currentPage,\n          pageSize: this.pageSize,\n          scheduleForm: this.scheduleForm,\n          collectForm: this.collectForm,\n          streamListChunks: chunks\n        };\n        localStorage.setItem(this.stateKey, JSON.stringify(state));\n      } catch (error) {\n        console.error('保存状态失败:', error);\n        this.clearStorageData();\n        // 尝试只保存基本信息\n        try {\n          const basicState = {\n            currentPage: this.currentPage,\n            pageSize: this.pageSize\n          };\n          localStorage.setItem(this.stateKey, JSON.stringify(basicState));\n        } catch (e) {\n          console.error('保存基本状态也失败:', e);\n        }\n      }\n    },\n    // 从本地存储恢复状态\n    restoreState() {\n      try {\n        const savedState = localStorage.getItem(this.stateKey);\n        if (savedState) {\n          const state = JSON.parse(savedState);\n\n          // 恢复streamList\n          if (state.streamListChunks) {\n            try {\n              let streamListStr = '';\n              for (let i = 0; i < state.streamListChunks; i++) {\n                const chunk = localStorage.getItem(`${this.stateKey}_streamList_${i}`);\n                if (chunk) {\n                  streamListStr += chunk;\n                }\n              }\n              if (streamListStr) {\n                this.streamList = JSON.parse(streamListStr);\n              }\n            } catch (e) {\n              console.error('恢复streamList失败:', e);\n              this.streamList = [];\n            }\n          }\n\n          // 恢复其他状态\n          this.currentPage = state.currentPage || 1;\n          this.pageSize = state.pageSize || 5;\n          if (state.scheduleForm) this.scheduleForm = state.scheduleForm;\n          if (state.collectForm) this.collectForm = state.collectForm;\n        }\n\n        // 重置所有运行状态\n        this.isChecking = false;\n        this.isPaused = false;\n        this.isScheduled = false;\n        this.isCollecting = false;\n        this.checkedCount = 0;\n        this.totalCount = 0;\n        this.pausedIndex = -1;\n        this.nextScheduleTime = null;\n      } catch (error) {\n        console.error('恢复状态失败:', error);\n        this.clearStorageData();\n        this.streamList = [];\n      }\n    },\n    // 清理存储数据\n    clearStorageData() {\n      try {\n        localStorage.removeItem(this.stateKey);\n        for (let i = 0;; i++) {\n          const key = `${this.stateKey}_streamList_${i}`;\n          if (localStorage.getItem(key) === null) {\n            break;\n          }\n          localStorage.removeItem(key);\n        }\n      } catch (error) {\n        console.error('清理存储数据失败:', error);\n      }\n    },\n    // 添加重置所有运行状态的方法\n    resetAllStates() {\n      // 停止定时检测\n      if (this.isScheduled) {\n        this.stopScheduleCheck();\n      }\n\n      // 停止采集\n      if (this.isCollecting) {\n        this.stopCollecting();\n      }\n\n      // 停止批量检测\n      if (this.isChecking) {\n        this.shouldStop = true;\n        this.isChecking = false;\n        this.isPaused = false;\n      }\n\n      // 重置所有状态\n      this.isChecking = false;\n      this.isPaused = false;\n      this.isScheduled = false;\n      this.isCollecting = false;\n      this.checkedCount = 0;\n      this.totalCount = 0;\n      this.pausedIndex = -1;\n      this.nextScheduleTime = null;\n\n      // 清除所有定时器\n      if (this.scheduleTimer) {\n        clearInterval(this.scheduleTimer);\n        this.scheduleTimer = null;\n      }\n      if (this.collectTimer) {\n        clearInterval(this.collectTimer);\n        this.collectTimer = null;\n      }\n\n      // 保存重置后的状态\n      this.saveState();\n      this.$message.success('所有运行状态已重置');\n    },\n    // 更新活动状态\n    updateActiveStatus() {\n      const hasActive = this.isChecking || this.isCollecting || this.isScheduled;\n      if (this.hasActiveOperations !== hasActive) {\n        this.hasActiveOperations = hasActive;\n        if (hasActive) {\n          // 添加刷新拦截\n          window.addEventListener('beforeunload', this.handleBeforeUnload);\n        } else {\n          // 移除刷新拦截\n          window.removeEventListener('beforeunload', this.handleBeforeUnload);\n        }\n      }\n    },\n    // 处理页面刷新\n    handleBeforeUnload(e) {\n      if (this.hasActiveOperations) {\n        const message = '有正在执行的操作，确定要离开吗？';\n        e.preventDefault();\n        e.returnValue = message;\n        return message;\n      }\n    },\n    addCollectUrl() {\n      const newIndex = this.collectForm.urls.length;\n      this.collectForm.urls.push('');\n      // 初始化新URL的状态\n      this.$set(this.collectForm.urlStatus, newIndex, {\n        isChecking: false,\n        isAccessible: null\n      });\n    },\n    removeCollectUrl(index) {\n      if (Array.isArray(this.collectForm.urls) && this.collectForm.urls.length > 1) {\n        this.collectForm.urls.splice(index, 1);\n\n        // 重新排序urlStatus\n        const newUrlStatus = {};\n        Object.keys(this.collectForm.urlStatus || {}).filter(key => parseInt(key) !== index).forEach((key, i) => {\n          newUrlStatus[i] = this.collectForm.urlStatus[key];\n        });\n        this.collectForm.urlStatus = newUrlStatus;\n      }\n    },\n    // 添加判断分辨率标签类型的方法\n    getResolutionTagType(resolution) {\n      if (!resolution || resolution === '-') return 'info';\n      if (resolution === '多播源') return 'warning'; // 为多播源添加特殊样式\n      const [width] = resolution.split('x').map(Number);\n      if (width >= 1920) return 'success';\n      if (width >= 1280) return ''; // 默认类型\n      return 'warning';\n    },\n    // 添加判断响应时间标签类型的方法\n    getResponseTimeTagType(responseTime) {\n      if (!responseTime || responseTime === '-') return 'info';\n      const time = Number(responseTime);\n      if (time <= 1000) return 'success';\n      if (time <= 2000) return ''; // 默认类型\n      if (time <= 3000) return 'warning';\n      return 'danger';\n    },\n    setupCollectSchedule() {\n      // 清除现有定时器\n      if (this.collectTimer) {\n        clearInterval(this.collectTimer);\n      }\n      const calculateNextCollectTime = () => {\n        const now = new Date();\n        const [hours, minutes] = this.collectForm.executeTime.split(':').map(Number);\n        let nextTime = new Date(now);\n        nextTime.setHours(hours, minutes, 0, 0);\n\n        // 如果当前时间已经过了今天的执行时间，设置为明天\n        if (nextTime <= now) {\n          nextTime.setDate(nextTime.getDate() + 1);\n        }\n\n        // 如果是每周模式，调整到下一个符合条件的星期\n        if (this.collectForm.collectType === 'weekly') {\n          const targetDay = parseInt(this.collectForm.weekDay);\n          while (nextTime.getDay() !== targetDay) {\n            nextTime.setDate(nextTime.getDate() + 1);\n          }\n        }\n        return nextTime;\n      };\n      const scheduleNextCollection = () => {\n        const nextTime = calculateNextCollectTime();\n        const delay = nextTime.getTime() - new Date().getTime();\n\n        // 设置下次执行的定时器\n        this.collectTimer = setTimeout(() => {\n          // 执行采集\n          this.collect();\n          // 设置下一次执行\n          scheduleNextCollection();\n        }, delay);\n      };\n\n      // 开始第一次调度\n      scheduleNextCollection();\n    },\n    handleSearch() {\n      this.filteredList = this.streamList.filter(item => {\n        // 对CCTV频道进行精确匹配\n        if (this.searchForm.name && /^cctv\\d*$/i.test(this.searchForm.name)) {\n          const searchPattern = new RegExp(`^${this.searchForm.name}[\\\\s-]*$`, 'i');\n          const nameMatch = searchPattern.test(item.name.toLowerCase().replace(/[^a-z0-9]/gi, ''));\n          const groupMatch = !this.searchForm.group || item.group === this.searchForm.group;\n          const statusMatch = !this.searchForm.status || item.status === this.searchForm.status;\n          return nameMatch && groupMatch && statusMatch;\n        }\n\n        // 对其他搜索使用常规匹配\n        const nameMatch = !this.searchForm.name || item.name.toLowerCase().includes(this.searchForm.name.toLowerCase());\n        const groupMatch = !this.searchForm.group || item.group === this.searchForm.group;\n        const statusMatch = !this.searchForm.status || item.status === this.searchForm.status;\n        return nameMatch && groupMatch && statusMatch;\n      });\n\n      // 重置到第一页\n      this.currentPage = 1;\n      this.searchDialogVisible = false;\n    },\n    resetSearch() {\n      this.searchForm = {\n        name: '',\n        group: '',\n        status: ''\n      };\n      this.filteredList = [];\n      this.currentPage = 1;\n    },\n    // 获取真实IP地址\n    async getRealIp() {\n      try {\n        const response = await fetch(`${this.getBaseUrl()}/api/local-ip`);\n        if (response.ok) {\n          const data = await response.json();\n          this.realIp = data.ip;\n          localStorage.setItem('realIp', data.ip); // 保存真实IP到localStorage\n        }\n      } catch (error) {\n        console.error('获取IP失败:', error);\n      }\n    },\n    // 获取基础URL\n    getBaseUrl() {\n      const useRealIp = localStorage.getItem('useRealIp') === 'true';\n      return useRealIp && this.realIp ? `http://${this.realIp}:8080` : 'http://localhost:8080';\n    },\n    async saveGithubSettings() {\n      try {\n        await this.$refs.syncForm.validate();\n\n        // 保存设置到localStorage\n        localStorage.setItem('githubToken', this.syncForm.token);\n        localStorage.setItem('githubRepo', this.syncForm.repo);\n        localStorage.setItem('githubTxtPath', this.syncForm.txtPath);\n        localStorage.setItem('githubM3uPath', this.syncForm.m3uPath);\n        localStorage.setItem('githubAutoSync', this.syncForm.autoSync);\n        localStorage.setItem('githubSyncType', this.syncForm.syncType);\n        localStorage.setItem('githubExecuteTime', this.syncForm.executeTime);\n        localStorage.setItem('githubWeekDay', this.syncForm.weekDay);\n\n        // 如果开启了自动同步，重新设置定时器\n        if (this.syncForm.autoSync) {\n          this.setupSyncSchedule();\n        } else {\n          this.clearSyncSchedule();\n        }\n        this.$message.success('设置已保存');\n        this.syncDialogVisible = false;\n      } catch (error) {\n        this.$message.error(error.message || '保存失败');\n      }\n    },\n    async syncToGithub(content, path) {\n      const response = await fetch(`${this.getBaseUrl()}/api/sync-github`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          token: this.syncForm.token,\n          repo: this.syncForm.repo,\n          path: path,\n          content: content,\n          message: this.syncForm.message\n        })\n      });\n      if (!response.ok) {\n        throw new Error('同步失败');\n      }\n    },\n    handleAutoSyncChange(value) {\n      if (value) {\n        this.setupSyncSchedule();\n      } else {\n        this.clearSyncSchedule();\n      }\n    },\n    setupSyncSchedule() {\n      this.clearSyncSchedule();\n      const calculateNextSyncTime = () => {\n        const now = new Date();\n        const [hours, minutes] = this.syncForm.executeTime.split(':').map(Number);\n        let nextTime = new Date(now);\n        nextTime.setHours(hours, minutes, 0, 0);\n\n        // 如果当前时间已经过了今天的执行时间，设置为明天\n        if (nextTime <= now) {\n          nextTime.setDate(nextTime.getDate() + 1);\n        }\n\n        // 如果是每周模式，调整到下一个符合条件的星期\n        if (this.syncForm.syncType === 'weekly') {\n          const targetDay = parseInt(this.syncForm.weekDay);\n          while (nextTime.getDay() !== targetDay) {\n            nextTime.setDate(nextTime.getDate() + 1);\n          }\n        }\n        return nextTime;\n      };\n      const scheduleNextSync = () => {\n        const nextTime = calculateNextSyncTime();\n        const delay = nextTime.getTime() - new Date().getTime();\n\n        // 设置下次执行的定时器\n        this.syncTimer = setTimeout(async () => {\n          try {\n            // 执行同步\n            await this.syncToGithub(this.generateContent('txt'), this.syncForm.txtPath);\n            await this.syncToGithub(this.generateContent('m3u'), this.syncForm.m3uPath);\n            this.$message.success('已同步到GitHub');\n          } catch (error) {\n            this.$message.error('同步失败：' + error.message);\n          }\n          // 设置下一次执行\n          scheduleNextSync();\n        }, delay);\n      };\n\n      // 开始第一次调度\n      scheduleNextSync();\n    },\n    clearSyncSchedule() {\n      if (this.syncTimer) {\n        clearInterval(this.syncTimer);\n        this.syncTimer = null;\n      }\n    },\n    getStatusTagType(status) {\n      switch (status) {\n        case '正常':\n          return 'success';\n        case '异常':\n          return 'danger';\n        case '未知':\n          return 'warning';\n        case '未检测':\n          return 'info';\n        default:\n          return 'info';\n      }\n    },\n    // 修改显示消息的方法\n    showMessage(content) {\n      // 如果是清除直播源的消息，使用新的消息系统\n      if (content.includes('已自动清除直播源') || content.includes('(')) {\n        const id = this.messageId++;\n        const message = {\n          id,\n          content: content.includes('(') ? content : content.replace('已自动清除直播源：', '')\n        };\n        this.messages.push(message);\n\n        // 3秒后自动移除消息\n        setTimeout(() => {\n          this.removeMessage(id);\n        }, 3000);\n\n        // 最多显示3条消息\n        if (this.messages.length > 3) {\n          this.messages.shift();\n        }\n      } else {\n        // 其他消息使用 Element UI 的消息提示\n        this.$message.info(content);\n      }\n    },\n    // 移除消息\n    removeMessage(id) {\n      const index = this.messages.findIndex(msg => msg.id === id);\n      if (index !== -1) {\n        this.messages.splice(index, 1);\n      }\n    },\n    // 修改清除直播源的提示\n    handleStreamRemoval(stream, reason) {\n      this.showMessage(`${stream.name} (${reason})`);\n    },\n    async checkUrlAccessibility() {\n      if (!this.importUrlForm.url) return;\n      this.importUrlForm.isChecking = true;\n      this.importUrlForm.isAccessible = null;\n      try {\n        // 添加延迟，避免频繁请求\n        await new Promise(resolve => setTimeout(resolve, 500));\n        const baseUrl = process.env.VUE_APP_API_URL || ''; // 从环境变量获取API基础URL\n        const response = await fetch(`${baseUrl}/api/check-url`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            url: this.importUrlForm.url\n          })\n        });\n        if (!response.ok) throw new Error('请求失败');\n        const result = await response.json();\n        this.importUrlForm.isAccessible = result.accessible;\n      } catch (error) {\n        console.error('检查链接可达性失败:', error);\n        this.importUrlForm.isAccessible = false;\n      } finally {\n        this.importUrlForm.isChecking = false;\n      }\n    },\n    async handleImportUrl() {\n      if (!this.importUrlForm.url) {\n        this.$message.warning('请输入文件链接');\n        return;\n      }\n\n      // 如果链接未经过检测或检测失败，先进行检测\n      if (this.importUrlForm.isAccessible === null || this.importUrlForm.isAccessible === false) {\n        await this.checkUrlAccessibility();\n        if (!this.importUrlForm.isAccessible) {\n          return;\n        }\n      }\n      try {\n        // 获取文件内容\n        const response = await fetch(this.importUrlForm.url);\n        if (!response.ok) throw new Error('获取文件失败');\n        const content = await response.text();\n        const newStreams = this.parseContent(content);\n        if (newStreams.length > 0) {\n          // 提取URL列表并过滤重复项\n          const existingUrls = new Set(this.streamList.map(s => s.url));\n          const uniqueStreams = newStreams.filter(s => !existingUrls.has(s.url));\n          if (uniqueStreams.length > 0) {\n            // 批量添加到列表\n            this.streamList.push(...uniqueStreams);\n            this.$message.success(`成功导入 ${uniqueStreams.length} 个直播源`);\n            this.importUrlDialogVisible = false;\n          } else {\n            this.$message.info('没有新的直播源可以导入');\n          }\n        } else {\n          this.$message.warning('未找到有效的直播源');\n        }\n      } catch (error) {\n        console.error('导入失败:', error);\n        this.$message.error('导入失败: ' + error.message);\n      } finally {\n        this.importUrlForm.isChecking = false;\n      }\n    },\n    getPlaceholderText() {\n      switch (this.collectForm.mode) {\n        case 'tv':\n          return '请输入包含央视或卫视频道的网络地址';\n        default:\n          return '请输入需要采集的网络地址';\n      }\n    },\n    async handleCollectUrlsFileUpload(event) {\n      const file = event.target.files[0];\n      if (!file) return;\n      try {\n        const content = await this.readFile(file);\n        // 按行分割并过滤空行\n        const urls = content.split('\\n').map(line => line.trim()).filter(line => line && line.length > 0);\n        if (urls.length === 0) {\n          this.$message.warning('文件中未找到有效的URL地址');\n          return;\n        }\n\n        // 验证URL格式\n        const invalidUrls = urls.filter(url => !/^https?:\\/\\/.+/.test(url));\n        if (invalidUrls.length > 0) {\n          this.$message.warning(`发现 ${invalidUrls.length} 个无效的URL地址`);\n          return;\n        }\n\n        // 初始化状态对象\n        const urlStatus = {};\n        urls.forEach((_, index) => {\n          urlStatus[index] = {\n            isChecking: false,\n            isAccessible: null\n          };\n        });\n\n        // 使用Vue的响应式更新\n        this.$set(this.collectForm, 'urls', urls);\n        this.$set(this.collectForm, 'urlStatus', urlStatus);\n\n        // 手动触发每个URL的检测\n        this.$nextTick(() => {\n          urls.forEach((url, index) => {\n            this.checkCollectUrlAccessibility(url, index);\n          });\n        });\n        this.$message.success(`成功导入 ${urls.length} 个采集地址`);\n      } catch (error) {\n        this.$message.error('读取文件失败：' + error.message);\n      } finally {\n        // 清除文件输入，允许重复选择同一文件\n        event.target.value = '';\n      }\n    },\n    async checkCollectUrlAccessibility(url, index) {\n      if (!url) {\n        console.warn('URL为空，跳过检测');\n        this.$set(this.collectForm.urlStatus, index, {\n          isChecking: false,\n          isAccessible: null,\n          error: '地址为空'\n        });\n        return;\n      }\n\n      // 标准化URL格式\n      let normalizedUrl = url;\n      if (!url.toLowerCase().startsWith('http')) {\n        normalizedUrl = 'http://' + url;\n      }\n      console.log(`开始检测URL (${index}):`, normalizedUrl);\n\n      // 设置检查状态\n      this.$set(this.collectForm.urlStatus, index, {\n        isChecking: true,\n        isAccessible: null,\n        error: null\n      });\n      try {\n        // 添加延迟，避免频繁请求\n        await new Promise(resolve => setTimeout(resolve, 500));\n        const response = await fetch(`${this.getBaseUrl()}/api/check-url`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            url: normalizedUrl\n          })\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP错误: ${response.status}`);\n        }\n        const result = await response.json();\n        console.log(`URL (${index}) 检测结果:`, result);\n\n        // 更新状态\n        this.$set(this.collectForm.urlStatus, index, {\n          isChecking: false,\n          isAccessible: result.accessible,\n          statusCode: result.statusCode,\n          error: result.error\n        });\n\n        // 如果检测失败，记录错误信息\n        if (!result.accessible) {\n          console.warn(`URL (${index}) 不可访问:`, result.error || '未知错误');\n        }\n      } catch (error) {\n        console.error(`URL (${index}) 检测失败:`, error);\n        this.$set(this.collectForm.urlStatus, index, {\n          isChecking: false,\n          isAccessible: false,\n          error: error.message || '检测失败'\n        });\n      }\n    },\n    clearCollectUrls() {\n      this.$confirm('确认清空所有采集地址吗？', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        // 重置采集地址列表\n        this.$set(this.collectForm, 'urls', ['']);\n        // 重置状态对象\n        this.$set(this.collectForm, 'urlStatus', {\n          0: {\n            isChecking: false,\n            isAccessible: null\n          }\n        });\n        this.$message.success('已清空采集地址');\n      }).catch(() => {\n        // 用户取消操作\n      });\n    }\n  },\n  watch: {\n    // 只监听数据变化\n    streamList: {\n      handler() {\n        this.updateLinkContent();\n        this.saveState();\n      },\n      deep: true\n    },\n    currentPage() {\n      this.saveState();\n    },\n    pageSize() {\n      this.saveState();\n    },\n    // 监听所有可能的运行状态\n    isChecking() {\n      this.updateActiveStatus();\n    },\n    isCollecting() {\n      this.updateActiveStatus();\n    },\n    isScheduled() {\n      this.updateActiveStatus();\n    },\n    // 添加格式变化监听\n    'linkForm.format'() {\n      if (this.generateLinkDialogVisible) {\n        this.handleGenerateLink();\n      }\n    }\n  },\n  // 组件被激活时（重新显示）\n  activated() {\n    // 如果有定时任务，恢复定时器\n    if (this.isScheduled) {\n      this.setupSchedule();\n    }\n    // 如果有采集任务，且不是从其他页面切换回来，才恢复采集\n    if (this.isCollecting && !this.isPageSwitching) {\n      this.startCollecting(true);\n    }\n    // 如果有GitHub自动同步，恢复同步定时器\n    if (this.syncForm.autoSync) {\n      this.setupSyncSchedule();\n    }\n    // 重置页面切换标志\n    this.isPageSwitching = false;\n  },\n  // 组件被停用时（离开但不销毁）\n  deactivated() {\n    // 设置页面切换标志\n    this.isPageSwitching = true;\n    // 暂停定时器，但保持状态标志\n    if (this.scheduleTimer) {\n      clearInterval(this.scheduleTimer);\n      this.scheduleTimer = null;\n    }\n    // 暂停采集定时器，但保持状态标志\n    if (this.collectTimer) {\n      clearInterval(this.collectTimer);\n      this.collectTimer = null;\n    }\n    // 暂停同步定时器，但保持状态标志\n    if (this.syncTimer) {\n      clearInterval(this.syncTimer);\n      this.syncTimer = null;\n    }\n  }\n};","map":{"version":3,"names":["name","data","loading","streamList","importUrlDialogVisible","importUrlForm","url","isChecking","isAccessible","importRules","required","message","trigger","type","group","currentPage","pageSize","isPaused","checkedCount","totalCount","pausedIndex","shouldStop","isCollecting","collectDialogVisible","collectForm","urls","urlStatus","autoCollect","collectType","executeTime","weekDay","mode","collectRules","validator","rule","value","callback","length","Error","errors","map","test","filter","error","collectTimer","generateLinkDialogVisible","generatedLink","previewContent","currentLinkId","scheduleDialogVisible","isScheduled","scheduleForm","scheduleType","scheduleRules","scheduleTimer","nextScheduleTime","stateKey","hasActiveOperations","linkForm","format","searchDialogVisible","searchForm","status","filteredList","realIp","syncDialogVisible","syncForm","token","localStorage","getItem","repo","txtPath","m3uPath","autoSync","syncType","syncRules","pattern","syncTimer","messages","messageId","isPageSwitching","STANDARD_GROUPS","CCTV","SATELLITE","computed","paginatedData","start","end","slice","checkButtonText","mergedStreams","streamMap","Map","forEach","stream","key","has","existing","get","includes","push","set","Array","from","values","groupOptions","Set","item","created","savedList","JSON","parse","$nextTick","checkMulticastStreams","$root","$on","saveStreamList","handleSettingsUpdate","restoreState","setupSchedule","startCollecting","setupSyncSchedule","getRealIp","beforeDestroy","$off","clearInterval","stopScheduleCheck","saveState","window","removeEventListener","handleBeforeUnload","methods","event","console","log","settings","isMulticastStream","patterns","lowerUrl","toLowerCase","isMulticast","some","appSettings","e","autoRemoveMulticast","removedCount","toRemove","index","i","splice","handleStreamRemoval","$message","warning","checkStream","ffprobePath","startTime","Date","now","response","fetch","getBaseUrl","method","headers","body","stringify","result","json","endTime","responseTime","accessible","resolution","bitrate","shouldRemoveStream","currentPageItems","pageIndex","indexOf","listIndex","errorReason","target","getGroupFromFileName","filename","handleClearList","$confirm","confirmButtonText","cancelButtonText","then","updateLinkContent","catch","handleCopy","row","textarea","document","createElement","appendChild","select","execCommand","success","err","removeChild","setItem","handleCollectMode","stopCollecting","isRestore","isArray","$set","hasInvalidUrls","Object","hasCheckingUrls","valid","$refs","validate","collect","setupCollectSchedule","progressMessage","total","duration","showClose","batchSize","urlBatches","allResults","current","batch","batchPromises","encodeURIComponent","ok","statusText","content","text","newStreams","parseContent","filteredStreams","s","isCCTV","cctvNumber","extractCCTVNumber","isSatellite","Math","min","reason","batchResults","Promise","all","concat","allNewStreams","flatMap","self","findIndex","close","addStreamsToList","modeText","info","failedUrls","collectWithRetry","maxRetries","lastError","warn","cctvMatch","match","number","plus","cctvNameMatch","handleGenerateLink","txtResponse","generateContent","m3uResponse","txtLink","m3uLink","generatedLinks","txt","m3u","generateTxtContent","generateM3uContent","customSort","streams","sort","a","b","getNumber","parseInt","numA","numB","localeCompare","groupedStreams","orderedGroups","keys","join","trim","copyGeneratedLink","downloadTxtFile","blob","Blob","URL","createObjectURL","link","href","download","toLocaleDateString","click","revokeObjectURL","handleScheduleCheck","startScheduleCheck","calculateNextExecutionTime","hours","minutes","split","Number","nextTime","setHours","setDate","getDate","targetDay","getDay","scheduleNextExecution","delay","getTime","setTimeout","handleBatchCheck","clearStorageData","minimalStreamList","streamListStr","chunkSize","chunks","ceil","basicState","chunk","state","streamListChunks","savedState","removeItem","resetAllStates","updateActiveStatus","hasActive","addEventListener","preventDefault","returnValue","addCollectUrl","newIndex","removeCollectUrl","newUrlStatus","getResolutionTagType","width","getResponseTimeTagType","time","calculateNextCollectTime","scheduleNextCollection","handleSearch","searchPattern","RegExp","nameMatch","replace","groupMatch","statusMatch","resetSearch","ip","useRealIp","saveGithubSettings","clearSyncSchedule","syncToGithub","path","handleAutoSyncChange","calculateNextSyncTime","scheduleNextSync","getStatusTagType","showMessage","id","removeMessage","shift","msg","checkUrlAccessibility","resolve","baseUrl","process","env","VUE_APP_API_URL","handleImportUrl","existingUrls","uniqueStreams","getPlaceholderText","handleCollectUrlsFileUpload","file","files","readFile","line","invalidUrls","_","checkCollectUrlAccessibility","normalizedUrl","startsWith","statusCode","clearCollectUrls","watch","handler","deep","linkForm.format","activated","deactivated"],"sources":["src/components/StreamCheck.vue"],"sourcesContent":["<template>\n  <div class=\"stream-check\">\n    <!-- 修改消息面板位置和样式 -->\n    <div class=\"message-panel\" :class=\"{ 'has-messages': messages.length > 0 }\">\n      <transition-group name=\"message-list\">\n        <div v-for=\"msg in messages\" :key=\"msg.id\" class=\"message-item\">\n          <i class=\"el-icon-delete\"></i>\n          <span class=\"message-content\">{{ msg.content }}</span>\n        </div>\n      </transition-group>\n    </div>\n\n    <div class=\"table-operations\">\n      <div class=\"button-groups\">\n        <div class=\"button-group\">\n      <el-button-group>\n        <el-button\n            type=\"primary\"\n            icon=\"el-icon-upload2\"\n            @click=\"$refs.fileInput.click()\"\n            :disabled=\"isCollecting\">\n          导入本地文件\n        </el-button>\n        <el-button\n            type=\"primary\"\n            icon=\"el-icon-download\"\n            @click=\"importUrlDialogVisible = true\"\n            :disabled=\"isCollecting\">\n          导入网络文件\n        </el-button>\n      </el-button-group>\n        </div>\n\n        <div class=\"button-group\">\n      <el-button-group>\n        <el-button\n            type=\"success\"\n            icon=\"el-icon-refresh\"\n            @click=\"handleBatchCheck\"\n            :loading=\"isChecking\">\n          {{ checkButtonText }}\n        </el-button>\n        <el-button\n            v-if=\"isChecking\"\n            type=\"warning\"\n            icon=\"el-icon-video-pause\"\n            @click=\"pauseCheck\">\n          暂停检测\n        </el-button>\n        <el-button\n            v-if=\"isPaused\"\n            type=\"primary\"\n            icon=\"el-icon-video-play\"\n            @click=\"resumeCheck\">\n          继续检测\n        </el-button>\n        <el-button\n            type=\"danger\"\n            icon=\"el-icon-delete\"\n            @click=\"handleClearList\">\n          清空列表\n        </el-button>\n      </el-button-group>\n        </div>\n\n        <div class=\"button-group\">\n      <el-button-group>\n        <el-button\n            :type=\"isCollecting ? 'danger' : 'primary'\"\n            icon=\"el-icon-connection\"\n            @click=\"handleCollectMode\">\n          {{ isCollecting ? '停止采集' : '采集模式' }}\n        </el-button>\n      </el-button-group>\n        </div>\n\n        <div class=\"button-group\">\n      <el-button-group>\n        <el-button\n            type=\"primary\"\n            icon=\"el-icon-link\"\n            @click=\"handleGenerateLink\">\n          生成链接\n        </el-button>\n        <el-button\n            type=\"success\"\n            icon=\"el-icon-upload\"\n            @click=\"syncDialogVisible = true\">\n          同步到GitHub\n        </el-button>\n      </el-button-group>\n        </div>\n\n        <div class=\"button-group\">\n      <el-button-group>\n        <el-button\n            :type=\"isScheduled ? 'danger' : 'primary'\"\n            icon=\"el-icon-timer\"\n            @click=\"handleScheduleCheck\">\n          {{ isScheduled ? '停止定时' : '定时检测' }}\n        </el-button>\n      </el-button-group>\n        </div>\n\n        <div class=\"button-group\">\n      <el-button-group>\n        <el-button\n            :type=\"filteredList.length > 0 ? 'danger' : 'primary'\"\n            icon=\"el-icon-search\"\n            @click=\"filteredList.length > 0 ? resetSearch() : searchDialogVisible = true\">\n          {{ filteredList.length > 0 ? '重置' : '搜索' }}\n        </el-button>\n      </el-button-group>\n        </div>\n      </div>\n\n      <!-- 隐藏的文件输入框 -->\n      <input\n          type=\"file\"\n          ref=\"fileInput\"\n          style=\"display: none\"\n          accept=\".txt,.m3u,.m3u8\"\n          @change=\"handleFileUpload\"\n      >\n    </div>\n\n    <div class=\"el-table-wrapper\">\n      <el-table\n          :data=\"paginatedData\"\n          border\n          style=\"width: 100%\">\n        <el-table-column\n            prop=\"name\"\n            label=\"名称\"\n            min-width=\"120\"\n            align=\"center\">\n        </el-table-column>\n\n        <el-table-column\n            prop=\"url\"\n            label=\"链接\"\n            min-width=\"200\"\n            align=\"center\"\n            show-overflow-tooltip>\n        </el-table-column>\n\n        <el-table-column\n            prop=\"resolution\"\n            label=\"分辨率\"\n            width=\"120\"\n            align=\"center\">\n          <template slot-scope=\"scope\">\n            <el-tag\n                :type=\"getResolutionTagType(scope.row.resolution)\">\n              {{ scope.row.resolution || '未知' }}\n            </el-tag>\n          </template>\n        </el-table-column>\n\n        <el-table-column\n            prop=\"bitrate\"\n            label=\"比特率\"\n            width=\"120\"\n            align=\"center\">\n          <template slot-scope=\"scope\">\n            <span>{{ scope.row.bitrate || '-' }}</span>\n          </template>\n        </el-table-column>\n\n        <el-table-column\n            prop=\"responseTime\"\n            label=\"响应速度\"\n            width=\"120\"\n            align=\"center\">\n          <template slot-scope=\"scope\">\n            <el-tag\n                :type=\"getResponseTimeTagType(scope.row.responseTime)\">\n              {{ scope.row.responseTime === '-' ? '-' : scope.row.responseTime + 'ms' }}\n            </el-tag>\n          </template>\n        </el-table-column>\n\n        <el-table-column\n            prop=\"group\"\n            label=\"分组\"\n            width=\"120\"\n            align=\"center\">\n          <template slot-scope=\"scope\">\n            <el-tag\n                type=\"info\">\n              {{ scope.row.group }}\n            </el-tag>\n          </template>\n        </el-table-column>\n\n        <el-table-column\n            prop=\"status\"\n            label=\"状态\"\n            width=\"100\"\n            align=\"center\">\n          <template slot-scope=\"scope\">\n            <el-tag :type=\"getStatusTagType(scope.row.status)\">\n              {{ scope.row.status }}\n            </el-tag>\n          </template>\n        </el-table-column>\n\n        <el-table-column\n            label=\"操作\"\n            width=\"120\"\n            align=\"center\"\n            fixed=\"right\">\n          <template slot-scope=\"scope\">\n            <el-tooltip content=\"复制链接\" placement=\"top\">\n              <el-button\n                  type=\"text\"\n                  icon=\"el-icon-document-copy\"\n                  @click=\"handleCopy(scope.row)\">\n              </el-button>\n            </el-tooltip>\n            <el-tooltip content=\"删除\" placement=\"top\">\n              <el-button\n                  type=\"text\"\n                  class=\"delete-btn\"\n                  icon=\"el-icon-delete\"\n                  @click=\"handleDelete(scope.row)\">\n              </el-button>\n            </el-tooltip>\n          </template>\n        </el-table-column>\n      </el-table>\n    </div>\n\n    <!-- 添加分页组件 -->\n    <div class=\"pagination-container\">\n      <el-pagination\n          @size-change=\"handleSizeChange\"\n          @current-change=\"handleCurrentChange\"\n          :current-page=\"currentPage\"\n          :page-sizes=\"[5, 10, 20, 50]\"\n          :page-size=\"pageSize\"\n          layout=\"total, sizes, prev, pager, next, jumper\"\n          :total=\"filteredList.length || streamList.length\">\n      </el-pagination>\n    </div>\n\n    <!-- 添加/编辑对话框 -->\n    <el-dialog\n        title=\"导入网络文件\"\n        :visible.sync=\"importUrlDialogVisible\"\n        width=\"500px\"\n        :close-on-click-modal=\"false\"\n        @closed=\"importUrlForm = { url: '', isChecking: false, isAccessible: null }\">\n      <el-form ref=\"importUrlForm\" label-width=\"80px\">\n        <el-form-item label=\"文件链接\" required>\n          <el-input\n            v-model=\"importUrlForm.url\"\n            placeholder=\"请输入直播源文件链接\"\n            @input=\"checkUrlAccessibility\">\n            <template slot=\"append\">\n              <i v-if=\"importUrlForm.isChecking\" class=\"el-icon-loading\"></i>\n              <i v-else-if=\"importUrlForm.isAccessible === true\" class=\"el-icon-success\" style=\"color: #67C23A\"></i>\n              <i v-else-if=\"importUrlForm.isAccessible === false\" class=\"el-icon-error\" style=\"color: #F56C6C\"></i>\n            </template>\n          </el-input>\n        </el-form-item>\n        <div v-if=\"importUrlForm.isAccessible === false\" style=\"color: #F56C6C; font-size: 12px; margin-bottom: 10px;\">\n          该链接无法访问，请检查链接是否正确\n        </div>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"importUrlDialogVisible = false\">取 消</el-button>\n        <el-button\n          type=\"primary\"\n          @click=\"handleImportUrl\"\n          :loading=\"importUrlForm.isChecking\"\n          :disabled=\"!importUrlForm.url || importUrlForm.isAccessible === false\">\n          确 定\n        </el-button>\n      </div>\n    </el-dialog>\n\n    <!-- 采集模式设置对话框 -->\n    <el-dialog\n        title=\"采集模式设置\"\n        :visible.sync=\"collectDialogVisible\"\n        width=\"500px\">\n      <el-form :model=\"collectForm\" label-width=\"100px\" ref=\"collectForm\" :rules=\"collectRules\">\n        <!-- 采集模式选择 -->\n        <el-form-item label=\"采集模式\">\n          <el-radio-group v-model=\"collectForm.mode\">\n            <el-radio label=\"all\">全部采集</el-radio>\n            <el-radio label=\"tv\">央视卫视专采</el-radio>\n          </el-radio-group>\n        </el-form-item>\n\n        <!-- 采集地址列表 -->\n        <el-form-item\n            v-for=\"(url, index) in collectForm.urls\"\n            :key=\"index\"\n            :label=\"index === 0 ? '采集地址' : ''\"\n            :prop=\"'urls.' + index\">\n          <el-input\n              v-model=\"collectForm.urls[index]\"\n              placeholder=\"请输入需要采集的网络地址\"\n              @input=\"(val) => checkCollectUrlAccessibility(val, index)\">\n            <template slot=\"append\">\n              <i v-if=\"collectForm.urlStatus && collectForm.urlStatus[index] && collectForm.urlStatus[index].isChecking\" class=\"el-icon-loading\"></i>\n              <i v-else-if=\"collectForm.urlStatus && collectForm.urlStatus[index] && collectForm.urlStatus[index].isAccessible === true\" class=\"el-icon-success\" style=\"color: #67C23A\"></i>\n              <i v-else-if=\"collectForm.urlStatus && collectForm.urlStatus[index] && collectForm.urlStatus[index].isAccessible === false\" class=\"el-icon-error\" style=\"color: #F56C6C\"></i>\n              <el-button\n                  icon=\"el-icon-delete\"\n                  @click=\"removeCollectUrl(index)\"\n                  v-if=\"collectForm.urls.length > 1\">\n              </el-button>\n            </template>\n          </el-input>\n          <div v-if=\"collectForm.urlStatus && collectForm.urlStatus[index] && collectForm.urlStatus[index].isAccessible === false\"\n               style=\"color: #F56C6C; font-size: 12px; margin-top: 5px;\">\n            该链接无法访问，请检查链接是否正确\n          </div>\n        </el-form-item>\n\n        <!-- 添加地址按钮和导入按钮 -->\n        <el-form-item>\n          <div style=\"display: flex; gap: 10px;\">\n          <el-button\n              type=\"text\"\n              icon=\"el-icon-plus\"\n              @click=\"addCollectUrl\">\n            添加采集地址\n          </el-button>\n            <el-button\n                type=\"text\"\n                icon=\"el-icon-upload2\"\n                @click=\"$refs.collectUrlsFileInput.click()\">\n              导入地址文件\n            </el-button>\n            <el-button\n                type=\"text\"\n                icon=\"el-icon-delete\"\n                style=\"color: #F56C6C;\"\n                @click=\"clearCollectUrls\">\n              清空采集地址\n            </el-button>\n            <input\n                type=\"file\"\n                ref=\"collectUrlsFileInput\"\n                style=\"display: none\"\n                accept=\".txt\"\n                @change=\"handleCollectUrlsFileUpload\">\n          </div>\n        </el-form-item>\n\n        <el-form-item label=\"自动采集\">\n          <el-switch v-model=\"collectForm.autoCollect\"></el-switch>\n        </el-form-item>\n\n        <!-- 采集时间设置 -->\n        <template v-if=\"collectForm.autoCollect\">\n          <el-form-item label=\"采集周期\" prop=\"collectType\">\n            <el-radio-group v-model=\"collectForm.collectType\">\n              <el-radio label=\"daily\">每天</el-radio>\n              <el-radio label=\"weekly\">每周</el-radio>\n            </el-radio-group>\n          </el-form-item>\n\n          <el-form-item label=\"执行时间\" prop=\"executeTime\">\n            <el-time-picker\n                v-model=\"collectForm.executeTime\"\n                format=\"HH:mm\"\n                value-format=\"HH:mm\"\n                placeholder=\"选择时间\">\n            </el-time-picker>\n          </el-form-item>\n\n          <el-form-item\n              label=\"执行日期\"\n              prop=\"weekDay\"\n              v-if=\"collectForm.collectType === 'weekly'\">\n            <el-select v-model=\"collectForm.weekDay\">\n              <el-option label=\"星期一\" value=\"1\"></el-option>\n              <el-option label=\"星期二\" value=\"2\"></el-option>\n              <el-option label=\"星期三\" value=\"3\"></el-option>\n              <el-option label=\"星期四\" value=\"4\"></el-option>\n              <el-option label=\"星期五\" value=\"5\"></el-option>\n              <el-option label=\"星期六\" value=\"6\"></el-option>\n              <el-option label=\"星期日\" value=\"0\"></el-option>\n            </el-select>\n          </el-form-item>\n        </template>\n      </el-form>\n      <div slot=\"footer\">\n        <el-button @click=\"collectDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"startCollecting\">开始采集</el-button>\n      </div>\n    </el-dialog>\n\n    <!-- 生成链接对话框 -->\n    <el-dialog\n        title=\"生成链接\"\n        :visible.sync=\"generateLinkDialogVisible\"\n        width=\"500px\"\n        custom-class=\"generate-link-dialog\">\n      <div class=\"link-container\">\n        <!-- 添加格式选择 -->\n        <el-form :model=\"linkForm\" label-width=\"80px\">\n          <el-form-item label=\"文件格式\">\n            <el-radio-group v-model=\"linkForm.format\">\n              <el-radio label=\"txt\">TXT格式</el-radio>\n              <el-radio label=\"m3u\">M3U格式</el-radio>\n            </el-radio-group>\n          </el-form-item>\n        </el-form>\n\n        <!-- 链接展示卡片 -->\n        <el-card class=\"link-card\">\n          <div class=\"link-content\">\n            <el-input\n                v-model=\"generatedLink\"\n                placeholder=\"正在生成链接...\"\n                readonly>\n              <template slot=\"prepend\">链接地址</template>\n              <el-button\n                  slot=\"append\"\n                  icon=\"el-icon-document-copy\"\n                  @click=\"copyGeneratedLink\">\n                复制\n              </el-button>\n            </el-input>\n          </div>\n        </el-card>\n\n        <!-- 使用说明 -->\n        <el-card class=\"tips-card\">\n          <div class=\"tips-content\">\n            <ul>\n              <li>生成的链接可以直接在支持网络导入的播放器中使用</li>\n              <li>链接内容会随列表更新而自动更新</li>\n              <li>TXT格式适用于大多数播放器</li>\n              <li>M3U格式提供更好的播放器兼容性</li>\n            </ul>\n          </div>\n        </el-card>\n      </div>\n    </el-dialog>\n\n    <!-- 添加定时检测设置对话框 -->\n    <el-dialog\n        title=\"定时检测设置\"\n        :visible.sync=\"scheduleDialogVisible\"\n        width=\"500px\">\n      <el-form :model=\"scheduleForm\" label-width=\"100px\" ref=\"scheduleForm\" :rules=\"scheduleRules\">\n        <el-form-item label=\"检测周期\" prop=\"scheduleType\">\n          <el-radio-group v-model=\"scheduleForm.scheduleType\">\n            <el-radio label=\"daily\">每天</el-radio>\n            <el-radio label=\"weekly\">每周</el-radio>\n          </el-radio-group>\n        </el-form-item>\n\n        <el-form-item label=\"执行时间\" prop=\"executeTime\">\n          <el-time-picker\n              v-model=\"scheduleForm.executeTime\"\n              format=\"HH:mm\"\n              value-format=\"HH:mm\"\n              placeholder=\"选择时间\">\n          </el-time-picker>\n        </el-form-item>\n\n        <el-form-item\n            label=\"执行日期\"\n            prop=\"weekDay\"\n            v-if=\"scheduleForm.scheduleType === 'weekly'\">\n          <el-select v-model=\"scheduleForm.weekDay\">\n            <el-option label=\"星期一\" value=\"1\"></el-option>\n            <el-option label=\"星期二\" value=\"2\"></el-option>\n            <el-option label=\"星期三\" value=\"3\"></el-option>\n            <el-option label=\"星期四\" value=\"4\"></el-option>\n            <el-option label=\"星期五\" value=\"5\"></el-option>\n            <el-option label=\"星期六\" value=\"6\"></el-option>\n            <el-option label=\"星期日\" value=\"0\"></el-option>\n          </el-select>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\">\n        <el-button @click=\"scheduleDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"startScheduleCheck\">开始定时</el-button>\n      </div>\n    </el-dialog>\n\n    <!-- 添加搜索对话框 -->\n    <el-dialog\n        title=\"搜索直播源\"\n        :visible.sync=\"searchDialogVisible\"\n        width=\"500px\">\n      <el-form :model=\"searchForm\" label-width=\"80px\">\n        <el-form-item label=\"名称\">\n          <el-input\n              v-model=\"searchForm.name\"\n              placeholder=\"支持模糊搜索\"\n              clearable>\n          </el-input>\n        </el-form-item>\n        <el-form-item label=\"分组\">\n          <el-select\n              v-model=\"searchForm.group\"\n              placeholder=\"请选择\"\n              clearable>\n            <el-option\n                v-for=\"group in groupOptions\"\n                :key=\"group\"\n                :label=\"group\"\n                :value=\"group\">\n            </el-option>\n          </el-select>\n        </el-form-item>\n        <el-form-item label=\"状态\">\n          <el-select\n              v-model=\"searchForm.status\"\n              placeholder=\"请选择\"\n              clearable>\n            <el-option label=\"正常\" value=\"正常\"></el-option>\n            <el-option label=\"异常\" value=\"异常\"></el-option>\n            <el-option label=\"未检测\" value=\"未检测\"></el-option>\n          </el-select>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\">\n        <el-button @click=\"searchDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"handleSearch\">搜 索</el-button>\n      </div>\n    </el-dialog>\n\n    <!-- GitHub同步设置对话框 -->\n    <el-dialog\n        title=\"GitHub同步设置\"\n        :visible.sync=\"syncDialogVisible\"\n        width=\"500px\">\n      <el-form :model=\"syncForm\" ref=\"syncForm\" label-width=\"120px\" :rules=\"syncRules\">\n        <el-form-item label=\"GitHub Token\" prop=\"token\">\n          <el-input\n              v-model=\"syncForm.token\"\n              type=\"password\"\n              placeholder=\"请输入GitHub Personal Access Token\"\n              show-password>\n          </el-input>\n        </el-form-item>\n        \n        <el-form-item label=\"仓库名称\" prop=\"repo\">\n          <el-input\n              v-model=\"syncForm.repo\"\n              placeholder=\"格式：用户名/仓库名\">\n          </el-input>\n        </el-form-item>\n        \n        <el-form-item label=\"TXT文件名\" prop=\"txtPath\">\n          <el-input\n              v-model=\"syncForm.txtPath\"\n              placeholder=\"例如：playlist.txt\">\n          </el-input>\n        </el-form-item>\n        \n        <el-form-item label=\"M3U文件名\" prop=\"m3uPath\">\n          <el-input\n              v-model=\"syncForm.m3uPath\"\n              placeholder=\"例如：playlist.m3u\">\n          </el-input>\n        </el-form-item>\n        \n        <el-form-item label=\"定时同步\">\n          <el-switch\n              v-model=\"syncForm.autoSync\"\n              @change=\"handleAutoSyncChange\">\n          </el-switch>\n        </el-form-item>\n        \n        <template v-if=\"syncForm.autoSync\">\n          <el-form-item label=\"同步周期\" prop=\"syncType\">\n            <el-radio-group v-model=\"syncForm.syncType\">\n              <el-radio label=\"daily\">每天</el-radio>\n              <el-radio label=\"weekly\">每周</el-radio>\n              <el-radio label=\"afterCheck\">批量检测完毕后</el-radio>\n            </el-radio-group>\n          </el-form-item>\n\n          <el-form-item\n              label=\"执行时间\"\n              prop=\"executeTime\"\n              v-if=\"syncForm.syncType !== 'afterCheck'\">\n            <el-time-picker\n                v-model=\"syncForm.executeTime\"\n                format=\"HH:mm\"\n                value-format=\"HH:mm\"\n                placeholder=\"选择时间\">\n            </el-time-picker>\n          </el-form-item>\n\n          <el-form-item\n              label=\"执行日期\"\n              prop=\"weekDay\"\n              v-if=\"syncForm.syncType === 'weekly'\">\n            <el-select v-model=\"syncForm.weekDay\">\n              <el-option label=\"星期一\" value=\"1\"></el-option>\n              <el-option label=\"星期二\" value=\"2\"></el-option>\n              <el-option label=\"星期三\" value=\"3\"></el-option>\n              <el-option label=\"星期四\" value=\"4\"></el-option>\n              <el-option label=\"星期五\" value=\"5\"></el-option>\n              <el-option label=\"星期六\" value=\"6\"></el-option>\n              <el-option label=\"星期日\" value=\"0\"></el-option>\n            </el-select>\n          </el-form-item>\n        </template>\n        \n        <el-form-item label=\"提交信息\" prop=\"message\">\n          <el-input\n              v-model=\"syncForm.message\"\n              placeholder=\"更新说明\">\n          </el-input>\n        </el-form-item>\n      </el-form>\n      \n      <div slot=\"footer\">\n        <el-button @click=\"syncDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"saveGithubSettings\">保 存</el-button>\n      </div>\n    </el-dialog>\n  </div>\n\n</template>\n\n<script>\nexport default {\n  name: 'StreamCheck',\n  data() {\n    return {\n      loading: false,\n      streamList: [],\n      importUrlDialogVisible: false,\n      importUrlForm: {\n        url: '',\n        isChecking: false,\n        isAccessible: null\n      },\n      importRules: {\n        url: [\n          { required: true, message: '请输入URL地址', trigger: 'blur' },\n          { type: 'url', message: '请输入正确的URL地址', trigger: ['blur', 'change'] }\n        ],\n        group: [\n          { required: true, message: '请选择分组', trigger: 'change' }\n        ]\n      },\n      currentPage: 1,\n      pageSize: 5,\n      isChecking: false,\n      isPaused: false,\n      checkedCount: 0,\n      totalCount: 0,\n      pausedIndex: -1,\n      shouldStop: false,\n      isCollecting: false,\n      collectDialogVisible: false,\n      collectForm: {\n        urls: [''],\n        urlStatus: {},  // 添加urlStatus对象\n        autoCollect: false,\n        collectType: 'daily',\n        executeTime: '09:00',\n        weekDay: '1',\n        mode: 'tv'\n      },\n      collectRules: {\n        urls: [\n          { \n            type: 'array',\n            validator: (rule, value, callback) => {\n              if (value.length === 0) {\n                callback(new Error('请至少添加一个采集地址'))\n              }\n              // 验证每个URL\n              const errors = value.map(url => {\n                if (!url) return '采集地址不能为空'\n                if (!/^https?:\\/\\/.+/.test(url)) return '请输入正确的URL地址'\n                return null\n              }).filter(error => error !== null)\n              \n              if (errors.length > 0) {\n                callback(new Error(errors[0]))\n              } else {\n                callback()\n              }\n            },\n            trigger: 'change'\n          }\n        ],\n        executeTime: [\n          { required: true, message: '请选择执行时间', trigger: 'change' }\n        ],\n        weekDay: [\n          { required: true, message: '请选择执行日期', trigger: 'change' }\n        ]\n      },\n      collectTimer: null,\n      generateLinkDialogVisible: false,\n      generatedLink: '',\n      previewContent: '',  // 新增预览内容\n      currentLinkId: '',\n      scheduleDialogVisible: false,\n      isScheduled: false,\n      scheduleForm: {\n        scheduleType: 'daily',\n        executeTime: '09:00',\n        weekDay: '1'\n      },\n      scheduleRules: {\n        executeTime: [\n          { required: true, message: '请选择执行时间', trigger: 'change' }\n        ],\n        weekDay: [\n          { required: true, message: '请选择执行日期', trigger: 'change' }\n        ]\n      },\n      scheduleTimer: null,\n      nextScheduleTime: null,\n      stateKey: 'streamCheckState', // 用于本地存储的key\n      hasActiveOperations: false,  // 添加标记表示是否有动作在执行\n      linkForm: {\n        format: 'txt' // 默认txt格式\n      },\n      searchDialogVisible: false,\n      searchForm: {\n        name: '',\n        group: '',\n        status: ''\n      },\n      filteredList: [], // 用于存储搜索过滤后的列表\n      realIp: '',  // 存储真实IP地址\n      syncDialogVisible: false,\n      syncForm: {\n        token: localStorage.getItem('githubToken') || '',\n        repo: localStorage.getItem('githubRepo') || '',\n        txtPath: localStorage.getItem('githubTxtPath') || '',\n        m3uPath: localStorage.getItem('githubM3uPath') || '',\n        autoSync: localStorage.getItem('githubAutoSync') === 'true',\n        syncType: localStorage.getItem('githubSyncType') || 'daily',\n        executeTime: localStorage.getItem('githubExecuteTime') || '00:00',\n        weekDay: localStorage.getItem('githubWeekDay') || '1',\n        message: '更新直播源列表'\n      },\n      syncRules: {\n        token: [\n          { required: true, message: '请输入GitHub Token', trigger: 'blur' }\n        ],\n        repo: [\n          { required: true, message: '请输入仓库名称', trigger: 'blur' },\n          { pattern: /^[\\w-]+\\/[\\w-]+$/, message: '格式：用户名/仓库名', trigger: 'blur' }\n        ],\n        txtPath: [\n          { required: true, message: '请输入文件路径', trigger: 'blur' }\n        ],\n        m3uPath: [\n          { required: true, message: '请输入文件路径', trigger: 'blur' }\n        ],\n        message: [\n          { required: true, message: '请输入提交消息', trigger: 'blur' }\n        ]\n      },\n      syncTimer: null,\n      messages: [], // 用于存储消息\n      messageId: 0, // 用于生成唯一的消息ID\n      isPageSwitching: false, // 添加页面切换标志\n      // 添加标准分组名称常量\n      STANDARD_GROUPS: {\n        CCTV: '央视频道',\n        SATELLITE: '卫视频道'\n      },\n    }\n  },\n  computed: {\n    paginatedData() {\n      // 使用过滤后的列表进行分页\n      const start = (this.currentPage - 1) * this.pageSize\n      const end = start + this.pageSize\n      return (this.filteredList.length > 0 ? this.filteredList : this.streamList).slice(start, end)\n    },\n    checkButtonText() {\n      if (!this.isChecking && !this.isPaused) {\n        return '批量检测'\n      }\n      return `检测中 ${this.checkedCount}/${this.totalCount}`\n    },\n    mergedStreams() {\n      // 创建一个Map来存储合并后的直播源\n      const streamMap = new Map()\n      \n      // 按照当前列表顺序处理每个直播源\n      this.streamList.forEach(stream => {\n        const key = stream.name // 使用名称作为键\n        \n        if (streamMap.has(key)) {\n          // 如果已存在相同名称的直播源，添加到URLs数组\n          const existing = streamMap.get(key)\n          if (!existing.urls.includes(stream.url)) {\n            existing.urls.push(stream.url)\n          }\n        } else {\n          // 如果是新的名称，创建新条目\n          streamMap.set(key, {\n            name: stream.name,\n            urls: [stream.url],\n            group: stream.group\n          })\n        }\n      })\n      \n      // 转换回数组格式\n      return Array.from(streamMap.values())\n    },\n    groupOptions() {\n      return [...new Set(this.streamList.map(item => item.group))]\n    }\n  },\n  created() {\n    // 初始化时加载持久化的数据\n    if (localStorage.getItem('persistentData') === 'true') {\n      const savedList = localStorage.getItem('streamList')\n      if (savedList) {\n        this.streamList = JSON.parse(savedList)\n        // 初始化时检查多播源\n        this.$nextTick(() => {\n          this.checkMulticastStreams() // 使用新方法\n        })\n      }\n    }\n\n    // 监听保存事件\n    this.$root.$on('save-stream-list', this.saveStreamList)\n    \n    // 监听设置更新事件\n    this.$root.$on('settings-updated', this.handleSettingsUpdate)\n\n    // 从本地存储恢复状态\n    this.restoreState()\n    \n    // 如果定时检测是开启状态，重新启动定时器\n    if (this.isScheduled) {\n      this.setupSchedule()\n    }\n    // 如果采集是开启状态，重新启动采集\n    if (this.isCollecting) {\n      this.startCollecting(true) // true表示是恢复状态\n    }\n    // 如果GitHub自动同步是开启状态，重新启动同步定时器\n    if (this.syncForm.autoSync) {\n      this.setupSyncSchedule()\n    }\n\n    this.filteredList = []\n    this.getRealIp()  // 获取真实IP地址\n  },\n  beforeDestroy() {\n    // 移除事件监听\n    this.$root.$off('save-stream-list', this.saveStreamList)\n    this.$root.$off('settings-updated', this.handleSettingsUpdate)\n    // 组件销毁前清除定时器\n    if (this.collectTimer) {\n      clearInterval(this.collectTimer)\n    }\n    // 组件销毁时清理定时器\n    this.stopScheduleCheck()\n    // 在组件销毁前保存状态\n    this.saveState()\n    window.removeEventListener('beforeunload', this.handleBeforeUnload)\n  },\n  methods: {\n    // 添加处理设置更新的方法\n    handleSettingsUpdate(event) {\n      console.log('收到设置更新事件:', event)\n      if (event && event.type === 'settings-changed' && event.settings) {\n        console.log('设置已更新，当前设置:', event.settings)\n        // 重新检查所有多播源\n        this.$nextTick(() => {\n          this.checkMulticastStreams()\n        })\n      }\n    },\n\n    // 添加多播源检测的辅助方法\n    isMulticastStream(url) {\n      if (!url) return false\n      \n      // 更完整的多播源检测正则表达式\n      const patterns = [\n        // 标准格式\n        /[/](udp|rtp)[/]239\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /[/](udp|rtp)[/]225\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /[/](udp|rtp)[/]224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        // 带@的格式\n        /^(udp|rtp):\\/\\/@239\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /^(udp|rtp):\\/\\/@225\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /^(udp|rtp):\\/\\/@224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        // 不带@的格式\n        /^(udp|rtp):\\/\\/239\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /^(udp|rtp):\\/\\/225\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /^(udp|rtp):\\/\\/224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        // IPv6格式\n        /^(udp|rtp):\\/\\/\\[239\\.\\d+\\.\\d+\\.\\d+\\]:\\d+/i,\n        /^(udp|rtp):\\/\\/\\[225\\.\\d+\\.\\d+\\.\\d+\\]:\\d+/i,\n        /^(udp|rtp):\\/\\/\\[224\\.\\d+\\.\\d+\\.\\d+\\]:\\d+/i,\n        // 其他常见格式\n        /^(udp|rtp):\\/\\/@?239\\.\\d+\\.\\d+\\.\\d+[/]\\d+/i,\n        /^(udp|rtp):\\/\\/@?225\\.\\d+\\.\\d+\\.\\d+[/]\\d+/i,\n        /^(udp|rtp):\\/\\/@?224\\.\\d+\\.\\d+\\.\\d+[/]\\d+/i,\n        // 简单格式\n        /^udp\\/@?239\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /^rtp\\/@?239\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /^udp\\/@?225\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /^rtp\\/@?225\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /^udp\\/@?224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /^rtp\\/@?224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        // 带端口的格式\n        /^(udp|rtp):\\/\\/@?239\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /^(udp|rtp):\\/\\/@?225\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /^(udp|rtp):\\/\\/@?224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        // 特殊格式\n        /^(udp|rtp)[/](239|225|224)\\.\\d+\\.\\d+\\.\\d+[/]?(\\d+)?/i,\n        /^(udp|rtp):\\/\\/(239|225|224)\\.\\d+\\.\\d+\\.\\d+[/]?(\\d+)?/i,\n        // HTTP代理的UDP/RTP多播源格式\n        /http:\\/\\/[^/]+[/](udp|rtp)[/]224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /http:\\/\\/[^/]+[/](udp|rtp)[/]225\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /http:\\/\\/[^/]+[/](udp|rtp)[/]239\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        // HTTPS代理的UDP/RTP多播源格式\n        /https:\\/\\/[^/]+[/](udp|rtp)[/]224\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /https:\\/\\/[^/]+[/](udp|rtp)[/]225\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        /https:\\/\\/[^/]+[/](udp|rtp)[/]239\\.\\d+\\.\\d+\\.\\d+:\\d+/i,\n        // 任何包含 udp 或 rtp 的链接\n        /^(udp|rtp):\\/\\//i,\n        /\\/(udp|rtp)\\//i,\n        /^(udp|rtp)@/i\n      ]\n      \n      // 先转换为小写进行检查\n      const lowerUrl = url.toLowerCase()\n      const isMulticast = patterns.some(pattern => pattern.test(lowerUrl))\n            if (isMulticast) {\n        console.log('检测到多播源:', url)\n      }\n      return isMulticast\n    },\n\n    // 检查多播源的方法\n    checkMulticastStreams() {\n      try {\n        const appSettings = localStorage.getItem('appSettings')\n        if (!appSettings) {\n          console.log('未找到设置配置')\n          return\n        }\n\n        let settings\n        try {\n          settings = JSON.parse(appSettings)\n        } catch (e) {\n          console.error('解析设置失败:', e)\n          return\n        }\n\n        // 如果启用了自动清除多播源\n        if (settings.autoRemoveMulticast === true) {\n          console.log('开始检查多播源...')\n          let removedCount = 0\n          const toRemove = []\n\n          // 检查所有流\n          this.streamList.forEach((stream, index) => {\n            if (this.isMulticastStream(stream.url)) {\n              toRemove.push(index)\n              removedCount++\n              console.log('发现多播源:', stream.url)\n            }\n          })\n\n          // 从后向前删除\n          for (let i = toRemove.length - 1; i >= 0; i--) {\n            const index = toRemove[i]\n            const stream = this.streamList[index]\n            console.log('正在删除多播源:', stream.name, stream.url)\n            this.streamList.splice(index, 1)\n            this.handleStreamRemoval(stream, '多播源')\n          }\n\n          if (removedCount > 0) {\n            console.log(`成功清除 ${removedCount} 个多播源`)\n            this.$message.warning(`已自动清除 ${removedCount} 个多播源`)\n          this.saveStreamList()\n          \n          // 如果当前页没有数据，跳转到上一页\n          if (this.paginatedData.length === 0 && this.currentPage > 1) {\n            this.currentPage--\n            }\n          }\n        }\n      } catch (error) {\n        console.error('检查多播源失败:', error)\n      }\n    },\n\n    async checkStream(stream) {\n      // 优先从 appSettings 中读取 FFprobe 路径\n      let ffprobePath = ''\n      try {\n        const appSettings = localStorage.getItem('appSettings')\n        if (appSettings) {\n          const settings = JSON.parse(appSettings)\n          ffprobePath = settings.ffprobePath\n        }\n      } catch (error) {\n        console.error('读取 appSettings 失败:', error)\n      }\n\n      // 如果 appSettings 中没有，则从独立设置中读取\n      if (!ffprobePath) {\n        ffprobePath = localStorage.getItem('ffprobePath')\n      }\n\n      if (!ffprobePath) {\n        console.error('未找到 FFprobe 路径配置')\n        this.$message.error('请先在系统设置中配置FFprobe路径')\n        return false\n      }\n\n      try {\n        const startTime = Date.now()\n        const response = await fetch(`${this.getBaseUrl()}/api/check-url`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            url: stream.url,\n            ffprobePath: ffprobePath\n          })\n        })\n\n        const result = await response.json()\n        const endTime = Date.now()\n        \n        stream.responseTime = endTime - startTime\n        stream.status = result.accessible ? '正常' : '异常'\n        \n        // 更新分辨率和比特率信息\n        if (result.resolution) {\n          stream.resolution = result.resolution\n          console.log('更新分辨率:', stream.name, result.resolution)\n        }\n        if (result.bitrate) {\n          stream.bitrate = result.bitrate\n          console.log('更新比特率:', stream.name, result.bitrate)\n        }\n        \n        // 如果设置了自动清除异常源，在这里也进行清除\n        if (!result.accessible && this.shouldRemoveStream(stream)) {\n          const currentPageItems = this.paginatedData\n          const pageIndex = currentPageItems.indexOf(stream)\n          const listIndex = this.streamList.indexOf(stream)\n          \n          if (listIndex > -1) {\n            this.streamList.splice(listIndex, 1)\n            if (pageIndex === currentPageItems.length - 1 && this.currentPage > 1) {\n              this.currentPage--\n            }\n            // 优化提示信息\n            const errorReason = result.error || '检测失败'\n            this.handleStreamRemoval(stream, errorReason)\n          }\n        }\n        \n        // 确保在返回前保存更新\n        this.$nextTick(() => {\n          this.saveStreamList()\n        })\n        \n        return result.accessible\n      } catch (error) {\n        console.error('检测错误:', error)\n        stream.status = '异常'\n        this.$message.error('文件读取失败：' + error.message)\n      } finally {\n        // 清除文件输入，允许重复选择同一文件\n        event.target.value = ''\n      }\n    },\n    getGroupFromFileName(filename) {\n      // 从文件名中提取可能的分组名\n      const name = filename.toLowerCase()\n      if (/cctv/i.test(name)) return this.STANDARD_GROUPS.CCTV\n      if (name.includes('卫视')) return this.STANDARD_GROUPS.SATELLITE\n      if (name.includes('地方')) return '地方台'\n      return '未分组'\n    },\n    handleClearList() {\n      this.$confirm('确认清空列表吗？', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        // 先停止所有检测和采集任务\n        this.shouldStop = true\n        this.isChecking = false\n        this.isPaused = false\n        this.pausedIndex = -1\n        \n        // 清除所有定时器\n        if (this.collectTimer) {\n          clearInterval(this.collectTimer)\n          this.collectTimer = null\n        }\n        if (this.scheduleTimer) {\n          clearInterval(this.scheduleTimer)\n          this.scheduleTimer = null\n        }\n        if (this.syncTimer) {\n          clearInterval(this.syncTimer)\n          this.syncTimer = null\n        }\n        \n        // 重置所有状态\n        this.isCollecting = false\n        this.isScheduled = false\n        this.checkedCount = 0\n        this.totalCount = 0\n        \n        // 清空列表和重置页码\n        this.streamList = []\n        this.currentPage = 1\n        \n        // 更新链接内容和保存状态\n        this.updateLinkContent()\n        this.saveState()\n        \n        this.$message({\n          type: 'success',\n          message: '列表已清空'\n        })\n      }).catch(() => {\n        this.$message({\n          type: 'info',\n          message: '已取消清空'\n        })\n      })\n    },\n    handleCopy(row) {\n      // 创建一个临时输入框来实现复制功能\n      const textarea = document.createElement('textarea')\n      textarea.value = row.url\n      document.body.appendChild(textarea)\n      textarea.select()\n      \n      try {\n        document.execCommand('copy')\n        this.$message.success('链接已复制到剪贴板')\n      } catch (err) {\n        this.$message.error('复制失败')\n      } finally {\n        document.body.removeChild(textarea)\n      }\n    },\n    saveStreamList() {\n      if (localStorage.getItem('persistentData') === 'true') {\n        localStorage.setItem('streamList', JSON.stringify(this.streamList))\n      }\n    },\n    handleCollectMode() {\n      if (this.isCollecting) {\n        this.stopCollecting()\n      } else {\n        this.collectDialogVisible = true\n      }\n    },\n    async startCollecting(isRestore = false) {\n      if (!isRestore) {\n        // 确保 urls 是数组\n        if (!Array.isArray(this.collectForm.urls)) {\n          this.$set(this.collectForm, 'urls', [''])\n          return\n        }\n        \n        // 检查所有URL是否可访问\n        const hasInvalidUrls = Object.values(this.collectForm.urlStatus || {}).some(\n          status => status && status.isAccessible === false\n        )\n        \n        if (hasInvalidUrls) {\n          this.$message.error('存在无法访问的链接，请检查后重试')\n          return\n        }\n\n        // 检查是否有正在检测的URL\n        const hasCheckingUrls = Object.values(this.collectForm.urlStatus || {}).some(\n          status => status && status.isChecking\n        )\n\n        if (hasCheckingUrls) {\n          this.$message.warning('有链接正在检测中，请等待检测完成')\n          return\n        }\n        \n        const valid = await this.$refs.collectForm.validate()\n        if (!valid) return\n      }\n\n      this.collectDialogVisible = false\n      this.isCollecting = true\n      this.saveState() // 保存状态\n      \n      // 立即执行一次采集\n      await this.collect()\n      \n      // 如果开启了自动采集，设置定时器\n      if (this.collectForm.autoCollect) {\n        this.setupCollectSchedule()\n      } else {\n        // 单次采集完成后停止\n        this.isCollecting = false\n        this.saveState()\n      }\n    },\n    stopCollecting() {\n      this.isCollecting = false\n      if (this.collectTimer) {\n        clearInterval(this.collectTimer)\n        this.collectTimer = null\n      }\n      this.saveState() // 保存状态\n      // 只有在自动采集模式下才显示停止提示\n      if (this.collectForm.autoCollect) {\n        this.$message.success('已停止采集')\n      }\n    },\n    async collect() {\n      let progressMessage = null;\n      try {\n        if (this.isChecking) {\n          this.$message.warning('检测正在进行中，暂时跳过本次采集')\n          return\n        }\n\n        const total = this.collectForm.urls.length\n        if (total === 0) {\n          this.$message.warning('没有需要采集的地址')\n          return\n        }\n\n        // 创建进度消息提示\n        progressMessage = this.$message({\n          message: `正在采集: 0/${total}`,\n          type: 'info',\n          duration: 0,  // 消息不会自动关闭\n          showClose: false\n        });\n        \n        // 将URL列表分批处理，每批最多5个\n        const batchSize = 5\n        const urlBatches = []\n        for (let i = 0; i < this.collectForm.urls.length; i += batchSize) {\n          urlBatches.push(this.collectForm.urls.slice(i, i + batchSize))\n        }\n        \n        let allResults = []\n        let current = 0\n        \n        // 处理每一批URL\n        for (const batch of urlBatches) {\n          const batchPromises = batch.map(async (url) => {\n            try {\n              const response = await fetch(`${this.getBaseUrl()}/api/collect-url?url=${encodeURIComponent(url)}`, {\n                method: 'GET',\n                headers: {\n                  'Accept': 'text/plain'\n                },\n              })\n              \n              if (!response.ok) {\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`)\n              }\n              \n              const content = await response.text()\n              const newStreams = this.parseContent(content)\n              \n              // 根据采集模式过滤直播源\n              let filteredStreams = newStreams\n              if (this.collectForm.mode === 'tv') {\n                filteredStreams = newStreams.filter(s => {\n                  // 处理央视频道\n                  const isCCTV = /CCTV/i.test(s.name)\n                  if (isCCTV) {\n                    s.group = this.STANDARD_GROUPS.CCTV\n                    const cctvNumber = this.extractCCTVNumber(s.name)\n                    if (cctvNumber) {\n                      s.name = cctvNumber\n                    }\n                    return true\n                  }\n                  // 处理卫视频道\n                  const isSatellite = /卫视/.test(s.name)\n                  if (isSatellite) {\n                    s.group = this.STANDARD_GROUPS.SATELLITE\n                    return true\n                  }\n                  return false\n                })\n              }\n              \n              // 再次确保所有CCTV频道都在正确分组\n              filteredStreams.forEach(s => {\n                if (/CCTV/i.test(s.name)) {\n                  s.group = this.STANDARD_GROUPS.CCTV\n                }\n              })\n\n              current++\n              // 更新进度消息\n              if (progressMessage) {\n                progressMessage.message = `正在采集: ${Math.min(current, total)}/${total}`;\n              }\n              \n              return { status: 'fulfilled', value: filteredStreams }\n            } catch (error) {\n              current++\n              // 更新进度消息（即使失败也计入进度）\n              if (progressMessage) {\n                progressMessage.message = `正在采集: ${Math.min(current, total)}/${total}`;\n              }\n              console.error(`采集地址失败 ${url}:`, error)\n              return { status: 'rejected', reason: error }\n            }\n          })\n          \n          const batchResults = await Promise.all(batchPromises)\n          allResults = allResults.concat(batchResults)\n        }\n\n        // 合并所有采集结果\n        const allNewStreams = allResults\n          .filter(result => result.status === 'fulfilled')\n          .flatMap(result => result.value)\n          .filter((stream, index, self) => \n            index === self.findIndex(s => s.url === stream.url)\n          )\n\n        // 关闭进度消息\n        if (progressMessage) {\n          progressMessage.close();\n        }\n\n        // 添加新的直播源到列表\n        if (allNewStreams.length > 0) {\n          this.addStreamsToList(allNewStreams)\n          const modeText = this.collectForm.mode === 'tv' ? '央视卫视' : ''\n          this.$message.success(`采集成功: 新增${allNewStreams.length}个${modeText}直播源`)\n        } else {\n          const modeText = this.collectForm.mode === 'tv' ? '央视卫视' : ''\n          this.$message.info(`未发现新的${modeText}直播源`)\n        }\n\n        // 统计失败的地址\n        const failedUrls = allResults.filter(result => result.status === 'rejected').length\n        if (failedUrls > 0) {\n          this.$message.warning(`${failedUrls}个地址采集失败`)\n        }\n\n      } catch (error) {\n        console.error('采集失败:', error)\n        this.$message.error('采集失败：' + error.message)\n        if (!this.collectForm.autoCollect) {\n          this.stopCollecting()\n        }\n      } finally {\n        // 确保进度消息被关闭\n        if (progressMessage) {\n          progressMessage.close();\n        }\n      }\n    },\n\n    // 添加带重试机制的采集方法\n    async collectWithRetry(url, maxRetries = 3) {\n      let lastError\n      \n      for (let i = 0; i < maxRetries; i++) {\n        try {\n          const response = await fetch(`${this.getBaseUrl()}/api/collect-url?url=${encodeURIComponent(url)}`, {\n            method: 'GET',\n            headers: {\n              'Accept': 'text/plain'\n            },\n          })\n          \n          if (!response.ok) {\n            throw new Error(`HTTP ${response.status}: ${response.statusText}`)\n          }\n          \n          const content = await response.text()\n          const newStreams = this.parseContent(content)\n          \n          // 根据采集模式过滤直播源\n          let filteredStreams = newStreams\n          if (this.collectForm.mode === 'tv') {\n            filteredStreams = newStreams.filter(s => {\n              // 处理央视频道\n              const isCCTV = /CCTV/i.test(s.name)\n              if (isCCTV) {\n                s.group = this.STANDARD_GROUPS.CCTV\n                const cctvNumber = this.extractCCTVNumber(s.name)\n                if (cctvNumber) {\n                  s.name = cctvNumber\n                }\n                return true\n              }\n              // 处理卫视频道\n              const isSatellite = /卫视/.test(s.name)\n              if (isSatellite) {\n                s.group = this.STANDARD_GROUPS.SATELLITE\n                return true\n              }\n              return false\n            })\n          }\n          \n          // 再次确保所有CCTV频道都在正确分组\n          filteredStreams.forEach(s => {\n            if (/CCTV/i.test(s.name)) {\n              s.group = this.STANDARD_GROUPS.CCTV\n            }\n          })\n          \n          return filteredStreams\n          \n        } catch (error) {\n          lastError = error\n          console.warn(`采集地址 ${url} 第 ${i + 1} 次尝试失败:`, error)\n          \n          if (i < maxRetries - 1) {\n            continue // 直接进行下一次重试，不等待\n          }\n        }\n      }\n      \n      // 所有重试都失败后抛出最后一次的错误\n      throw new Error(`采集失败 [${url}]: ${lastError.message}`)\n    },\n\n    // 修改提取CCTV频道号的方法\n    extractCCTVNumber(name) {\n      // 尝试直接匹配CCTV+数字的形式\n      const cctvMatch = name.match(/CCTV-?(\\d+)(\\+)?/i)\n      if (cctvMatch) {\n        const number = cctvMatch[1]\n        const plus = cctvMatch[2] || ''\n        return `CCTV${number}${plus}`\n      }\n\n      // 处理特殊频道名称（如CCTV5+）\n      if (/CCTV5\\+|CCTV5Plus|体育赛事/.test(name)) {\n        return 'CCTV5+'\n      }\n\n      // 如果无法提取频道号，保留原始CCTV名称\n      const cctvNameMatch = name.match(/CCTV[^a-z0-9]*([a-z0-9]+)/i)\n      if (cctvNameMatch) {\n        return `CCTV${cctvNameMatch[1]}`\n      }\n\n      // 如果都无法匹配，返回原始名称\n      return name\n    },\n\n    async handleGenerateLink() {\n      this.generateLinkDialogVisible = true\n      try {\n        // 先生成 TXT 格式链接\n        const txtResponse = await fetch(`${this.getBaseUrl()}/api/generate-link`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain',\n            'X-File-Format': 'txt'\n          },\n          body: this.generateContent('txt')\n        })\n        \n        // 再生成 M3U 格式链接\n        const m3uResponse = await fetch(`${this.getBaseUrl()}/api/generate-link`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain',\n            'X-File-Format': 'm3u'\n          },\n          body: this.generateContent('m3u')\n        })\n        \n        if (txtResponse.ok && m3uResponse.ok) {\n          const txtLink = await txtResponse.text()\n          const m3uLink = await m3uResponse.text()\n          \n          // 根据当前选择的格式显示对应的链接\n          this.generatedLinks = {\n            txt: txtLink,\n            m3u: m3uLink\n          }\n          this.generatedLink = this.generatedLinks[this.linkForm.format]\n        }\n      } catch (error) {\n        console.error('生成链接失败：', error)\n        this.$message.error('生成链接失败')\n      }\n    },\n    generateContent(format) {\n      return format === 'txt' ? this.generateTxtContent() : this.generateM3uContent()\n    },\n    // 添加自定义排序方法\n    customSort(streams, group) {\n      return streams.sort((a, b) => {\n        if (group === this.STANDARD_GROUPS.CCTV) {\n          // 提取CCTV频道号进行排序\n          const getNumber = (name) => {\n            const match = name.match(/CCTV-?(\\d+)(\\+)?/i)\n            if (match) {\n              return parseInt(match[1]) + (match[2] ? 0.5 : 0) // CCTV5+ 会排在 CCTV5 后面\n            }\n            // 特殊处理CCTV5+\n            if (/CCTV5\\+|CCTV5Plus|体育赛事/.test(name)) {\n              return 5.5\n            }\n            return 999 // 无法识别的排在最后\n          }\n          const numA = getNumber(a.name)\n          const numB = getNumber(b.name)\n          return numA - numB\n        } else if (group === this.STANDARD_GROUPS.SATELLITE) {\n          // 卫视按照拼音首字母排序\n          return a.name.localeCompare(b.name, 'zh-CN')\n        } else {\n          // 其他分组按照默认排序\n          return a.name.localeCompare(b.name)\n        }\n      })\n    },\n    generateTxtContent() {\n      let content = ''\n      const groupedStreams = {}\n      \n      // 首先整理所有流到对应的分组\n      this.mergedStreams.forEach(stream => {\n        const group = stream.group || '未分组'\n        if (!groupedStreams[group]) {\n          groupedStreams[group] = []\n        }\n        groupedStreams[group].push(stream)\n      })\n\n      // 优先处理央视和卫视分组\n      const orderedGroups = [\n        this.STANDARD_GROUPS.CCTV,\n        this.STANDARD_GROUPS.SATELLITE,\n        ...Object.keys(groupedStreams).filter(group => \n          group !== this.STANDARD_GROUPS.CCTV && \n          group !== this.STANDARD_GROUPS.SATELLITE\n        )\n      ]\n\n      // 按分组生成内容\n      orderedGroups.forEach(group => {\n        if (groupedStreams[group] && groupedStreams[group].length > 0) {\n          content += `${group},#genre#\\n`\n          // 使用自定义排序方法\n          this.customSort(groupedStreams[group], group)\n            .forEach(stream => {\n        content += `${stream.name},${stream.urls.join('#')}\\n`\n            })\n        }\n      })\n      \n      return content.trim()\n    },\n    generateM3uContent() {\n      let content = '#EXTM3U\\n'\n      const groupedStreams = {}\n      \n      // 首先整理所有流到对应的分组\n      this.mergedStreams.forEach(stream => {\n        const group = stream.group || '未分组'\n        if (!groupedStreams[group]) {\n          groupedStreams[group] = []\n        }\n        groupedStreams[group].push(stream)\n      })\n\n      // 优先处理央视和卫视分组\n      const orderedGroups = [\n        this.STANDARD_GROUPS.CCTV,\n        this.STANDARD_GROUPS.SATELLITE,\n        ...Object.keys(groupedStreams).filter(group => \n          group !== this.STANDARD_GROUPS.CCTV && \n          group !== this.STANDARD_GROUPS.SATELLITE\n        )\n      ]\n\n      // 按分组生成内容\n      orderedGroups.forEach(group => {\n        if (groupedStreams[group] && groupedStreams[group].length > 0) {\n          // 使用自定义排序方法\n          this.customSort(groupedStreams[group], group)\n            .forEach(stream => {\n        stream.urls.forEach(url => {\n                content += `#EXTINF:-1 group-title=\"${group}\",${stream.name}\\n${url}\\n`\n        })\n            })\n        }\n      })\n      \n      return content.trim()\n    },\n    copyGeneratedLink() {\n      const textarea = document.createElement('textarea')\n      textarea.value = this.generatedLink\n      document.body.appendChild(textarea)\n      textarea.select()\n      \n      try {\n        document.execCommand('copy')\n        this.$message.success('链接已复制到剪贴板')\n      } catch (err) {\n        this.$message.error('复制失败')\n      } finally {\n        document.body.removeChild(textarea)\n      }\n    },\n    downloadTxtFile() {\n      const blob = new Blob([this.generatedLink], { type: 'text/plain;charset=utf-8' })\n      const url = window.URL.createObjectURL(blob)\n      const link = document.createElement('a')\n      link.href = url\n      link.download = `直播源列表_${new Date().toLocaleDateString()}.txt`\n      \n      document.body.appendChild(link)\n      link.click()\n      \n      // 清理\n      window.URL.revokeObjectURL(url)\n      document.body.removeChild(link)\n      this.$message.success('文件下载成功')\n    },\n    // 修改更新链接内容的方法\n    async updateLinkContent() {\n      try {\n        // 更新 TXT 格式内容\n        await fetch(`${this.getBaseUrl()}/api/update-content`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain',\n            'X-File-Format': 'txt'\n          },\n          body: this.generateContent('txt')\n        })\n        \n        // 更新 M3U 格式内容\n        await fetch(`${this.getBaseUrl()}/api/update-content`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'text/plain',\n            'X-File-Format': 'm3u'\n          },\n          body: this.generateContent('m3u')\n        })\n      } catch (error) {\n        console.error('更新链接内容失败：', error)\n      }\n    },\n    handleScheduleCheck() {\n      if (this.isScheduled) {\n        this.stopScheduleCheck()\n      } else {\n        this.scheduleDialogVisible = true\n      }\n    },\n    startScheduleCheck() {\n      this.$refs.scheduleForm.validate(valid => {\n        if (valid) {\n          this.scheduleDialogVisible = false\n          this.isScheduled = true\n          this.setupSchedule()\n          this.saveState() // 保存状态\n          this.$message.success('定时检测已开启')\n        }\n      })\n    },\n    stopScheduleCheck() {\n      if (this.scheduleTimer) {\n        clearInterval(this.scheduleTimer)\n        this.scheduleTimer = null\n      }\n      this.isScheduled = false\n      this.nextScheduleTime = null\n      this.saveState() // 保存状态\n      this.$message.success('定时检测已停止')\n    },\n    setupSchedule() {\n      // 清除现有定时器\n      if (this.scheduleTimer) {\n        clearInterval(this.scheduleTimer)\n      }\n\n      const calculateNextExecutionTime = () => {\n        const now = new Date()\n        const [hours, minutes] = this.scheduleForm.executeTime.split(':').map(Number)\n        let nextTime = new Date(now)\n        nextTime.setHours(hours, minutes, 0, 0)\n\n        // 如果当前时间已经过了今天的执行时间，设置为明天\n        if (nextTime <= now) {\n          nextTime.setDate(nextTime.getDate() + 1)\n        }\n\n        // 如果是每周模式，调整到下一个符合条件的星期\n        if (this.scheduleForm.scheduleType === 'weekly') {\n          const targetDay = parseInt(this.scheduleForm.weekDay)\n          while (nextTime.getDay() !== targetDay) {\n            nextTime.setDate(nextTime.getDate() + 1)\n          }\n        }\n\n        return nextTime\n      }\n\n      const scheduleNextExecution = () => {\n        const nextTime = calculateNextExecutionTime()\n        const delay = nextTime.getTime() - new Date().getTime()\n\n        // 更新下次执行时间显示\n        this.nextScheduleTime = nextTime\n\n        // 设置下次执行的定时器\n        this.scheduleTimer = setTimeout(() => {\n          // 如果当前正在检测中，等待检测完成后再执行\n          if (!this.isChecking) {\n            this.handleBatchCheck()\n          }\n          // 设置下一次执行\n          scheduleNextExecution()\n        }, delay)\n      }\n\n      // 开始第一次调度\n      scheduleNextExecution()\n    },\n    // 保存当前状态到本地存储\n    saveState() {\n      try {\n        // 清除旧的分块数据\n        this.clearStorageData()\n\n        // 只保存必要的数据字段，减少数据量\n        const minimalStreamList = this.streamList.map(stream => ({\n          name: stream.name,\n          url: stream.url,\n          group: stream.group,\n          status: stream.status,\n          resolution: stream.resolution || '',\n          responseTime: stream.responseTime || 0\n        }))\n\n        // 将streamList分块存储，减小分块大小\n        const streamListStr = JSON.stringify(minimalStreamList)\n        const chunkSize = 100000 // 减小到100KB\n        const chunks = Math.ceil(streamListStr.length / chunkSize)\n        \n        // 如果数据量太大，只保存基本信息\n        if (chunks > 10) {\n          console.warn('数据量过大，只保存基本状态信息')\n          const basicState = {\n            currentPage: this.currentPage,\n            pageSize: this.pageSize,\n            scheduleForm: this.scheduleForm,\n            collectForm: this.collectForm\n          }\n          localStorage.setItem(this.stateKey, JSON.stringify(basicState))\n          return\n        }\n\n        // 分块存储\n        for (let i = 0; i < chunks; i++) {\n          const chunk = streamListStr.slice(i * chunkSize, (i + 1) * chunkSize)\n          try {\n            localStorage.setItem(`${this.stateKey}_streamList_${i}`, chunk)\n          } catch (e) {\n            console.error('存储分块失败:', e)\n            this.clearStorageData()\n            // 尝试只保存基本信息\n            const basicState = {\n              currentPage: this.currentPage,\n              pageSize: this.pageSize,\n              scheduleForm: this.scheduleForm,\n              collectForm: this.collectForm\n            }\n            localStorage.setItem(this.stateKey, JSON.stringify(basicState))\n            return\n          }\n        }\n\n        // 存储其他状态数据\n        const state = {\n          currentPage: this.currentPage,\n          pageSize: this.pageSize,\n          scheduleForm: this.scheduleForm,\n          collectForm: this.collectForm,\n          streamListChunks: chunks\n        }\n        localStorage.setItem(this.stateKey, JSON.stringify(state))\n      } catch (error) {\n        console.error('保存状态失败:', error)\n        this.clearStorageData()\n        // 尝试只保存基本信息\n        try {\n          const basicState = {\n            currentPage: this.currentPage,\n            pageSize: this.pageSize\n          }\n          localStorage.setItem(this.stateKey, JSON.stringify(basicState))\n        } catch (e) {\n          console.error('保存基本状态也失败:', e)\n        }\n      }\n    },\n\n    // 从本地存储恢复状态\n    restoreState() {\n      try {\n        const savedState = localStorage.getItem(this.stateKey)\n        if (savedState) {\n          const state = JSON.parse(savedState)\n          \n          // 恢复streamList\n          if (state.streamListChunks) {\n            try {\n              let streamListStr = ''\n              for (let i = 0; i < state.streamListChunks; i++) {\n                const chunk = localStorage.getItem(`${this.stateKey}_streamList_${i}`)\n                if (chunk) {\n                  streamListStr += chunk\n                }\n              }\n              if (streamListStr) {\n                this.streamList = JSON.parse(streamListStr)\n              }\n            } catch (e) {\n              console.error('恢复streamList失败:', e)\n              this.streamList = []\n            }\n          }\n          \n          // 恢复其他状态\n          this.currentPage = state.currentPage || 1\n          this.pageSize = state.pageSize || 5\n          if (state.scheduleForm) this.scheduleForm = state.scheduleForm\n          if (state.collectForm) this.collectForm = state.collectForm\n        }\n\n        // 重置所有运行状态\n        this.isChecking = false\n        this.isPaused = false\n        this.isScheduled = false\n        this.isCollecting = false\n        this.checkedCount = 0\n        this.totalCount = 0\n        this.pausedIndex = -1\n        this.nextScheduleTime = null\n      } catch (error) {\n        console.error('恢复状态失败:', error)\n        this.clearStorageData()\n        this.streamList = []\n      }\n    },\n\n    // 清理存储数据\n    clearStorageData() {\n      try {\n        localStorage.removeItem(this.stateKey)\n        for (let i = 0; ; i++) {\n          const key = `${this.stateKey}_streamList_${i}`\n          if (localStorage.getItem(key) === null) {\n            break\n          }\n          localStorage.removeItem(key)\n        }\n      } catch (error) {\n        console.error('清理存储数据失败:', error)\n      }\n    },\n    // 添加重置所有运行状态的方法\n    resetAllStates() {\n      // 停止定时检测\n      if (this.isScheduled) {\n        this.stopScheduleCheck()\n      }\n      \n      // 停止采集\n      if (this.isCollecting) {\n        this.stopCollecting()\n      }\n      \n      // 停止批量检测\n      if (this.isChecking) {\n        this.shouldStop = true\n        this.isChecking = false\n        this.isPaused = false\n      }\n      \n      // 重置所有状态\n      this.isChecking = false\n      this.isPaused = false\n      this.isScheduled = false\n      this.isCollecting = false\n      this.checkedCount = 0\n      this.totalCount = 0\n      this.pausedIndex = -1\n      this.nextScheduleTime = null\n      \n      // 清除所有定时器\n      if (this.scheduleTimer) {\n        clearInterval(this.scheduleTimer)\n        this.scheduleTimer = null\n      }\n      if (this.collectTimer) {\n        clearInterval(this.collectTimer)\n        this.collectTimer = null\n      }\n      \n      // 保存重置后的状态\n      this.saveState()\n      \n      this.$message.success('所有运行状态已重置')\n    },\n    // 更新活动状态\n    updateActiveStatus() {\n      const hasActive = this.isChecking || this.isCollecting || this.isScheduled\n      \n      if (this.hasActiveOperations !== hasActive) {\n        this.hasActiveOperations = hasActive\n        if (hasActive) {\n          // 添加刷新拦截\n          window.addEventListener('beforeunload', this.handleBeforeUnload)\n        } else {\n          // 移除刷新拦截\n          window.removeEventListener('beforeunload', this.handleBeforeUnload)\n        }\n      }\n    },\n    // 处理页面刷新\n    handleBeforeUnload(e) {\n      if (this.hasActiveOperations) {\n        const message = '有正在执行的操作，确定要离开吗？'\n        e.preventDefault()\n        e.returnValue = message\n        return message\n      }\n    },\n    addCollectUrl() {\n      const newIndex = this.collectForm.urls.length\n        this.collectForm.urls.push('')\n      // 初始化新URL的状态\n      this.$set(this.collectForm.urlStatus, newIndex, {\n        isChecking: false,\n        isAccessible: null\n      })\n    },\n    removeCollectUrl(index) {\n      if (Array.isArray(this.collectForm.urls) && this.collectForm.urls.length > 1) {\n        this.collectForm.urls.splice(index, 1)\n        \n        // 重新排序urlStatus\n        const newUrlStatus = {}\n        Object.keys(this.collectForm.urlStatus || {})\n          .filter(key => parseInt(key) !== index)\n          .forEach((key, i) => {\n            newUrlStatus[i] = this.collectForm.urlStatus[key]\n          })\n        this.collectForm.urlStatus = newUrlStatus\n      }\n    },\n    // 添加判断分辨率标签类型的方法\n    getResolutionTagType(resolution) {\n      if (!resolution || resolution === '-') return 'info'\n      if (resolution === '多播源') return 'warning'  // 为多播源添加特殊样式\n      const [width] = resolution.split('x').map(Number)\n      if (width >= 1920) return 'success'\n      if (width >= 1280) return ''  // 默认类型\n      return 'warning'\n    },\n    // 添加判断响应时间标签类型的方法\n    getResponseTimeTagType(responseTime) {\n      if (!responseTime || responseTime === '-') return 'info'\n      const time = Number(responseTime)\n      if (time <= 1000) return 'success'\n      if (time <= 2000) return ''  // 默认类型\n      if (time <= 3000) return 'warning'\n      return 'danger'\n    },\n    setupCollectSchedule() {\n      // 清除现有定时器\n      if (this.collectTimer) {\n        clearInterval(this.collectTimer)\n      }\n\n      const calculateNextCollectTime = () => {\n        const now = new Date()\n        const [hours, minutes] = this.collectForm.executeTime.split(':').map(Number)\n        let nextTime = new Date(now)\n        nextTime.setHours(hours, minutes, 0, 0)\n\n        // 如果当前时间已经过了今天的执行时间，设置为明天\n        if (nextTime <= now) {\n          nextTime.setDate(nextTime.getDate() + 1)\n        }\n\n        // 如果是每周模式，调整到下一个符合条件的星期\n        if (this.collectForm.collectType === 'weekly') {\n          const targetDay = parseInt(this.collectForm.weekDay)\n          while (nextTime.getDay() !== targetDay) {\n            nextTime.setDate(nextTime.getDate() + 1)\n          }\n        }\n\n        return nextTime\n      }\n\n      const scheduleNextCollection = () => {\n        const nextTime = calculateNextCollectTime()\n        const delay = nextTime.getTime() - new Date().getTime()\n\n        // 设置下次执行的定时器\n        this.collectTimer = setTimeout(() => {\n          // 执行采集\n          this.collect()\n          // 设置下一次执行\n          scheduleNextCollection()\n        }, delay)\n      }\n\n      // 开始第一次调度\n      scheduleNextCollection()\n    },\n    handleSearch() {\n      this.filteredList = this.streamList.filter(item => {\n        // 对CCTV频道进行精确匹配\n        if (this.searchForm.name && /^cctv\\d*$/i.test(this.searchForm.name)) {\n          const searchPattern = new RegExp(`^${this.searchForm.name}[\\\\s-]*$`, 'i');\n          const nameMatch = searchPattern.test(item.name.toLowerCase().replace(/[^a-z0-9]/gi, ''));\n          const groupMatch = !this.searchForm.group || item.group === this.searchForm.group;\n          const statusMatch = !this.searchForm.status || item.status === this.searchForm.status;\n          return nameMatch && groupMatch && statusMatch;\n        }\n        \n        // 对其他搜索使用常规匹配\n        const nameMatch = !this.searchForm.name || \n          item.name.toLowerCase().includes(this.searchForm.name.toLowerCase());\n        const groupMatch = !this.searchForm.group || \n          item.group === this.searchForm.group;\n        const statusMatch = !this.searchForm.status || \n          item.status === this.searchForm.status;\n        \n        return nameMatch && groupMatch && statusMatch;\n      });\n      \n      // 重置到第一页\n      this.currentPage = 1;\n      this.searchDialogVisible = false;\n    },\n    resetSearch() {\n      this.searchForm = {\n        name: '',\n        group: '',\n        status: ''\n      }\n      this.filteredList = []\n      this.currentPage = 1\n    },\n    // 获取真实IP地址\n    async getRealIp() {\n      try {\n        const response = await fetch(`${this.getBaseUrl()}/api/local-ip`)\n        if (response.ok) {\n          const data = await response.json()\n          this.realIp = data.ip\n          localStorage.setItem('realIp', data.ip)  // 保存真实IP到localStorage\n        }\n      } catch (error) {\n        console.error('获取IP失败:', error)\n      }\n    },\n    // 获取基础URL\n    getBaseUrl() {\n      const useRealIp = localStorage.getItem('useRealIp') === 'true'\n      return useRealIp && this.realIp ? `http://${this.realIp}:8080` : 'http://localhost:8080'\n    },\n    async saveGithubSettings() {\n      try {\n        await this.$refs.syncForm.validate()\n\n        // 保存设置到localStorage\n        localStorage.setItem('githubToken', this.syncForm.token)\n        localStorage.setItem('githubRepo', this.syncForm.repo)\n        localStorage.setItem('githubTxtPath', this.syncForm.txtPath)\n        localStorage.setItem('githubM3uPath', this.syncForm.m3uPath)\n        localStorage.setItem('githubAutoSync', this.syncForm.autoSync)\n        localStorage.setItem('githubSyncType', this.syncForm.syncType)\n        localStorage.setItem('githubExecuteTime', this.syncForm.executeTime)\n        localStorage.setItem('githubWeekDay', this.syncForm.weekDay)\n\n        // 如果开启了自动同步，重新设置定时器\n        if (this.syncForm.autoSync) {\n          this.setupSyncSchedule()\n        } else {\n          this.clearSyncSchedule()\n        }\n\n        this.$message.success('设置已保存')\n        this.syncDialogVisible = false\n      } catch (error) {\n        this.$message.error(error.message || '保存失败')\n      }\n    },\n    async syncToGithub(content, path) {\n      const response = await fetch(`${this.getBaseUrl()}/api/sync-github`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          token: this.syncForm.token,\n          repo: this.syncForm.repo,\n          path: path,\n          content: content,\n          message: this.syncForm.message\n        })\n      })\n      \n      if (!response.ok) {\n        throw new Error('同步失败')\n      }\n    },\n    handleAutoSyncChange(value) {\n      if (value) {\n        this.setupSyncSchedule()\n      } else {\n        this.clearSyncSchedule()\n      }\n    },\n    setupSyncSchedule() {\n      this.clearSyncSchedule()\n      const calculateNextSyncTime = () => {\n        const now = new Date()\n        const [hours, minutes] = this.syncForm.executeTime.split(':').map(Number)\n        let nextTime = new Date(now)\n        nextTime.setHours(hours, minutes, 0, 0)\n\n        // 如果当前时间已经过了今天的执行时间，设置为明天\n        if (nextTime <= now) {\n          nextTime.setDate(nextTime.getDate() + 1)\n        }\n\n        // 如果是每周模式，调整到下一个符合条件的星期\n        if (this.syncForm.syncType === 'weekly') {\n          const targetDay = parseInt(this.syncForm.weekDay)\n          while (nextTime.getDay() !== targetDay) {\n            nextTime.setDate(nextTime.getDate() + 1)\n          }\n        }\n\n        return nextTime\n      }\n\n      const scheduleNextSync = () => {\n        const nextTime = calculateNextSyncTime()\n        const delay = nextTime.getTime() - new Date().getTime()\n\n        // 设置下次执行的定时器\n        this.syncTimer = setTimeout(async () => {\n          try {\n            // 执行同步\n            await this.syncToGithub(this.generateContent('txt'), this.syncForm.txtPath)\n            await this.syncToGithub(this.generateContent('m3u'), this.syncForm.m3uPath)\n            this.$message.success('已同步到GitHub')\n          } catch (error) {\n            this.$message.error('同步失败：' + error.message)\n          }\n          // 设置下一次执行\n          scheduleNextSync()\n        }, delay)\n      }\n\n      // 开始第一次调度\n      scheduleNextSync()\n    },\n    clearSyncSchedule() {\n      if (this.syncTimer) {\n        clearInterval(this.syncTimer)\n        this.syncTimer = null\n      }\n    },\n    getStatusTagType(status) {\n      switch (status) {\n        case '正常':\n          return 'success'\n        case '异常':\n          return 'danger'\n        case '未知':\n          return 'warning'\n        case '未检测':\n          return 'info'\n        default:\n          return 'info'\n      }\n    },\n    // 修改显示消息的方法\n    showMessage(content) {\n      // 如果是清除直播源的消息，使用新的消息系统\n      if (content.includes('已自动清除直播源') || content.includes('(')) {\n        const id = this.messageId++\n        const message = {\n          id,\n          content: content.includes('(') ? content : content.replace('已自动清除直播源：', '')\n        }\n        this.messages.push(message)\n        \n        // 3秒后自动移除消息\n        setTimeout(() => {\n          this.removeMessage(id)\n        }, 3000)\n        \n        // 最多显示3条消息\n        if (this.messages.length > 3) {\n          this.messages.shift()\n        }\n      } else {\n        // 其他消息使用 Element UI 的消息提示\n        this.$message.info(content)\n      }\n    },\n    \n    // 移除消息\n    removeMessage(id) {\n      const index = this.messages.findIndex(msg => msg.id === id)\n      if (index !== -1) {\n        this.messages.splice(index, 1)\n      }\n    },\n    // 修改清除直播源的提示\n    handleStreamRemoval(stream, reason) {\n      this.showMessage(`${stream.name} (${reason})`)\n    },\n    async checkUrlAccessibility() {\n      if (!this.importUrlForm.url) return\n      \n      this.importUrlForm.isChecking = true\n      this.importUrlForm.isAccessible = null\n      \n      try {\n        // 添加延迟，避免频繁请求\n        await new Promise(resolve => setTimeout(resolve, 500))\n        \n        const baseUrl = process.env.VUE_APP_API_URL || ''  // 从环境变量获取API基础URL\n        const response = await fetch(`${baseUrl}/api/check-url`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            url: this.importUrlForm.url\n          })\n        })\n        \n        if (!response.ok) throw new Error('请求失败')\n        const result = await response.json()\n        this.importUrlForm.isAccessible = result.accessible\n      } catch (error) {\n        console.error('检查链接可达性失败:', error)\n        this.importUrlForm.isAccessible = false\n      } finally {\n        this.importUrlForm.isChecking = false\n      }\n    },\n    async handleImportUrl() {\n      if (!this.importUrlForm.url) {\n        this.$message.warning('请输入文件链接')\n        return\n      }\n\n      // 如果链接未经过检测或检测失败，先进行检测\n      if (this.importUrlForm.isAccessible === null || this.importUrlForm.isAccessible === false) {\n        await this.checkUrlAccessibility()\n        if (!this.importUrlForm.isAccessible) {\n          return\n        }\n      }\n\n      try {\n        // 获取文件内容\n        const response = await fetch(this.importUrlForm.url)\n        if (!response.ok) throw new Error('获取文件失败')\n        \n        const content = await response.text()\n        const newStreams = this.parseContent(content)\n        \n        if (newStreams.length > 0) {\n          // 提取URL列表并过滤重复项\n          const existingUrls = new Set(this.streamList.map(s => s.url))\n          const uniqueStreams = newStreams.filter(s => !existingUrls.has(s.url))\n          \n          if (uniqueStreams.length > 0) {\n            // 批量添加到列表\n            this.streamList.push(...uniqueStreams)\n            this.$message.success(`成功导入 ${uniqueStreams.length} 个直播源`)\n            this.importUrlDialogVisible = false\n          } else {\n            this.$message.info('没有新的直播源可以导入')\n          }\n        } else {\n          this.$message.warning('未找到有效的直播源')\n        }\n      } catch (error) {\n        console.error('导入失败:', error)\n        this.$message.error('导入失败: ' + error.message)\n      } finally {\n        this.importUrlForm.isChecking = false\n      }\n    },\n    getPlaceholderText() {\n      switch (this.collectForm.mode) {\n        case 'tv':\n          return '请输入包含央视或卫视频道的网络地址'\n        default:\n          return '请输入需要采集的网络地址'\n      }\n    },\n    async handleCollectUrlsFileUpload(event) {\n      const file = event.target.files[0]\n      if (!file) return\n\n      try {\n        const content = await this.readFile(file)\n        // 按行分割并过滤空行\n        const urls = content.split('\\n')\n          .map(line => line.trim())\n          .filter(line => line && line.length > 0)\n        \n        if (urls.length === 0) {\n          this.$message.warning('文件中未找到有效的URL地址')\n          return\n        }\n\n        // 验证URL格式\n        const invalidUrls = urls.filter(url => !/^https?:\\/\\/.+/.test(url))\n        if (invalidUrls.length > 0) {\n          this.$message.warning(`发现 ${invalidUrls.length} 个无效的URL地址`)\n          return\n        }\n\n        // 初始化状态对象\n        const urlStatus = {}\n        urls.forEach((_, index) => {\n          urlStatus[index] = {\n            isChecking: false,\n            isAccessible: null\n          }\n        })\n        \n        // 使用Vue的响应式更新\n        this.$set(this.collectForm, 'urls', urls)\n        this.$set(this.collectForm, 'urlStatus', urlStatus)\n        \n        // 手动触发每个URL的检测\n        this.$nextTick(() => {\n          urls.forEach((url, index) => {\n            this.checkCollectUrlAccessibility(url, index)\n          })\n        })\n\n        this.$message.success(`成功导入 ${urls.length} 个采集地址`)\n      } catch (error) {\n        this.$message.error('读取文件失败：' + error.message)\n      } finally {\n        // 清除文件输入，允许重复选择同一文件\n        event.target.value = ''\n      }\n    },\n    async checkCollectUrlAccessibility(url, index) {\n      if (!url) {\n        console.warn('URL为空，跳过检测')\n        this.$set(this.collectForm.urlStatus, index, {\n          isChecking: false,\n          isAccessible: null,\n          error: '地址为空'\n        })\n        return\n      }\n\n      // 标准化URL格式\n      let normalizedUrl = url\n      if (!url.toLowerCase().startsWith('http')) {\n        normalizedUrl = 'http://' + url\n      }\n      \n      console.log(`开始检测URL (${index}):`, normalizedUrl)\n      \n      // 设置检查状态\n      this.$set(this.collectForm.urlStatus, index, {\n        isChecking: true,\n        isAccessible: null,\n        error: null\n      })\n      \n      try {\n        // 添加延迟，避免频繁请求\n        await new Promise(resolve => setTimeout(resolve, 500))\n        \n        const response = await fetch(`${this.getBaseUrl()}/api/check-url`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({ url: normalizedUrl })\n        })\n        \n        if (!response.ok) {\n          throw new Error(`HTTP错误: ${response.status}`)\n        }\n\n        const result = await response.json()\n        console.log(`URL (${index}) 检测结果:`, result)\n        \n        // 更新状态\n        this.$set(this.collectForm.urlStatus, index, {\n          isChecking: false,\n          isAccessible: result.accessible,\n          statusCode: result.statusCode,\n          error: result.error\n        })\n\n        // 如果检测失败，记录错误信息\n        if (!result.accessible) {\n          console.warn(`URL (${index}) 不可访问:`, result.error || '未知错误')\n        }\n      } catch (error) {\n        console.error(`URL (${index}) 检测失败:`, error)\n        this.$set(this.collectForm.urlStatus, index, {\n          isChecking: false,\n          isAccessible: false,\n          error: error.message || '检测失败'\n        })\n      }\n    },\n    clearCollectUrls() {\n      this.$confirm('确认清空所有采集地址吗？', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        // 重置采集地址列表\n        this.$set(this.collectForm, 'urls', [''])\n        // 重置状态对象\n        this.$set(this.collectForm, 'urlStatus', {\n          0: {\n            isChecking: false,\n            isAccessible: null\n          }\n        })\n        this.$message.success('已清空采集地址')\n      }).catch(() => {\n        // 用户取消操作\n      })\n    },\n  },\n  watch: {\n    // 只监听数据变化\n    streamList: {\n      handler() {\n        this.updateLinkContent()\n        this.saveState()\n      },\n      deep: true\n    },\n    currentPage() {\n      this.saveState()\n    },\n    pageSize() {\n      this.saveState()\n    },\n    // 监听所有可能的运行状态\n    isChecking() {\n      this.updateActiveStatus()\n    },\n    isCollecting() {\n      this.updateActiveStatus()\n    },\n    isScheduled() {\n      this.updateActiveStatus()\n    },\n    // 添加格式变化监听\n    'linkForm.format'() {\n      if (this.generateLinkDialogVisible) {\n        this.handleGenerateLink()\n      }\n    }\n  },\n  // 组件被激活时（重新显示）\n  activated() {\n    // 如果有定时任务，恢复定时器\n    if (this.isScheduled) {\n      this.setupSchedule()\n    }\n    // 如果有采集任务，且不是从其他页面切换回来，才恢复采集\n    if (this.isCollecting && !this.isPageSwitching) {\n      this.startCollecting(true)\n    }\n    // 如果有GitHub自动同步，恢复同步定时器\n    if (this.syncForm.autoSync) {\n      this.setupSyncSchedule()\n    }\n    // 重置页面切换标志\n    this.isPageSwitching = false\n  },\n  // 组件被停用时（离开但不销毁）\n  deactivated() {\n    // 设置页面切换标志\n    this.isPageSwitching = true\n    // 暂停定时器，但保持状态标志\n    if (this.scheduleTimer) {\n      clearInterval(this.scheduleTimer)\n      this.scheduleTimer = null\n    }\n    // 暂停采集定时器，但保持状态标志\n    if (this.collectTimer) {\n      clearInterval(this.collectTimer)\n      this.collectTimer = null\n    }\n    // 暂停同步定时器，但保持状态标志\n    if (this.syncTimer) {\n      clearInterval(this.syncTimer)\n      this.syncTimer = null\n    }\n  }\n}\n</script>\n\n<style scoped>\n.stream-check {\n  padding: 25px;\n  background-color: #fff;\n  border-radius: 4px;\n  height: calc(100vh - 130px);\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  position: relative;\n}\n\n.table-operations {\n  margin-bottom: 20px;\n  flex-shrink: 0;\n}\n\n.button-groups {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  align-items: center;\n}\n\n.button-group {\n  display: flex;\n  align-items: center;\n}\n\n/* 确保按钮组在小屏幕上不会被压缩 */\n:deep(.el-button-group) {\n  white-space: nowrap;\n  margin: 0;\n}\n\n/* 确保按钮内容不会换行 */\n:deep(.el-button) {\n  white-space: nowrap;\n}\n\n/* 在较小屏幕上调整按钮大小 */\n@media screen and (max-width: 768px) {\n  :deep(.el-button) {\n    padding: 8px 15px;\n    font-size: 12px;\n  }\n  \n  :deep(.el-button [class*=\"el-icon-\"]) {\n    font-size: 14px;\n  }\n}\n\n/* 在更小的屏幕上进一步调整 */\n@media screen and (max-width: 576px) {\n  .button-groups {\n    gap: 5px;\n  }\n  \n  :deep(.el-button) {\n    padding: 6px 10px;\n    font-size: 12px;\n  }\n}\n\n/* 添加表格容器样式 */\n.el-table-wrapper {\n  flex: 1;\n  position: relative; /* 添加相对定位 */\n  min-height: 200px; /* 设置最小高度 */\n}\n\n/* 覆盖 element-ui 的表格样式 */\n:deep(.el-table) {\n  position: absolute; /* 绝对定位 */\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  height: 100%;\n  max-height: 100%;\n}\n\n:deep(.el-table__body-wrapper) {\n  height: calc(100% - 40px) !important; /* 减去表头高度 */\n  overflow-y: auto !important;\n}\n\n:deep(.el-table__fixed-right) {\n  height: 100% !important; /* 修复固定列的高度 */\n  bottom: 0px;\n}\n\n:deep(.el-table__fixed-right .el-table__fixed-body-wrapper) {\n  height: calc(100% - 40px) !important; /* 减去表头高度 */\n}\n\n.pagination-container {\n  margin-top: 20px;\n  display: flex;\n  justify-content: center;\n  flex-shrink: 0; /* 防止分页被压缩 */\n  padding-bottom: 10px; /* 添加底部间距 */\n  background-color: #fff; /* 确保分页器背景色 */\n  position: relative; /* 添加相对定位 */\n  z-index: 1; /* 确保分页器在最上层 */\n}\n\n.el-button [class*=\"el-icon-\"] {\n  font-size: 18px;\n}\n\n.delete-btn {\n  color: #F56C6C;\n}\n\n.delete-btn:hover {\n  color: #ff4d4d;\n}\n\n.setting-tip {\n  margin-left: 10px;\n  color: #909399;\n  font-size: 13px;\n}\n\n.link-info {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.link-info p {\n  margin: 0;\n  color: #606266;\n}\n\n.link-actions {\n  display: flex;\n  gap: 10px;\n  justify-content: flex-end;\n  margin-top: 10px;\n}\n\n/* 生成链接对话框样式 */\n.generate-link-dialog {\n  max-width: 600px;\n}\n\n.link-container {\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n}\n\n.link-card, .tips-card {\n  margin: 0;\n  border: 1px solid #EBEEF5;\n}\n\n.link-content {\n  padding: 10px;\n}\n\n.tips-content {\n  color: #606266;\n  font-size: 14px;\n  padding: 10px;\n}\n\n.tips-content ul {\n  margin: 0;\n  padding-left: 20px;\n  line-height: 1.8;\n}\n\n/* 覆盖 element-ui 的一些默认样式 */\n:deep(.el-dialog__body) {\n  padding: 20px;\n}\n\n:deep(.el-card__header) {\n  padding: 12px 20px;\n  font-weight: 500;\n}\n\n:deep(.el-card__body) {\n  padding: 15px;\n}\n\n/* 可以添加一些自定义样式 */\n.el-tag {\n  width: 90px;  /* 统一标签宽度 */\n}\n\n.el-tag + .el-tag {\n  margin-left: 4px;\n}\n\n/* 修改消息面板样式 */\n.message-panel {\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  width: 300px;\n  z-index: 9999;\n  pointer-events: none;\n  opacity: 0;\n  transition: opacity 0.3s;\n}\n\n.message-panel.has-messages {\n  opacity: 1;\n}\n\n.message-item {\n  background: rgba(64, 158, 255, 0.95);\n  color: white;\n  border-radius: 4px;\n  padding: 10px 15px;\n  margin-bottom: 8px;\n  box-shadow: 0 2px 12px 0 rgba(0,0,0,.1);\n  display: flex;\n  align-items: center;\n  font-size: 14px;\n  transition: all 0.3s;\n}\n\n.message-item i {\n  margin-right: 8px;\n  font-size: 16px;\n}\n\n.message-content {\n  flex: 1;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n/* 消息动画 */\n.message-list-enter-active, .message-list-leave-active {\n  transition: all 0.3s;\n}\n\n.message-list-enter {\n  transform: translateY(100%);\n  opacity: 0;\n}\n\n.message-list-leave-to {\n  transform: translateX(100%);\n  opacity: 0;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}